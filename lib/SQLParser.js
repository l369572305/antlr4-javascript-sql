// Generated from grammars/sql/SQLParser.g4 by ANTLR 4.5.1
// jshint ignore: start

module.exports = function (antlr4, SQLParserListener) {

var grammarFileName = "SQLParser.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003\u00ce\u06ae\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0003\u0002\u0003\u0002",
    "\u0005\u0002\u0197\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u019f\n\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0005\u0006",
    "\u01a7\n\u0006\u0003\u0007\u0003\u0007\u0005\u0007\u01ab\n\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u01b2",
    "\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007",
    "\u01b8\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u01c2\n\b\u0003\b\u0005\b\u01c5\n\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u01d0",
    "\n\b\u0003\b\u0005\b\u01d3\n\b\u0003\b\u0005\b\u01d6\n\b\u0003\b\u0003",
    "\b\u0005\b\u01da\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b",
    "\u01e1\n\b\u0003\b\u0005\b\u01e4\n\b\u0003\b\u0005\b\u01e7\n\b\u0003",
    "\b\u0003\b\u0003\b\u0005\b\u01ec\n\b\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0007\t\u01f2\n\t\f\t\u000e\t\u01f5\u000b\t\u0003\t\u0003\t\u0003\n",
    "\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0007\f\u0203\n\f\f\f\u000e\f\u0206\u000b\f\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u021a\n\u0011\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0007\u0013\u0229\n\u0013\f\u0013\u000e\u0013\u022c\u000b\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0238\n",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u023c\n\u0014\u0005\u0014",
    "\u023e\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u024b\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0007\u0016\u0250\n\u0016\f\u0016\u000e\u0016\u0253\u000b\u0016\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0007\u001a\u0268\n\u001a\f\u001a\u000e\u001a\u026b\u000b\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0271\n",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0282\n\u001e",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u0286\n\u001f\u0003 \u0003 \u0003",
    "!\u0003!\u0005!\u028c\n!\u0003\"\u0003\"\u0003\"\u0005\"\u0291\n\"\u0003",
    "#\u0003#\u0003#\u0005#\u0296\n#\u0003$\u0003$\u0003$\u0003%\u0003%\u0003",
    "%\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003(\u0003(\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u02ae\n)\u0003*\u0003",
    "*\u0003+\u0003+\u0005+\u02b4\n+\u0003+\u0003+\u0005+\u02b8\n+\u0003",
    "+\u0003+\u0003+\u0005+\u02bd\n+\u0003+\u0003+\u0003+\u0005+\u02c2\n",
    "+\u0003+\u0003+\u0005+\u02c6\n+\u0003+\u0005+\u02c9\n+\u0003,\u0003",
    ",\u0003,\u0003,\u0003-\u0003-\u0003-\u0005-\u02d2\n-\u0003-\u0003-\u0003",
    "-\u0005-\u02d7\n-\u0003-\u0003-\u0005-\u02db\n-\u0003-\u0003-\u0003",
    "-\u0003-\u0005-\u02e1\n-\u0003-\u0003-\u0003-\u0003-\u0005-\u02e7\n",
    "-\u0003-\u0003-\u0003-\u0005-\u02ec\n-\u0003-\u0003-\u0005-\u02f0\n",
    "-\u0005-\u02f2\n-\u0003.\u0003.\u0005.\u02f6\n.\u0003.\u0003.\u0005",
    ".\u02fa\n.\u0005.\u02fc\n.\u0003/\u0003/\u0005/\u0300\n/\u00030\u0003",
    "0\u00050\u0304\n0\u00030\u00030\u00050\u0308\n0\u00030\u00030\u0005",
    "0\u030c\n0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00050\u0317\n0\u00031\u00031\u00051\u031b\n1\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00051\u0323\n1\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00052\u032d\n2\u00033\u00033\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00054\u033e\n4\u00035\u00035\u00055\u0342\n5\u00035\u00035\u0005",
    "5\u0346\n5\u00035\u00035\u00035\u00055\u034b\n5\u00055\u034d\n5\u0003",
    "6\u00036\u00056\u0351\n6\u00036\u00036\u00036\u00056\u0356\n6\u0003",
    "6\u00036\u00056\u035a\n6\u00056\u035c\n6\u00037\u00037\u00057\u0360",
    "\n7\u00038\u00038\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00059\u036d\n9\u0003:\u0003:\u0003;\u0003;\u0003<\u0005<\u0374",
    "\n<\u0003<\u0003<\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0005>\u0380\n>\u0005>\u0382\n>\u0003?\u0003?\u0003?\u0005?\u0387",
    "\n?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0006D\u03a7\nD\rD\u000eD\u03a8\u0003D\u0003D\u0005D\u03ad\nD\u0003",
    "E\u0003E\u0005E\u03b1\nE\u0003F\u0003F\u0003F\u0006F\u03b6\nF\rF\u000e",
    "F\u03b7\u0003F\u0005F\u03bb\nF\u0003F\u0003F\u0003G\u0003G\u0006G\u03c1",
    "\nG\rG\u000eG\u03c2\u0003G\u0005G\u03c6\nG\u0003G\u0003G\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003I\u0003J\u0003",
    "J\u0003J\u0003K\u0003K\u0005K\u03d9\nK\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003M\u0003M\u0003N\u0003N\u0003O\u0003O\u0003O\u0005",
    "O\u03e9\nO\u0003P\u0003P\u0003P\u0005P\u03ee\nP\u0003Q\u0003Q\u0003",
    "Q\u0007Q\u03f3\nQ\fQ\u000eQ\u03f6\u000bQ\u0003R\u0003R\u0003R\u0007",
    "R\u03fb\nR\fR\u000eR\u03fe\u000bR\u0003S\u0005S\u0401\nS\u0003S\u0003",
    "S\u0003T\u0003T\u0003T\u0003T\u0007T\u0409\nT\fT\u000eT\u040c\u000b",
    "T\u0003T\u0003T\u0003U\u0003U\u0003U\u0007U\u0413\nU\fU\u000eU\u0416",
    "\u000bU\u0003U\u0005U\u0419\nU\u0003V\u0003V\u0003W\u0003W\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0005Y\u0429",
    "\nY\u0003Z\u0003Z\u0003[\u0003[\u0005[\u042f\n[\u0003\\\u0003\\\u0003",
    "]\u0003]\u0003]\u0007]\u0436\n]\f]\u000e]\u0439\u000b]\u0003^\u0003",
    "^\u0003_\u0003_\u0005_\u043f\n_\u0003`\u0003`\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003b\u0005b\u0449\nb\u0003b\u0005b\u044c\nb\u0003b\u0005",
    "b\u044f\nb\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u0456\nb\u0003",
    "c\u0003c\u0003d\u0003d\u0003e\u0003e\u0003e\u0007e\u045f\ne\fe\u000e",
    "e\u0462\u000be\u0003f\u0003f\u0003f\u0007f\u0467\nf\ff\u000ef\u046a",
    "\u000bf\u0003g\u0003g\u0003g\u0005g\u046f\ng\u0003h\u0003h\u0005h\u0473",
    "\nh\u0003i\u0003i\u0005i\u0477\ni\u0003i\u0003i\u0003j\u0003j\u0003",
    "k\u0003k\u0005k\u047f\nk\u0003l\u0003l\u0005l\u0483\nl\u0003m\u0003",
    "m\u0003m\u0003m\u0003n\u0003n\u0005n\u048b\nn\u0003o\u0003o\u0003p\u0003",
    "p\u0003q\u0003q\u0005q\u0493\nq\u0003r\u0003r\u0005r\u0497\nr\u0003",
    "s\u0003s\u0005s\u049b\ns\u0003s\u0005s\u049e\ns\u0003s\u0005s\u04a1",
    "\ns\u0003s\u0005s\u04a4\ns\u0003s\u0005s\u04a7\ns\u0003t\u0003t\u0003",
    "t\u0003u\u0003u\u0003u\u0007u\u04af\nu\fu\u000eu\u04b2\u000bu\u0003",
    "v\u0003v\u0005v\u04b6\nv\u0003w\u0003w\u0006w\u04ba\nw\rw\u000ew\u04bb",
    "\u0003x\u0003x\u0003x\u0003x\u0005x\u04c2\nx\u0003x\u0003x\u0003x\u0003",
    "x\u0003x\u0003x\u0005x\u04ca\nx\u0003x\u0003x\u0003x\u0003x\u0003x\u0005",
    "x\u04d1\nx\u0003y\u0003y\u0003y\u0003y\u0003z\u0005z\u04d8\nz\u0003",
    "z\u0003z\u0003z\u0003z\u0003{\u0003{\u0005{\u04e0\n{\u0003{\u0003{\u0003",
    "{\u0003|\u0003|\u0003|\u0003|\u0003}\u0003}\u0005}\u04eb\n}\u0003~\u0003",
    "~\u0005~\u04ef\n~\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0005",
    "\u0080\u04f5\n\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083",
    "\u0005\u0083\u0501\n\u0083\u0003\u0083\u0005\u0083\u0504\n\u0083\u0003",
    "\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u050a\n\u0083",
    "\u0003\u0083\u0003\u0083\u0005\u0083\u050e\n\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0515\n\u0083",
    "\u0005\u0083\u0517\n\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0007",
    "\u0084\u051c\n\u0084\f\u0084\u000e\u0084\u051f\u000b\u0084\u0003\u0085",
    "\u0003\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087",
    "\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0007\u0089\u052f\n\u0089\f\u0089\u000e\u0089\u0532\u000b",
    "\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a\u0538",
    "\n\u008a\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b",
    "\u0005\u008b\u053f\n\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0007",
    "\u008c\u0544\n\u008c\f\u008c\u000e\u008c\u0547\u000b\u008c\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0007\u0091\u055c\n\u0091\f\u0091\u000e\u0091\u055f\u000b\u0091\u0003",
    "\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0005\u0093\u0565\n\u0093",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u056b\n",
    "\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u056f\n\u0094\u0003\u0094",
    "\u0003\u0094\u0005\u0094\u0573\n\u0094\u0003\u0094\u0007\u0094\u0576",
    "\n\u0094\f\u0094\u000e\u0094\u0579\u000b\u0094\u0003\u0095\u0003\u0095",
    "\u0005\u0095\u057d\n\u0095\u0003\u0096\u0003\u0096\u0003\u0096\u0003",
    "\u0096\u0005\u0096\u0583\n\u0096\u0003\u0096\u0003\u0096\u0005\u0096",
    "\u0587\n\u0096\u0003\u0096\u0003\u0096\u0005\u0096\u058b\n\u0096\u0003",
    "\u0096\u0007\u0096\u058e\n\u0096\f\u0096\u000e\u0096\u0591\u000b\u0096",
    "\u0003\u0097\u0003\u0097\u0005\u0097\u0595\n\u0097\u0003\u0098\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u059c\n\u0098",
    "\u0003\u0099\u0003\u0099\u0005\u0099\u05a0\n\u0099\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0005\u009b\u05a7\n\u009b",
    "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c",
    "\u05ae\n\u009c\u0005\u009c\u05b0\n\u009c\u0003\u009d\u0003\u009d\u0005",
    "\u009d\u05b4\n\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u05b8\n\u009d",
    "\u0003\u009e\u0003\u009e\u0003\u009e\u0007\u009e\u05bd\n\u009e\f\u009e",
    "\u000e\u009e\u05c0\u000b\u009e\u0003\u009f\u0003\u009f\u0005\u009f\u05c4",
    "\n\u009f\u0003\u00a0\u0003\u00a0\u0005\u00a0\u05c8\n\u00a0\u0003\u00a1",
    "\u0003\u00a1\u0005\u00a1\u05cc\n\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0005\u00a3\u05d5",
    "\n\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0005\u00a4\u05da\n\u00a4",
    "\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0007\u00a5",
    "\u05e1\n\u00a5\f\u00a5\u000e\u00a5\u05e4\u000b\u00a5\u0003\u00a6\u0003",
    "\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0005\u00aa\u05f6\n\u00aa\u0003\u00ab",
    "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0005\u00ae\u0602\n\u00ae\u0003",
    "\u00ae\u0003\u00ae\u0005\u00ae\u0606\n\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af\u0005\u00af\u060e\n",
    "\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u0618\n\u00b0\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0007\u00b1\u061d\n\u00b1\f\u00b1\u000e\u00b1",
    "\u0620\u000b\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b3\u0005\u00b3\u0627\n\u00b3\u0003\u00b3\u0003\u00b3\u0005\u00b3",
    "\u062b\n\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0005\u00b4\u0633\n\u00b4\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u063a\n\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b8\u0003\u00b8\u0005\u00b8\u0645\n\u00b8\u0003\u00b9",
    "\u0003\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00bb\u0005\u00bb\u064c\n",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0656\n\u00bd\u0003\u00be",
    "\u0003\u00be\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c0",
    "\u0005\u00c0\u065f\n\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c2\u0003\u00c2\u0005\u00c2\u0667\n\u00c2\u0003\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0007\u00c3\u066c\n\u00c3\f\u00c3\u000e\u00c3",
    "\u066f\u000b\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c5\u0007\u00c5\u0678\n\u00c5\f\u00c5\u000e",
    "\u00c5\u067b\u000b\u00c5\u0003\u00c6\u0003\u00c6\u0005\u00c6\u067f\n",
    "\u00c6\u0003\u00c6\u0005\u00c6\u0682\n\u00c6\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0005\u00c9\u068d\n\u00c9\u0003\u00ca\u0003\u00ca\u0005",
    "\u00ca\u0691\n\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0699\n\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u069f\n\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca",
    "\u06a7\n\u00ca\u0005\u00ca\u06a9\n\u00ca\u0003\u00ca\u0005\u00ca\u06ac",
    "\n\u00ca\u0003\u00ca\u0002\u0002\u00cb\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2",
    "\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba",
    "\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2",
    "\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea",
    "\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102",
    "\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a",
    "\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132",
    "\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a",
    "\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162",
    "\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a",
    "\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192",
    "\u0002\u0016\u0005\u00028RT\u00a4\u00a6\u00a9\u0005\u0002\u0013\u0013",
    "11\u007f\u007f\u0003\u0002\u0087\u0088\u0003\u0002\u00c6\u00c7\u000f",
    "\u0002\u0006\u0006,,88==@@IIPPVV]]bbtuww\u0081\u0082\u0003\u0002\u00bc",
    "\u00bd\u0003\u0002\u00be\u00c0\u0003\u0002z|\u0005\u0002\t\t\u001f\u001f",
    "00\u0005\u0002\u0014\u0014  **\u0004\u0002\u0012\u001222\u0004\u0002",
    "\u0004\u0004\u000f\u000f\u0004\u0002\u00b0\u00b0\u00b5\u00b9\u0004\u0002",
    "\u0007\u0007--\u0003\u0002\u00aa\u00ad\u0004\u0002\u0006\u0006,,\u0006",
    "\u0002BBSScd\u0085\u0085\t\u0002;;DFHHWX_all\u0084\u0084\u0004\u0002",
    "  **\u0004\u0002\b\b\u000e\u000e\u06dd\u0002\u0194\u0003\u0002\u0002",
    "\u0002\u0004\u019e\u0003\u0002\u0002\u0002\u0006\u01a0\u0003\u0002\u0002",
    "\u0002\b\u01a2\u0003\u0002\u0002\u0002\n\u01a6\u0003\u0002\u0002\u0002",
    "\f\u01a8\u0003\u0002\u0002\u0002\u000e\u01eb\u0003\u0002\u0002\u0002",
    "\u0010\u01ed\u0003\u0002\u0002\u0002\u0012\u01f8\u0003\u0002\u0002\u0002",
    "\u0014\u01fb\u0003\u0002\u0002\u0002\u0016\u01fd\u0003\u0002\u0002\u0002",
    "\u0018\u0209\u0003\u0002\u0002\u0002\u001a\u020d\u0003\u0002\u0002\u0002",
    "\u001c\u0210\u0003\u0002\u0002\u0002\u001e\u0213\u0003\u0002\u0002\u0002",
    " \u0219\u0003\u0002\u0002\u0002\"\u021b\u0003\u0002\u0002\u0002$\u0225",
    "\u0003\u0002\u0002\u0002&\u022d\u0003\u0002\u0002\u0002(\u023f\u0003",
    "\u0002\u0002\u0002*\u024c\u0003\u0002\u0002\u0002,\u0254\u0003\u0002",
    "\u0002\u0002.\u0257\u0003\u0002\u0002\u00020\u025a\u0003\u0002\u0002",
    "\u00022\u0264\u0003\u0002\u0002\u00024\u026c\u0003\u0002\u0002\u0002",
    "6\u0276\u0003\u0002\u0002\u00028\u027b\u0003\u0002\u0002\u0002:\u027d",
    "\u0003\u0002\u0002\u0002<\u0285\u0003\u0002\u0002\u0002>\u0287\u0003",
    "\u0002\u0002\u0002@\u028b\u0003\u0002\u0002\u0002B\u0290\u0003\u0002",
    "\u0002\u0002D\u0295\u0003\u0002\u0002\u0002F\u0297\u0003\u0002\u0002",
    "\u0002H\u029a\u0003\u0002\u0002\u0002J\u029d\u0003\u0002\u0002\u0002",
    "L\u02a0\u0003\u0002\u0002\u0002N\u02a2\u0003\u0002\u0002\u0002P\u02ad",
    "\u0003\u0002\u0002\u0002R\u02af\u0003\u0002\u0002\u0002T\u02c8\u0003",
    "\u0002\u0002\u0002V\u02ca\u0003\u0002\u0002\u0002X\u02f1\u0003\u0002",
    "\u0002\u0002Z\u02fb\u0003\u0002\u0002\u0002\\\u02ff\u0003\u0002\u0002",
    "\u0002^\u0316\u0003\u0002\u0002\u0002`\u0322\u0003\u0002\u0002\u0002",
    "b\u032c\u0003\u0002\u0002\u0002d\u032e\u0003\u0002\u0002\u0002f\u033d",
    "\u0003\u0002\u0002\u0002h\u034c\u0003\u0002\u0002\u0002j\u035b\u0003",
    "\u0002\u0002\u0002l\u035f\u0003\u0002\u0002\u0002n\u0361\u0003\u0002",
    "\u0002\u0002p\u036c\u0003\u0002\u0002\u0002r\u036e\u0003\u0002\u0002",
    "\u0002t\u0370\u0003\u0002\u0002\u0002v\u0373\u0003\u0002\u0002\u0002",
    "x\u0377\u0003\u0002\u0002\u0002z\u0381\u0003\u0002\u0002\u0002|\u0383",
    "\u0003\u0002\u0002\u0002~\u038b\u0003\u0002\u0002\u0002\u0080\u038d",
    "\u0003\u0002\u0002\u0002\u0082\u0393\u0003\u0002\u0002\u0002\u0084\u0398",
    "\u0003\u0002\u0002\u0002\u0086\u03ac\u0003\u0002\u0002\u0002\u0088\u03b0",
    "\u0003\u0002\u0002\u0002\u008a\u03b2\u0003\u0002\u0002\u0002\u008c\u03be",
    "\u0003\u0002\u0002\u0002\u008e\u03c9\u0003\u0002\u0002\u0002\u0090\u03ce",
    "\u0003\u0002\u0002\u0002\u0092\u03d3\u0003\u0002\u0002\u0002\u0094\u03d8",
    "\u0003\u0002\u0002\u0002\u0096\u03da\u0003\u0002\u0002\u0002\u0098\u03e1",
    "\u0003\u0002\u0002\u0002\u009a\u03e3\u0003\u0002\u0002\u0002\u009c\u03e8",
    "\u0003\u0002\u0002\u0002\u009e\u03ed\u0003\u0002\u0002\u0002\u00a0\u03ef",
    "\u0003\u0002\u0002\u0002\u00a2\u03f7\u0003\u0002\u0002\u0002\u00a4\u0400",
    "\u0003\u0002\u0002\u0002\u00a6\u0404\u0003\u0002\u0002\u0002\u00a8\u0418",
    "\u0003\u0002\u0002\u0002\u00aa\u041a\u0003\u0002\u0002\u0002\u00ac\u041c",
    "\u0003\u0002\u0002\u0002\u00ae\u041e\u0003\u0002\u0002\u0002\u00b0\u0428",
    "\u0003\u0002\u0002\u0002\u00b2\u042a\u0003\u0002\u0002\u0002\u00b4\u042e",
    "\u0003\u0002\u0002\u0002\u00b6\u0430\u0003\u0002\u0002\u0002\u00b8\u0432",
    "\u0003\u0002\u0002\u0002\u00ba\u043a\u0003\u0002\u0002\u0002\u00bc\u043e",
    "\u0003\u0002\u0002\u0002\u00be\u0440\u0003\u0002\u0002\u0002\u00c0\u0442",
    "\u0003\u0002\u0002\u0002\u00c2\u0455\u0003\u0002\u0002\u0002\u00c4\u0457",
    "\u0003\u0002\u0002\u0002\u00c6\u0459\u0003\u0002\u0002\u0002\u00c8\u045b",
    "\u0003\u0002\u0002\u0002\u00ca\u0463\u0003\u0002\u0002\u0002\u00cc\u046e",
    "\u0003\u0002\u0002\u0002\u00ce\u0470\u0003\u0002\u0002\u0002\u00d0\u0474",
    "\u0003\u0002\u0002\u0002\u00d2\u047a\u0003\u0002\u0002\u0002\u00d4\u047e",
    "\u0003\u0002\u0002\u0002\u00d6\u0482\u0003\u0002\u0002\u0002\u00d8\u0484",
    "\u0003\u0002\u0002\u0002\u00da\u048a\u0003\u0002\u0002\u0002\u00dc\u048c",
    "\u0003\u0002\u0002\u0002\u00de\u048e\u0003\u0002\u0002\u0002\u00e0\u0492",
    "\u0003\u0002\u0002\u0002\u00e2\u0496\u0003\u0002\u0002\u0002\u00e4\u0498",
    "\u0003\u0002\u0002\u0002\u00e6\u04a8\u0003\u0002\u0002\u0002\u00e8\u04ab",
    "\u0003\u0002\u0002\u0002\u00ea\u04b5\u0003\u0002\u0002\u0002\u00ec\u04b7",
    "\u0003\u0002\u0002\u0002\u00ee\u04d0\u0003\u0002\u0002\u0002\u00f0\u04d2",
    "\u0003\u0002\u0002\u0002\u00f2\u04d7\u0003\u0002\u0002\u0002\u00f4\u04dd",
    "\u0003\u0002\u0002\u0002\u00f6\u04e4\u0003\u0002\u0002\u0002\u00f8\u04ea",
    "\u0003\u0002\u0002\u0002\u00fa\u04ec\u0003\u0002\u0002\u0002\u00fc\u04f0",
    "\u0003\u0002\u0002\u0002\u00fe\u04f4\u0003\u0002\u0002\u0002\u0100\u04f6",
    "\u0003\u0002\u0002\u0002\u0102\u04f9\u0003\u0002\u0002\u0002\u0104\u0516",
    "\u0003\u0002\u0002\u0002\u0106\u0518\u0003\u0002\u0002\u0002\u0108\u0520",
    "\u0003\u0002\u0002\u0002\u010a\u0522\u0003\u0002\u0002\u0002\u010c\u0525",
    "\u0003\u0002\u0002\u0002\u010e\u0527\u0003\u0002\u0002\u0002\u0110\u052b",
    "\u0003\u0002\u0002\u0002\u0112\u0537\u0003\u0002\u0002\u0002\u0114\u053e",
    "\u0003\u0002\u0002\u0002\u0116\u0540\u0003\u0002\u0002\u0002\u0118\u0548",
    "\u0003\u0002\u0002\u0002\u011a\u054d\u0003\u0002\u0002\u0002\u011c\u0552",
    "\u0003\u0002\u0002\u0002\u011e\u0555\u0003\u0002\u0002\u0002\u0120\u0558",
    "\u0003\u0002\u0002\u0002\u0122\u0560\u0003\u0002\u0002\u0002\u0124\u0564",
    "\u0003\u0002\u0002\u0002\u0126\u056e\u0003\u0002\u0002\u0002\u0128\u057c",
    "\u0003\u0002\u0002\u0002\u012a\u0586\u0003\u0002\u0002\u0002\u012c\u0594",
    "\u0003\u0002\u0002\u0002\u012e\u059b\u0003\u0002\u0002\u0002\u0130\u059f",
    "\u0003\u0002\u0002\u0002\u0132\u05a1\u0003\u0002\u0002\u0002\u0134\u05a6",
    "\u0003\u0002\u0002\u0002\u0136\u05a8\u0003\u0002\u0002\u0002\u0138\u05b1",
    "\u0003\u0002\u0002\u0002\u013a\u05b9\u0003\u0002\u0002\u0002\u013c\u05c3",
    "\u0003\u0002\u0002\u0002\u013e\u05c5\u0003\u0002\u0002\u0002\u0140\u05cb",
    "\u0003\u0002\u0002\u0002\u0142\u05cf\u0003\u0002\u0002\u0002\u0144\u05d4",
    "\u0003\u0002\u0002\u0002\u0146\u05d9\u0003\u0002\u0002\u0002\u0148\u05dd",
    "\u0003\u0002\u0002\u0002\u014a\u05e5\u0003\u0002\u0002\u0002\u014c\u05e7",
    "\u0003\u0002\u0002\u0002\u014e\u05e9\u0003\u0002\u0002\u0002\u0150\u05eb",
    "\u0003\u0002\u0002\u0002\u0152\u05f5\u0003\u0002\u0002\u0002\u0154\u05f7",
    "\u0003\u0002\u0002\u0002\u0156\u05fb\u0003\u0002\u0002\u0002\u0158\u05fd",
    "\u0003\u0002\u0002\u0002\u015a\u0601\u0003\u0002\u0002\u0002\u015c\u060b",
    "\u0003\u0002\u0002\u0002\u015e\u0617\u0003\u0002\u0002\u0002\u0160\u0619",
    "\u0003\u0002\u0002\u0002\u0162\u0621\u0003\u0002\u0002\u0002\u0164\u062a",
    "\u0003\u0002\u0002\u0002\u0166\u0632\u0003\u0002\u0002\u0002\u0168\u0634",
    "\u0003\u0002\u0002\u0002\u016a\u0636\u0003\u0002\u0002\u0002\u016c\u063d",
    "\u0003\u0002\u0002\u0002\u016e\u0644\u0003\u0002\u0002\u0002\u0170\u0646",
    "\u0003\u0002\u0002\u0002\u0172\u0648\u0003\u0002\u0002\u0002\u0174\u064b",
    "\u0003\u0002\u0002\u0002\u0176\u0650\u0003\u0002\u0002\u0002\u0178\u0655",
    "\u0003\u0002\u0002\u0002\u017a\u0657\u0003\u0002\u0002\u0002\u017c\u0659",
    "\u0003\u0002\u0002\u0002\u017e\u065b\u0003\u0002\u0002\u0002\u0180\u0662",
    "\u0003\u0002\u0002\u0002\u0182\u0666\u0003\u0002\u0002\u0002\u0184\u0668",
    "\u0003\u0002\u0002\u0002\u0186\u0670\u0003\u0002\u0002\u0002\u0188\u0674",
    "\u0003\u0002\u0002\u0002\u018a\u067c\u0003\u0002\u0002\u0002\u018c\u0683",
    "\u0003\u0002\u0002\u0002\u018e\u0685\u0003\u0002\u0002\u0002\u0190\u068c",
    "\u0003\u0002\u0002\u0002\u0192\u06ab\u0003\u0002\u0002\u0002\u0194\u0196",
    "\u0005\u0004\u0003\u0002\u0195\u0197\u0007\u00b2\u0002\u0002\u0196\u0195",
    "\u0003\u0002\u0002\u0002\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u0198",
    "\u0003\u0002\u0002\u0002\u0198\u0199\u0007\u0002\u0002\u0003\u0199\u0003",
    "\u0003\u0002\u0002\u0002\u019a\u019f\u0005\u0006\u0004\u0002\u019b\u019f",
    "\u0005\b\u0005\u0002\u019c\u019f\u0005\n\u0006\u0002\u019d\u019f\u0005",
    "\f\u0007\u0002\u019e\u019a\u0003\u0002\u0002\u0002\u019e\u019b\u0003",
    "\u0002\u0002\u0002\u019e\u019c\u0003\u0002\u0002\u0002\u019e\u019d\u0003",
    "\u0002\u0002\u0002\u019f\u0005\u0003\u0002\u0002\u0002\u01a0\u01a1\u0005",
    "\u0122\u0092\u0002\u01a1\u0007\u0003\u0002\u0002\u0002\u01a2\u01a3\u0005",
    "\u0192\u00ca\u0002\u01a3\t\u0003\u0002\u0002\u0002\u01a4\u01a7\u0005",
    "\u000e\b\u0002\u01a5\u01a7\u0005:\u001e\u0002\u01a6\u01a4\u0003\u0002",
    "\u0002\u0002\u01a6\u01a5\u0003\u0002\u0002\u0002\u01a7\u000b\u0003\u0002",
    "\u0002\u0002\u01a8\u01aa\u0007\f\u0002\u0002\u01a9\u01ab\u00073\u0002",
    "\u0002\u01aa\u01a9\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002",
    "\u0002\u01ab\u01ac\u0003\u0002\u0002\u0002\u01ac\u01ad\u0007T\u0002",
    "\u0002\u01ad\u01ae\u0005<\u001f\u0002\u01ae\u01af\u0007&\u0002\u0002",
    "\u01af\u01b1\u0005\u0136\u009c\u0002\u01b0\u01b2\u0005\u001a\u000e\u0002",
    "\u01b1\u01b0\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002",
    "\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b4\u0007\u00ba\u0002\u0002",
    "\u01b4\u01b5\u0005\u0188\u00c5\u0002\u01b5\u01b7\u0007\u00bb\u0002\u0002",
    "\u01b6\u01b8\u0005\u0016\f\u0002\u01b7\u01b6\u0003\u0002\u0002\u0002",
    "\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\r\u0003\u0002\u0002\u0002",
    "\u01b9\u01ba\u0007\f\u0002\u0002\u01ba\u01bb\u0007K\u0002\u0002\u01bb",
    "\u01bc\u0007.\u0002\u0002\u01bc\u01bd\u0005\u0136\u009c\u0002\u01bd",
    "\u01be\u0005\u0010\t\u0002\u01be\u01bf\u00074\u0002\u0002\u01bf\u01c1",
    "\u0005<\u001f\u0002\u01c0\u01c2\u0005\u0016\f\u0002\u01c1\u01c0\u0003",
    "\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c4\u0003",
    "\u0002\u0002\u0002\u01c3\u01c5\u0005 \u0011\u0002\u01c4\u01c3\u0003",
    "\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5\u01c6\u0003",
    "\u0002\u0002\u0002\u01c6\u01c7\u0007\\\u0002\u0002\u01c7\u01c8\u0007",
    "\u00cb\u0002\u0002\u01c8\u01ec\u0003\u0002\u0002\u0002\u01c9\u01ca\u0007",
    "\f\u0002\u0002\u01ca\u01cb\u0007.\u0002\u0002\u01cb\u01cc\u0005\u0136",
    "\u009c\u0002\u01cc\u01cf\u0005\u0010\t\u0002\u01cd\u01ce\u00074\u0002",
    "\u0002\u01ce\u01d0\u0005<\u001f\u0002\u01cf\u01cd\u0003\u0002\u0002",
    "\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d2\u0003\u0002\u0002",
    "\u0002\u01d1\u01d3\u0005\u0016\f\u0002\u01d2\u01d1\u0003\u0002\u0002",
    "\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d5\u0003\u0002\u0002",
    "\u0002\u01d4\u01d6\u0005 \u0011\u0002\u01d5\u01d4\u0003\u0002\u0002",
    "\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6\u01d9\u0003\u0002\u0002",
    "\u0002\u01d7\u01d8\u0007\u0003\u0002\u0002\u01d8\u01da\u0005\u0122\u0092",
    "\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002",
    "\u0002\u01da\u01ec\u0003\u0002\u0002\u0002\u01db\u01dc\u0007\f\u0002",
    "\u0002\u01dc\u01dd\u0007.\u0002\u0002\u01dd\u01e0\u0005\u0136\u009c",
    "\u0002\u01de\u01df\u00074\u0002\u0002\u01df\u01e1\u0005<\u001f\u0002",
    "\u01e0\u01de\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002",
    "\u01e1\u01e3\u0003\u0002\u0002\u0002\u01e2\u01e4\u0005\u0016\f\u0002",
    "\u01e3\u01e2\u0003\u0002\u0002\u0002\u01e3\u01e4\u0003\u0002\u0002\u0002",
    "\u01e4\u01e6\u0003\u0002\u0002\u0002\u01e5\u01e7\u0005 \u0011\u0002",
    "\u01e6\u01e5\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002",
    "\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u01e9\u0007\u0003\u0002\u0002",
    "\u01e9\u01ea\u0005\u0122\u0092\u0002\u01ea\u01ec\u0003\u0002\u0002\u0002",
    "\u01eb\u01b9\u0003\u0002\u0002\u0002\u01eb\u01c9\u0003\u0002\u0002\u0002",
    "\u01eb\u01db\u0003\u0002\u0002\u0002\u01ec\u000f\u0003\u0002\u0002\u0002",
    "\u01ed\u01ee\u0007\u00ba\u0002\u0002\u01ee\u01f3\u0005\u0012\n\u0002",
    "\u01ef\u01f0\u0007\u00b3\u0002\u0002\u01f0\u01f2\u0005\u0012\n\u0002",
    "\u01f1\u01ef\u0003\u0002\u0002\u0002\u01f2\u01f5\u0003\u0002\u0002\u0002",
    "\u01f3\u01f1\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002",
    "\u01f4\u01f6\u0003\u0002\u0002\u0002\u01f5\u01f3\u0003\u0002\u0002\u0002",
    "\u01f6\u01f7\u0007\u00bb\u0002\u0002\u01f7\u0011\u0003\u0002\u0002\u0002",
    "\u01f8\u01f9\u0005<\u001f\u0002\u01f9\u01fa\u0005\u0014\u000b\u0002",
    "\u01fa\u0013\u0003\u0002\u0002\u0002\u01fb\u01fc\u0005N(\u0002\u01fc",
    "\u0015\u0003\u0002\u0002\u0002\u01fd\u01fe\u00077\u0002\u0002\u01fe",
    "\u01ff\u0007\u00ba\u0002\u0002\u01ff\u0204\u0005\u0018\r\u0002\u0200",
    "\u0201\u0007\u00b3\u0002\u0002\u0201\u0203\u0005\u0018\r\u0002\u0202",
    "\u0200\u0003\u0002\u0002\u0002\u0203\u0206\u0003\u0002\u0002\u0002\u0204",
    "\u0202\u0003\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002\u0002\u0205",
    "\u0207\u0003\u0002\u0002\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0207",
    "\u0208\u0007\u00bb\u0002\u0002\u0208\u0017\u0003\u0002\u0002\u0002\u0209",
    "\u020a\u0007\u00cb\u0002\u0002\u020a\u020b\u0007\u00b0\u0002\u0002\u020b",
    "\u020c\u0005\u00a0Q\u0002\u020c\u0019\u0003\u0002\u0002\u0002\u020d",
    "\u020e\u00074\u0002\u0002\u020e\u020f\u0005<\u001f\u0002\u020f\u001b",
    "\u0003\u0002\u0002\u0002\u0210\u0211\u0007x\u0002\u0002\u0211\u0212",
    "\u0005\u001e\u0010\u0002\u0212\u001d\u0003\u0002\u0002\u0002\u0213\u0214",
    "\u0005<\u001f\u0002\u0214\u001f\u0003\u0002\u0002\u0002\u0215\u021a",
    "\u0005\"\u0012\u0002\u0216\u021a\u0005(\u0015\u0002\u0217\u021a\u0005",
    "0\u0019\u0002\u0218\u021a\u00056\u001c\u0002\u0219\u0215\u0003\u0002",
    "\u0002\u0002\u0219\u0216\u0003\u0002\u0002\u0002\u0219\u0217\u0003\u0002",
    "\u0002\u0002\u0219\u0218\u0003\u0002\u0002\u0002\u021a!\u0003\u0002",
    "\u0002\u0002\u021b\u021c\u0007h\u0002\u0002\u021c\u021d\u0007:\u0002",
    "\u0002\u021d\u021e\u0007m\u0002\u0002\u021e\u021f\u0007\u00ba\u0002",
    "\u0002\u021f\u0220\u0005\u0148\u00a5\u0002\u0220\u0221\u0007\u00bb\u0002",
    "\u0002\u0221\u0222\u0007\u00ba\u0002\u0002\u0222\u0223\u0005$\u0013",
    "\u0002\u0223\u0224\u0007\u00bb\u0002\u0002\u0224#\u0003\u0002\u0002",
    "\u0002\u0225\u022a\u0005&\u0014\u0002\u0226\u0227\u0007\u00b3\u0002",
    "\u0002\u0227\u0229\u0005&\u0014\u0002\u0228\u0226\u0003\u0002\u0002",
    "\u0002\u0229\u022c\u0003\u0002\u0002\u0002\u022a\u0228\u0003\u0002\u0002",
    "\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b%\u0003\u0002\u0002",
    "\u0002\u022c\u022a\u0003\u0002\u0002\u0002\u022d\u022e\u0007h\u0002",
    "\u0002\u022e\u022f\u00058\u001d\u0002\u022f\u0230\u0007\u0080\u0002",
    "\u0002\u0230\u0231\u0007Z\u0002\u0002\u0231\u023d\u0007y\u0002\u0002",
    "\u0232\u0233\u0007\u00ba\u0002\u0002\u0233\u0234\u0005\u009cO\u0002",
    "\u0234\u0235\u0007\u00bb\u0002\u0002\u0235\u023e\u0003\u0002\u0002\u0002",
    "\u0236\u0238\u0007\u00ba\u0002\u0002\u0237\u0236\u0003\u0002\u0002\u0002",
    "\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002",
    "\u0239\u023b\u0007^\u0002\u0002\u023a\u023c\u0007\u00bb\u0002\u0002",
    "\u023b\u023a\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002",
    "\u023c\u023e\u0003\u0002\u0002\u0002\u023d\u0232\u0003\u0002\u0002\u0002",
    "\u023d\u0237\u0003\u0002\u0002\u0002\u023e\'\u0003\u0002\u0002\u0002",
    "\u023f\u0240\u0007h\u0002\u0002\u0240\u0241\u0007:\u0002\u0002\u0241",
    "\u0242\u0007R\u0002\u0002\u0242\u0243\u0007\u00ba\u0002\u0002\u0243",
    "\u0244\u0005\u0148\u00a5\u0002\u0244\u024a\u0007\u00bb\u0002\u0002\u0245",
    "\u0246\u0007\u00ba\u0002\u0002\u0246\u0247\u0005*\u0016\u0002\u0247",
    "\u0248\u0007\u00bb\u0002\u0002\u0248\u024b\u0003\u0002\u0002\u0002\u0249",
    "\u024b\u0005.\u0018\u0002\u024a\u0245\u0003\u0002\u0002\u0002\u024a",
    "\u0249\u0003\u0002\u0002\u0002\u024b)\u0003\u0002\u0002\u0002\u024c",
    "\u0251\u0005,\u0017\u0002\u024d\u024e\u0007\u00b3\u0002\u0002\u024e",
    "\u0250\u0005,\u0017\u0002\u024f\u024d\u0003\u0002\u0002\u0002\u0250",
    "\u0253\u0003\u0002\u0002\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0251",
    "\u0252\u0003\u0002\u0002\u0002\u0252+\u0003\u0002\u0002\u0002\u0253",
    "\u0251\u0003\u0002\u0002\u0002\u0254\u0255\u0007h\u0002\u0002\u0255",
    "\u0256\u00058\u001d\u0002\u0256-\u0003\u0002\u0002\u0002\u0257\u0258",
    "\u0007i\u0002\u0002\u0258\u0259\u0005\u00a0Q\u0002\u0259/\u0003\u0002",
    "\u0002\u0002\u025a\u025b\u0007h\u0002\u0002\u025b\u025c\u0007:\u0002",
    "\u0002\u025c\u025d\u0007[\u0002\u0002\u025d\u025e\u0007\u00ba\u0002",
    "\u0002\u025e\u025f\u0005\u0148\u00a5\u0002\u025f\u0260\u0007\u00bb\u0002",
    "\u0002\u0260\u0261\u0007\u00ba\u0002\u0002\u0261\u0262\u00052\u001a",
    "\u0002\u0262\u0263\u0007\u00bb\u0002\u0002\u02631\u0003\u0002\u0002",
    "\u0002\u0264\u0269\u00054\u001b\u0002\u0265\u0266\u0007\u00b3\u0002",
    "\u0002\u0266\u0268\u00054\u001b\u0002\u0267\u0265\u0003\u0002\u0002",
    "\u0002\u0268\u026b\u0003\u0002\u0002\u0002\u0269\u0267\u0003\u0002\u0002",
    "\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a3\u0003\u0002\u0002",
    "\u0002\u026b\u0269\u0003\u0002\u0002\u0002\u026c\u026d\u0007h\u0002",
    "\u0002\u026d\u026e\u00058\u001d\u0002\u026e\u0270\u0007\u0080\u0002",
    "\u0002\u026f\u0271\u0007\u0019\u0002\u0002\u0270\u026f\u0003\u0002\u0002",
    "\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0272\u0003\u0002\u0002",
    "\u0002\u0272\u0273\u0007\u00ba\u0002\u0002\u0273\u0274\u0005\u0160\u00b1",
    "\u0002\u0274\u0275\u0007\u00bb\u0002\u0002\u02755\u0003\u0002\u0002",
    "\u0002\u0276\u0277\u0007h\u0002\u0002\u0277\u0278\u0007:\u0002\u0002",
    "\u0278\u0279\u0007?\u0002\u0002\u0279\u027a\u0005\u0010\t\u0002\u027a",
    "7\u0003\u0002\u0002\u0002\u027b\u027c\u0005<\u001f\u0002\u027c9\u0003",
    "\u0002\u0002\u0002\u027d\u027e\u0007G\u0002\u0002\u027e\u027f\u0007",
    ".\u0002\u0002\u027f\u0281\u0005\u0136\u009c\u0002\u0280\u0282\u0007",
    "k\u0002\u0002\u0281\u0280\u0003\u0002\u0002\u0002\u0281\u0282\u0003",
    "\u0002\u0002\u0002\u0282;\u0003\u0002\u0002\u0002\u0283\u0286\u0007",
    "\u00ca\u0002\u0002\u0284\u0286\u0005> \u0002\u0285\u0283\u0003\u0002",
    "\u0002\u0002\u0285\u0284\u0003\u0002\u0002\u0002\u0286=\u0003\u0002",
    "\u0002\u0002\u0287\u0288\t\u0002\u0002\u0002\u0288?\u0003\u0002\u0002",
    "\u0002\u0289\u028c\u0005t;\u0002\u028a\u028c\u0005B\"\u0002\u028b\u0289",
    "\u0003\u0002\u0002\u0002\u028b\u028a\u0003\u0002\u0002\u0002\u028cA",
    "\u0003\u0002\u0002\u0002\u028d\u0291\u0007\u00cb\u0002\u0002\u028e\u0291",
    "\u0005D#\u0002\u028f\u0291\u0005L\'\u0002\u0290\u028d\u0003\u0002\u0002",
    "\u0002\u0290\u028e\u0003\u0002\u0002\u0002\u0290\u028f\u0003\u0002\u0002",
    "\u0002\u0291C\u0003\u0002\u0002\u0002\u0292\u0296\u0005H%\u0002\u0293",
    "\u0296\u0005F$\u0002\u0294\u0296\u0005J&\u0002\u0295\u0292\u0003\u0002",
    "\u0002\u0002\u0295\u0293\u0003\u0002\u0002\u0002\u0295\u0294\u0003\u0002",
    "\u0002\u0002\u0296E\u0003\u0002\u0002\u0002\u0297\u0298\u0007\u00a0",
    "\u0002\u0002\u0298\u0299\u0007\u00cb\u0002\u0002\u0299G\u0003\u0002",
    "\u0002\u0002\u029a\u029b\u0007\u00a2\u0002\u0002\u029b\u029c\u0007\u00cb",
    "\u0002\u0002\u029cI\u0003\u0002\u0002\u0002\u029d\u029e\u0007\u009f",
    "\u0002\u0002\u029e\u029f\u0007\u00cb\u0002\u0002\u029fK\u0003\u0002",
    "\u0002\u0002\u02a0\u02a1\t\u0003\u0002\u0002\u02a1M\u0003\u0002\u0002",
    "\u0002\u02a2\u02a3\u0005P)\u0002\u02a3O\u0003\u0002\u0002\u0002\u02a4",
    "\u02ae\u0005T+\u0002\u02a5\u02ae\u0005X-\u0002\u02a6\u02ae\u0005Z.\u0002",
    "\u02a7\u02ae\u0005\\/\u0002\u02a8\u02ae\u0005d3\u0002\u02a9\u02ae\u0005",
    "f4\u0002\u02aa\u02ae\u0005h5\u0002\u02ab\u02ae\u0005j6\u0002\u02ac\u02ae",
    "\u0005R*\u0002\u02ad\u02a4\u0003\u0002\u0002\u0002\u02ad\u02a5\u0003",
    "\u0002\u0002\u0002\u02ad\u02a6\u0003\u0002\u0002\u0002\u02ad\u02a7\u0003",
    "\u0002\u0002\u0002\u02ad\u02a8\u0003\u0002\u0002\u0002\u02ad\u02a9\u0003",
    "\u0002\u0002\u0002\u02ad\u02aa\u0003\u0002\u0002\u0002\u02ad\u02ab\u0003",
    "\u0002\u0002\u0002\u02ad\u02ac\u0003\u0002\u0002\u0002\u02aeQ\u0003",
    "\u0002\u0002\u0002\u02af\u02b0\u0007\u00a9\u0002\u0002\u02b0S\u0003",
    "\u0002\u0002\u0002\u02b1\u02b3\u0007<\u0002\u0002\u02b2\u02b4\u0005",
    "V,\u0002\u02b3\u02b2\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002",
    "\u0002\u0002\u02b4\u02c9\u0003\u0002\u0002\u0002\u02b5\u02b7\u0007\u009b",
    "\u0002\u0002\u02b6\u02b8\u0005V,\u0002\u02b7\u02b6\u0003\u0002\u0002",
    "\u0002\u02b7\u02b8\u0003\u0002\u0002\u0002\u02b8\u02c9\u0003\u0002\u0002",
    "\u0002\u02b9\u02ba\u0007<\u0002\u0002\u02ba\u02bc\u0007\u0083\u0002",
    "\u0002\u02bb\u02bd\u0005V,\u0002\u02bc\u02bb\u0003\u0002\u0002\u0002",
    "\u02bc\u02bd\u0003\u0002\u0002\u0002\u02bd\u02c9\u0003\u0002\u0002\u0002",
    "\u02be\u02bf\u0007\u009b\u0002\u0002\u02bf\u02c1\u0007\u0083\u0002\u0002",
    "\u02c0\u02c2\u0005V,\u0002\u02c1\u02c0\u0003\u0002\u0002\u0002\u02c1",
    "\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c9\u0003\u0002\u0002\u0002\u02c3",
    "\u02c5\u0007\u009c\u0002\u0002\u02c4\u02c6\u0005V,\u0002\u02c5\u02c4",
    "\u0003\u0002\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c9",
    "\u0003\u0002\u0002\u0002\u02c7\u02c9\u0007\u00a4\u0002\u0002\u02c8\u02b1",
    "\u0003\u0002\u0002\u0002\u02c8\u02b5\u0003\u0002\u0002\u0002\u02c8\u02b9",
    "\u0003\u0002\u0002\u0002\u02c8\u02be\u0003\u0002\u0002\u0002\u02c8\u02c3",
    "\u0003\u0002\u0002\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002\u02c9U",
    "\u0003\u0002\u0002\u0002\u02ca\u02cb\u0007\u00ba\u0002\u0002\u02cb\u02cc",
    "\u0007\u00c6\u0002\u0002\u02cc\u02cd\u0007\u00bb\u0002\u0002\u02cdW",
    "\u0003\u0002\u0002\u0002\u02ce\u02cf\u0007e\u0002\u0002\u02cf\u02d1",
    "\u0007<\u0002\u0002\u02d0\u02d2\u0005V,\u0002\u02d1\u02d0\u0003\u0002",
    "\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2\u02f2\u0003\u0002",
    "\u0002\u0002\u02d3\u02d4\u0007e\u0002\u0002\u02d4\u02d6\u0007\u009b",
    "\u0002\u0002\u02d5\u02d7\u0005V,\u0002\u02d6\u02d5\u0003\u0002\u0002",
    "\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002\u02d7\u02f2\u0003\u0002\u0002",
    "\u0002\u02d8\u02da\u0007\u009d\u0002\u0002\u02d9\u02db\u0005V,\u0002",
    "\u02da\u02d9\u0003\u0002\u0002\u0002\u02da\u02db\u0003\u0002\u0002\u0002",
    "\u02db\u02f2\u0003\u0002\u0002\u0002\u02dc\u02dd\u0007e\u0002\u0002",
    "\u02dd\u02de\u0007<\u0002\u0002\u02de\u02e0\u0007\u0083\u0002\u0002",
    "\u02df\u02e1\u0005V,\u0002\u02e0\u02df\u0003\u0002\u0002\u0002\u02e0",
    "\u02e1\u0003\u0002\u0002\u0002\u02e1\u02f2\u0003\u0002\u0002\u0002\u02e2",
    "\u02e3\u0007e\u0002\u0002\u02e3\u02e4\u0007\u009b\u0002\u0002\u02e4",
    "\u02e6\u0007\u0083\u0002\u0002\u02e5\u02e7\u0005V,\u0002\u02e6\u02e5",
    "\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7\u02f2",
    "\u0003\u0002\u0002\u0002\u02e8\u02e9\u0007\u009d\u0002\u0002\u02e9\u02eb",
    "\u0007\u0083\u0002\u0002\u02ea\u02ec\u0005V,\u0002\u02eb\u02ea\u0003",
    "\u0002\u0002\u0002\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02f2\u0003",
    "\u0002\u0002\u0002\u02ed\u02ef\u0007\u009e\u0002\u0002\u02ee\u02f0\u0005",
    "V,\u0002\u02ef\u02ee\u0003\u0002\u0002\u0002\u02ef\u02f0\u0003\u0002",
    "\u0002\u0002\u02f0\u02f2\u0003\u0002\u0002\u0002\u02f1\u02ce\u0003\u0002",
    "\u0002\u0002\u02f1\u02d3\u0003\u0002\u0002\u0002\u02f1\u02d8\u0003\u0002",
    "\u0002\u0002\u02f1\u02dc\u0003\u0002\u0002\u0002\u02f1\u02e2\u0003\u0002",
    "\u0002\u0002\u02f1\u02e8\u0003\u0002\u0002\u0002\u02f1\u02ed\u0003\u0002",
    "\u0002\u0002\u02f2Y\u0003\u0002\u0002\u0002\u02f3\u02f5\u0007\u00a7",
    "\u0002\u0002\u02f4\u02f6\u0005V,\u0002\u02f5\u02f4\u0003\u0002\u0002",
    "\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u02fc\u0003\u0002\u0002",
    "\u0002\u02f7\u02f9\u0007\u00a8\u0002\u0002\u02f8\u02fa\u0005V,\u0002",
    "\u02f9\u02f8\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002",
    "\u02fa\u02fc\u0003\u0002\u0002\u0002\u02fb\u02f3\u0003\u0002\u0002\u0002",
    "\u02fb\u02f7\u0003\u0002\u0002\u0002\u02fc[\u0003\u0002\u0002\u0002",
    "\u02fd\u0300\u0005^0\u0002\u02fe\u0300\u0005`1\u0002\u02ff\u02fd\u0003",
    "\u0002\u0002\u0002\u02ff\u02fe\u0003\u0002\u0002\u0002\u0300]\u0003",
    "\u0002\u0002\u0002\u0301\u0303\u0007\u0099\u0002\u0002\u0302\u0304\u0005",
    "b2\u0002\u0303\u0302\u0003\u0002\u0002\u0002\u0303\u0304\u0003\u0002",
    "\u0002\u0002\u0304\u0317\u0003\u0002\u0002\u0002\u0305\u0307\u0007\u009a",
    "\u0002\u0002\u0306\u0308\u0005b2\u0002\u0307\u0306\u0003\u0002\u0002",
    "\u0002\u0307\u0308\u0003\u0002\u0002\u0002\u0308\u0317\u0003\u0002\u0002",
    "\u0002\u0309\u030b\u0007C\u0002\u0002\u030a\u030c\u0005b2\u0002\u030b",
    "\u030a\u0003\u0002\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030c",
    "\u0317\u0003\u0002\u0002\u0002\u030d\u0317\u0007\u008b\u0002\u0002\u030e",
    "\u0317\u0007\u008f\u0002\u0002\u030f\u0317\u0007\u008c\u0002\u0002\u0310",
    "\u0317\u0007\u0090\u0002\u0002\u0311\u0317\u0007\u008d\u0002\u0002\u0312",
    "\u0317\u0007\u0091\u0002\u0002\u0313\u0317\u0007\u0092\u0002\u0002\u0314",
    "\u0317\u0007\u008e\u0002\u0002\u0315\u0317\u0007\u0093\u0002\u0002\u0316",
    "\u0301\u0003\u0002\u0002\u0002\u0316\u0305\u0003\u0002\u0002\u0002\u0316",
    "\u0309\u0003\u0002\u0002\u0002\u0316\u030d\u0003\u0002\u0002\u0002\u0316",
    "\u030e\u0003\u0002\u0002\u0002\u0316\u030f\u0003\u0002\u0002\u0002\u0316",
    "\u0310\u0003\u0002\u0002\u0002\u0316\u0311\u0003\u0002\u0002\u0002\u0316",
    "\u0312\u0003\u0002\u0002\u0002\u0316\u0313\u0003\u0002\u0002\u0002\u0316",
    "\u0314\u0003\u0002\u0002\u0002\u0316\u0315\u0003\u0002\u0002\u0002\u0317",
    "_\u0003\u0002\u0002\u0002\u0318\u031a\u0007\u0097\u0002\u0002\u0319",
    "\u031b\u0005b2\u0002\u031a\u0319\u0003\u0002\u0002\u0002\u031a\u031b",
    "\u0003\u0002\u0002\u0002\u031b\u0323\u0003\u0002\u0002\u0002\u031c\u0323",
    "\u0007\u0094\u0002\u0002\u031d\u0323\u0007\u0096\u0002\u0002\u031e\u0323",
    "\u0007\u0095\u0002\u0002\u031f\u0323\u0007\u0098\u0002\u0002\u0320\u0321",
    "\u0007\u0098\u0002\u0002\u0321\u0323\u0007j\u0002\u0002\u0322\u0318",
    "\u0003\u0002\u0002\u0002\u0322\u031c\u0003\u0002\u0002\u0002\u0322\u031d",
    "\u0003\u0002\u0002\u0002\u0322\u031e\u0003\u0002\u0002\u0002\u0322\u031f",
    "\u0003\u0002\u0002\u0002\u0322\u0320\u0003\u0002\u0002\u0002\u0323a",
    "\u0003\u0002\u0002\u0002\u0324\u0325\u0007\u00ba\u0002\u0002\u0325\u0326",
    "\u0007\u00c6\u0002\u0002\u0326\u032d\u0007\u00bb\u0002\u0002\u0327\u0328",
    "\u0007\u00ba\u0002\u0002\u0328\u0329\u0007\u00c6\u0002\u0002\u0329\u032a",
    "\u0007\u00b3\u0002\u0002\u032a\u032b\u0007\u00c6\u0002\u0002\u032b\u032d",
    "\u0007\u00bb\u0002\u0002\u032c\u0324\u0003\u0002\u0002\u0002\u032c\u0327",
    "\u0003\u0002\u0002\u0002\u032dc\u0003\u0002\u0002\u0002\u032e\u032f",
    "\t\u0004\u0002\u0002\u032fe\u0003\u0002\u0002\u0002\u0330\u033e\u0007",
    "\u009f\u0002\u0002\u0331\u033e\u0007\u00a0\u0002\u0002\u0332\u0333\u0007",
    "\u00a0\u0002\u0002\u0333\u0334\u00077\u0002\u0002\u0334\u0335\u0007",
    "\u00a0\u0002\u0002\u0335\u033e\u0007\u0086\u0002\u0002\u0336\u033e\u0007",
    "\u00a1\u0002\u0002\u0337\u033e\u0007\u00a2\u0002\u0002\u0338\u0339\u0007",
    "\u00a2\u0002\u0002\u0339\u033a\u00077\u0002\u0002\u033a\u033b\u0007",
    "\u00a0\u0002\u0002\u033b\u033e\u0007\u0086\u0002\u0002\u033c\u033e\u0007",
    "\u00a3\u0002\u0002\u033d\u0330\u0003\u0002\u0002\u0002\u033d\u0331\u0003",
    "\u0002\u0002\u0002\u033d\u0332\u0003\u0002\u0002\u0002\u033d\u0336\u0003",
    "\u0002\u0002\u0002\u033d\u0337\u0003\u0002\u0002\u0002\u033d\u0338\u0003",
    "\u0002\u0002\u0002\u033d\u033c\u0003\u0002\u0002\u0002\u033eg\u0003",
    "\u0002\u0002\u0002\u033f\u0341\u0007\u0089\u0002\u0002\u0340\u0342\u0005",
    "V,\u0002\u0341\u0340\u0003\u0002\u0002\u0002\u0341\u0342\u0003\u0002",
    "\u0002\u0002\u0342\u034d\u0003\u0002\u0002\u0002\u0343\u0345\u0007\u008a",
    "\u0002\u0002\u0344\u0346\u0005V,\u0002\u0345\u0344\u0003\u0002\u0002",
    "\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u034d\u0003\u0002\u0002",
    "\u0002\u0347\u0348\u0007\u0089\u0002\u0002\u0348\u034a\u0007\u0083\u0002",
    "\u0002\u0349\u034b\u0005V,\u0002\u034a\u0349\u0003\u0002\u0002\u0002",
    "\u034a\u034b\u0003\u0002\u0002\u0002\u034b\u034d\u0003\u0002\u0002\u0002",
    "\u034c\u033f\u0003\u0002\u0002\u0002\u034c\u0343\u0003\u0002\u0002\u0002",
    "\u034c\u0347\u0003\u0002\u0002\u0002\u034di\u0003\u0002\u0002\u0002",
    "\u034e\u0350\u0007\u00a5\u0002\u0002\u034f\u0351\u0005V,\u0002\u0350",
    "\u034f\u0003\u0002\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002\u0351",
    "\u035c\u0003\u0002\u0002\u0002\u0352\u0353\u0007\u00a5\u0002\u0002\u0353",
    "\u0355\u0007\u0083\u0002\u0002\u0354\u0356\u0005V,\u0002\u0355\u0354",
    "\u0003\u0002\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356\u035c",
    "\u0003\u0002\u0002\u0002\u0357\u0359\u0007\u00a6\u0002\u0002\u0358\u035a",
    "\u0005V,\u0002\u0359\u0358\u0003\u0002\u0002\u0002\u0359\u035a\u0003",
    "\u0002\u0002\u0002\u035a\u035c\u0003\u0002\u0002\u0002\u035b\u034e\u0003",
    "\u0002\u0002\u0002\u035b\u0352\u0003\u0002\u0002\u0002\u035b\u0357\u0003",
    "\u0002\u0002\u0002\u035ck\u0003\u0002\u0002\u0002\u035d\u0360\u0005",
    "n8\u0002\u035e\u0360\u0005p9\u0002\u035f\u035d\u0003\u0002\u0002\u0002",
    "\u035f\u035e\u0003\u0002\u0002\u0002\u0360m\u0003\u0002\u0002\u0002",
    "\u0361\u0362\u0007\u00ba\u0002\u0002\u0362\u0363\u0005\u009cO\u0002",
    "\u0363\u0364\u0007\u00bb\u0002\u0002\u0364o\u0003\u0002\u0002\u0002",
    "\u0365\u036d\u0005r:\u0002\u0366\u036d\u0005\u0144\u00a3\u0002\u0367",
    "\u036d\u0005x=\u0002\u0368\u036d\u0005\u014a\u00a6\u0002\u0369\u036d",
    "\u0005\u0084C\u0002\u036a\u036d\u0005\u0096L\u0002\u036b\u036d\u0005",
    "\u017e\u00c0\u0002\u036c\u0365\u0003\u0002\u0002\u0002\u036c\u0366\u0003",
    "\u0002\u0002\u0002\u036c\u0367\u0003\u0002\u0002\u0002\u036c\u0368\u0003",
    "\u0002\u0002\u0002\u036c\u0369\u0003\u0002\u0002\u0002\u036c\u036a\u0003",
    "\u0002\u0002\u0002\u036c\u036b\u0003\u0002\u0002\u0002\u036dq\u0003",
    "\u0002\u0002\u0002\u036e\u036f\u0005@!\u0002\u036fs\u0003\u0002\u0002",
    "\u0002\u0370\u0371\t\u0005\u0002\u0002\u0371u\u0003\u0002\u0002\u0002",
    "\u0372\u0374\u0005\u00aaV\u0002\u0373\u0372\u0003\u0002\u0002\u0002",
    "\u0373\u0374\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002\u0002\u0002",
    "\u0375\u0376\u0005t;\u0002\u0376w\u0003\u0002\u0002\u0002\u0377\u0378",
    "\u0005z>\u0002\u0378y\u0003\u0002\u0002\u0002\u0379\u037a\u0007@\u0002",
    "\u0002\u037a\u037b\u0007\u00ba\u0002\u0002\u037b\u037c\u0007\u00be\u0002",
    "\u0002\u037c\u0382\u0007\u00bb\u0002\u0002\u037d\u037f\u0005|?\u0002",
    "\u037e\u0380\u0005\u0080A\u0002\u037f\u037e\u0003\u0002\u0002\u0002",
    "\u037f\u0380\u0003\u0002\u0002\u0002\u0380\u0382\u0003\u0002\u0002\u0002",
    "\u0381\u0379\u0003\u0002\u0002\u0002\u0381\u037d\u0003\u0002\u0002\u0002",
    "\u0382{\u0003\u0002\u0002\u0002\u0383\u0384\u0005~@\u0002\u0384\u0386",
    "\u0007\u00ba\u0002\u0002\u0385\u0387\u0005\u0142\u00a2\u0002\u0386\u0385",
    "\u0003\u0002\u0002\u0002\u0386\u0387\u0003\u0002\u0002\u0002\u0387\u0388",
    "\u0003\u0002\u0002\u0002\u0388\u0389\u0005\u009cO\u0002\u0389\u038a",
    "\u0007\u00bb\u0002\u0002\u038a}\u0003\u0002\u0002\u0002\u038b\u038c",
    "\t\u0006\u0002\u0002\u038c\u007f\u0003\u0002\u0002\u0002\u038d\u038e",
    "\u0007M\u0002\u0002\u038e\u038f\u0007\u00ba\u0002\u0002\u038f\u0390",
    "\u00076\u0002\u0002\u0390\u0391\u0005\u010c\u0087\u0002\u0391\u0392",
    "\u0007\u00bb\u0002\u0002\u0392\u0081\u0003\u0002\u0002\u0002\u0393\u0394",
    "\u0007Q\u0002\u0002\u0394\u0395\u0007\u00ba\u0002\u0002\u0395\u0396",
    "\u0005\u0148\u00a5\u0002\u0396\u0397\u0007\u00bb\u0002\u0002\u0397\u0083",
    "\u0003\u0002\u0002\u0002\u0398\u0399\u0005\u0088E\u0002\u0399\u0085",
    "\u0003\u0002\u0002\u0002\u039a\u039b\u0007f\u0002\u0002\u039b\u039c",
    "\u0007\u00ba\u0002\u0002\u039c\u039d\u0005\u00a0Q\u0002\u039d\u039e",
    "\u0007\u00b3\u0002\u0002\u039e\u039f\u0005\u00c6d\u0002\u039f\u03a0",
    "\u0007\u00bb\u0002\u0002\u03a0\u03ad\u0003\u0002\u0002\u0002\u03a1\u03a2",
    "\u0007>\u0002\u0002\u03a2\u03a3\u0007\u00ba\u0002\u0002\u03a3\u03a6",
    "\u0005\u00a0Q\u0002\u03a4\u03a5\u0007\u00b3\u0002\u0002\u03a5\u03a7",
    "\u0005\u00c6d\u0002\u03a6\u03a4\u0003\u0002\u0002\u0002\u03a7\u03a8",
    "\u0003\u0002\u0002\u0002\u03a8\u03a6\u0003\u0002\u0002\u0002\u03a8\u03a9",
    "\u0003\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa\u03ab",
    "\u0007\u00bb\u0002\u0002\u03ab\u03ad\u0003\u0002\u0002\u0002\u03ac\u039a",
    "\u0003\u0002\u0002\u0002\u03ac\u03a1\u0003\u0002\u0002\u0002\u03ad\u0087",
    "\u0003\u0002\u0002\u0002\u03ae\u03b1\u0005\u008aF\u0002\u03af\u03b1",
    "\u0005\u008cG\u0002\u03b0\u03ae\u0003\u0002\u0002\u0002\u03b0\u03af",
    "\u0003\u0002\u0002\u0002\u03b1\u0089\u0003\u0002\u0002\u0002\u03b2\u03b3",
    "\u0007\n\u0002\u0002\u03b3\u03b5\u0005\u00c6d\u0002\u03b4\u03b6\u0005",
    "\u008eH\u0002\u03b5\u03b4\u0003\u0002\u0002\u0002\u03b6\u03b7\u0003",
    "\u0002\u0002\u0002\u03b7\u03b5\u0003\u0002\u0002\u0002\u03b7\u03b8\u0003",
    "\u0002\u0002\u0002\u03b8\u03ba\u0003\u0002\u0002\u0002\u03b9\u03bb\u0005",
    "\u0092J\u0002\u03ba\u03b9\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003",
    "\u0002\u0002\u0002\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03bd\u0007",
    "\u0010\u0002\u0002\u03bd\u008b\u0003\u0002\u0002\u0002\u03be\u03c0\u0007",
    "\n\u0002\u0002\u03bf\u03c1\u0005\u0090I\u0002\u03c0\u03bf\u0003\u0002",
    "\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002\u03c2\u03c0\u0003\u0002",
    "\u0002\u0002\u03c2\u03c3\u0003\u0002\u0002\u0002\u03c3\u03c5\u0003\u0002",
    "\u0002\u0002\u03c4\u03c6\u0005\u0092J\u0002\u03c5\u03c4\u0003\u0002",
    "\u0002\u0002\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002",
    "\u0002\u0002\u03c7\u03c8\u0007\u0010\u0002\u0002\u03c8\u008d\u0003\u0002",
    "\u0002\u0002\u03c9\u03ca\u00075\u0002\u0002\u03ca\u03cb\u0005\u010c",
    "\u0087\u0002\u03cb\u03cc\u0007/\u0002\u0002\u03cc\u03cd\u0005\u0094",
    "K\u0002\u03cd\u008f\u0003\u0002\u0002\u0002\u03ce\u03cf\u00075\u0002",
    "\u0002\u03cf\u03d0\u0005\u010c\u0087\u0002\u03d0\u03d1\u0007/\u0002",
    "\u0002\u03d1\u03d2\u0005\u0094K\u0002\u03d2\u0091\u0003\u0002\u0002",
    "\u0002\u03d3\u03d4\u0007\u0011\u0002\u0002\u03d4\u03d5\u0005\u0094K",
    "\u0002\u03d5\u0093\u0003\u0002\u0002\u0002\u03d6\u03d9\u0005\u009cO",
    "\u0002\u03d7\u03d9\u0007%\u0002\u0002\u03d8\u03d6\u0003\u0002\u0002",
    "\u0002\u03d8\u03d7\u0003\u0002\u0002\u0002\u03d9\u0095\u0003\u0002\u0002",
    "\u0002\u03da\u03db\u0007\u000b\u0002\u0002\u03db\u03dc\u0007\u00ba\u0002",
    "\u0002\u03dc\u03dd\u0005\u0098M\u0002\u03dd\u03de\u0007\u0003\u0002",
    "\u0002\u03de\u03df\u0005\u009aN\u0002\u03df\u03e0\u0007\u00bb\u0002",
    "\u0002\u03e0\u0097\u0003\u0002\u0002\u0002\u03e1\u03e2\u0005\u009cO",
    "\u0002\u03e2\u0099\u0003\u0002\u0002\u0002\u03e3\u03e4\u0005N(\u0002",
    "\u03e4\u009b\u0003\u0002\u0002\u0002\u03e5\u03e9\u0005\u009eP\u0002",
    "\u03e6\u03e9\u0005\u00dan\u0002\u03e7\u03e9\u0005\u00c6d\u0002\u03e8",
    "\u03e5\u0003\u0002\u0002\u0002\u03e8\u03e6\u0003\u0002\u0002\u0002\u03e8",
    "\u03e7\u0003\u0002\u0002\u0002\u03e9\u009d\u0003\u0002\u0002\u0002\u03ea",
    "\u03ee\u0005\u00a0Q\u0002\u03eb\u03ee\u0005\u00b6\\\u0002\u03ec\u03ee",
    "\u0007%\u0002\u0002\u03ed\u03ea\u0003\u0002\u0002\u0002\u03ed\u03eb",
    "\u0003\u0002\u0002\u0002\u03ed\u03ec\u0003\u0002\u0002\u0002\u03ee\u009f",
    "\u0003\u0002\u0002\u0002\u03ef\u03f4\u0005\u00a2R\u0002\u03f0\u03f1",
    "\t\u0007\u0002\u0002\u03f1\u03f3\u0005\u00a2R\u0002\u03f2\u03f0\u0003",
    "\u0002\u0002\u0002\u03f3\u03f6\u0003\u0002\u0002\u0002\u03f4\u03f2\u0003",
    "\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002\u0002\u03f5\u00a1\u0003",
    "\u0002\u0002\u0002\u03f6\u03f4\u0003\u0002\u0002\u0002\u03f7\u03fc\u0005",
    "\u00a4S\u0002\u03f8\u03f9\t\b\u0002\u0002\u03f9\u03fb\u0005\u00a4S\u0002",
    "\u03fa\u03f8\u0003\u0002\u0002\u0002\u03fb\u03fe\u0003\u0002\u0002\u0002",
    "\u03fc\u03fa\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002",
    "\u03fd\u00a3\u0003\u0002\u0002\u0002\u03fe\u03fc\u0003\u0002\u0002\u0002",
    "\u03ff\u0401\u0005\u00aaV\u0002\u0400\u03ff\u0003\u0002\u0002\u0002",
    "\u0400\u0401\u0003\u0002\u0002\u0002\u0401\u0402\u0003\u0002\u0002\u0002",
    "\u0402\u0403\u0005\u00a8U\u0002\u0403\u00a5\u0003\u0002\u0002\u0002",
    "\u0404\u0405\u0007\u00ba\u0002\u0002\u0405\u040a\u0005\u00a0Q\u0002",
    "\u0406\u0407\u0007\u00b3\u0002\u0002\u0407\u0409\u0005\u00a0Q\u0002",
    "\u0408\u0406\u0003\u0002\u0002\u0002\u0409\u040c\u0003\u0002\u0002\u0002",
    "\u040a\u0408\u0003\u0002\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002",
    "\u040b\u040d\u0003\u0002\u0002\u0002\u040c\u040a\u0003\u0002\u0002\u0002",
    "\u040d\u040e\u0007\u00bb\u0002\u0002\u040e\u00a7\u0003\u0002\u0002\u0002",
    "\u040f\u0414\u0005l7\u0002\u0410\u0411\u0007\u00ae\u0002\u0002\u0411",
    "\u0413\u0005\u009aN\u0002\u0412\u0410\u0003\u0002\u0002\u0002\u0413",
    "\u0416\u0003\u0002\u0002\u0002\u0414\u0412\u0003\u0002\u0002\u0002\u0414",
    "\u0415\u0003\u0002\u0002\u0002\u0415\u0419\u0003\u0002\u0002\u0002\u0416",
    "\u0414\u0003\u0002\u0002\u0002\u0417\u0419\u0005\u00acW\u0002\u0418",
    "\u040f\u0003\u0002\u0002\u0002\u0418\u0417\u0003\u0002\u0002\u0002\u0419",
    "\u00a9\u0003\u0002\u0002\u0002\u041a\u041b\t\u0007\u0002\u0002\u041b",
    "\u00ab\u0003\u0002\u0002\u0002\u041c\u041d\u0005\u00aeX\u0002\u041d",
    "\u00ad\u0003\u0002\u0002\u0002\u041e\u041f\u0007L\u0002\u0002\u041f",
    "\u0420\u0007\u00ba\u0002\u0002\u0420\u0421\u0005\u00b0Y\u0002\u0421",
    "\u0422\u0007\u0015\u0002\u0002\u0422\u0423\u0005\u00b4[\u0002\u0423",
    "\u0424\u0007\u00bb\u0002\u0002\u0424\u00af\u0003\u0002\u0002\u0002\u0425",
    "\u0429\u0005\u0178\u00bd\u0002\u0426\u0429\u0005\u00b2Z\u0002\u0427",
    "\u0429\u0005\u017c\u00bf\u0002\u0428\u0425\u0003\u0002\u0002\u0002\u0428",
    "\u0426\u0003\u0002\u0002\u0002\u0428\u0427\u0003\u0002\u0002\u0002\u0429",
    "\u00b1\u0003\u0002\u0002\u0002\u042a\u042b\t\t\u0002\u0002\u042b\u00b3",
    "\u0003\u0002\u0002\u0002\u042c\u042f\u0005\u0144\u00a3\u0002\u042d\u042f",
    "\u0005D#\u0002\u042e\u042c\u0003\u0002\u0002\u0002\u042e\u042d\u0003",
    "\u0002\u0002\u0002\u042f\u00b5\u0003\u0002\u0002\u0002\u0430\u0431\u0005",
    "\u00b8]\u0002\u0431\u00b7\u0003\u0002\u0002\u0002\u0432\u0437\u0005",
    "\u00ba^\u0002\u0433\u0434\u0007\u00b4\u0002\u0002\u0434\u0436\u0005",
    "\u00ba^\u0002\u0435\u0433\u0003\u0002\u0002\u0002\u0436\u0439\u0003",
    "\u0002\u0002\u0002\u0437\u0435\u0003\u0002\u0002\u0002\u0437\u0438\u0003",
    "\u0002\u0002\u0002\u0438\u00b9\u0003\u0002\u0002\u0002\u0439\u0437\u0003",
    "\u0002\u0002\u0002\u043a\u043b\u0005\u00bc_\u0002\u043b\u00bb\u0003",
    "\u0002\u0002\u0002\u043c\u043f\u0005l7\u0002\u043d\u043f\u0005\u00be",
    "`\u0002\u043e\u043c\u0003\u0002\u0002\u0002\u043e\u043d\u0003\u0002",
    "\u0002\u0002\u043f\u00bd\u0003\u0002\u0002\u0002\u0440\u0441\u0005\u00c0",
    "a\u0002\u0441\u00bf\u0003\u0002\u0002\u0002\u0442\u0443\u0007}\u0002",
    "\u0002\u0443\u0444\u0007\u00ba\u0002\u0002\u0444\u0445\u0005\u00c2b",
    "\u0002\u0445\u0446\u0007\u00bb\u0002\u0002\u0446\u00c1\u0003\u0002\u0002",
    "\u0002\u0447\u0449\u0005\u00c4c\u0002\u0448\u0447\u0003\u0002\u0002",
    "\u0002\u0448\u0449\u0003\u0002\u0002\u0002\u0449\u044b\u0003\u0002\u0002",
    "\u0002\u044a\u044c\u0005\u00b8]\u0002\u044b\u044a\u0003\u0002\u0002",
    "\u0002\u044b\u044c\u0003\u0002\u0002\u0002\u044c\u044d\u0003\u0002\u0002",
    "\u0002\u044d\u044f\u0007\u0015\u0002\u0002\u044e\u0448\u0003\u0002\u0002",
    "\u0002\u044e\u044f\u0003\u0002\u0002\u0002\u044f\u0450\u0003\u0002\u0002",
    "\u0002\u0450\u0456\u0005\u00b8]\u0002\u0451\u0452\u0005\u00b8]\u0002",
    "\u0452\u0453\u0007\u00b3\u0002\u0002\u0453\u0454\u0005\u00b8]\u0002",
    "\u0454\u0456\u0003\u0002\u0002\u0002\u0455\u044e\u0003\u0002\u0002\u0002",
    "\u0455\u0451\u0003\u0002\u0002\u0002\u0456\u00c3\u0003\u0002\u0002\u0002",
    "\u0457\u0458\t\n\u0002\u0002\u0458\u00c5\u0003\u0002\u0002\u0002\u0459",
    "\u045a\u0005\u00c8e\u0002\u045a\u00c7\u0003\u0002\u0002\u0002\u045b",
    "\u0460\u0005\u00caf\u0002\u045c\u045d\u0007(\u0002\u0002\u045d\u045f",
    "\u0005\u00c8e\u0002\u045e\u045c\u0003\u0002\u0002\u0002\u045f\u0462",
    "\u0003\u0002\u0002\u0002\u0460\u045e\u0003\u0002\u0002\u0002\u0460\u0461",
    "\u0003\u0002\u0002\u0002\u0461\u00c9\u0003\u0002\u0002\u0002\u0462\u0460",
    "\u0003\u0002\u0002\u0002\u0463\u0468\u0005\u00ccg\u0002\u0464\u0465",
    "\u0007\u0005\u0002\u0002\u0465\u0467\u0005\u00caf\u0002\u0466\u0464",
    "\u0003\u0002\u0002\u0002\u0467\u046a\u0003\u0002\u0002\u0002\u0468\u0466",
    "\u0003\u0002\u0002\u0002\u0468\u0469\u0003\u0002\u0002\u0002\u0469\u00cb",
    "\u0003\u0002\u0002\u0002\u046a\u0468\u0003\u0002\u0002\u0002\u046b\u046f",
    "\u0005\u00ceh\u0002\u046c\u046d\u0007$\u0002\u0002\u046d\u046f\u0005",
    "\u00ceh\u0002\u046e\u046b\u0003\u0002\u0002\u0002\u046e\u046c\u0003",
    "\u0002\u0002\u0002\u046f\u00cd\u0003\u0002\u0002\u0002\u0470\u0472\u0005",
    "\u00d4k\u0002\u0471\u0473\u0005\u00d0i\u0002\u0472\u0471\u0003\u0002",
    "\u0002\u0002\u0472\u0473\u0003\u0002\u0002\u0002\u0473\u00cf\u0003\u0002",
    "\u0002\u0002\u0474\u0476\u0007\u001d\u0002\u0002\u0475\u0477\u0007$",
    "\u0002\u0002\u0476\u0475\u0003\u0002\u0002\u0002\u0476\u0477\u0003\u0002",
    "\u0002\u0002\u0477\u0478\u0003\u0002\u0002\u0002\u0478\u0479\u0005\u00d2",
    "j\u0002\u0479\u00d1\u0003\u0002\u0002\u0002\u047a\u047b\t\u0003\u0002",
    "\u0002\u047b\u00d3\u0003\u0002\u0002\u0002\u047c\u047f\u0005\u0152\u00aa",
    "\u0002\u047d\u047f\u0005\u00d6l\u0002\u047e\u047c\u0003\u0002\u0002",
    "\u0002\u047e\u047d\u0003\u0002\u0002\u0002\u047f\u00d5\u0003\u0002\u0002",
    "\u0002\u0480\u0483\u0005\u00d8m\u0002\u0481\u0483\u0005p9\u0002\u0482",
    "\u0480\u0003\u0002\u0002\u0002\u0482\u0481\u0003\u0002\u0002\u0002\u0483",
    "\u00d7\u0003\u0002\u0002\u0002\u0484\u0485\u0007\u00ba\u0002\u0002\u0485",
    "\u0486\u0005\u00c6d\u0002\u0486\u0487\u0007\u00bb\u0002\u0002\u0487",
    "\u00d9\u0003\u0002\u0002\u0002\u0488\u048b\u0005\u00dco\u0002\u0489",
    "\u048b\u0005\u00dep\u0002\u048a\u0488\u0003\u0002\u0002\u0002\u048a",
    "\u0489\u0003\u0002\u0002\u0002\u048b\u00db\u0003\u0002\u0002\u0002\u048c",
    "\u048d\u0005p9\u0002\u048d\u00dd\u0003\u0002\u0002\u0002\u048e\u048f",
    "\u0007%\u0002\u0002\u048f\u00df\u0003\u0002\u0002\u0002\u0490\u0493",
    "\u0005\u00dco\u0002\u0491\u0493\u0005\u00e2r\u0002\u0492\u0490\u0003",
    "\u0002\u0002\u0002\u0492\u0491\u0003\u0002\u0002\u0002\u0493\u00e1\u0003",
    "\u0002\u0002\u0002\u0494\u0497\u0005\u009eP\u0002\u0495\u0497\u0005",
    "\u00d6l\u0002\u0496\u0494\u0003\u0002\u0002\u0002\u0496\u0495\u0003",
    "\u0002\u0002\u0002\u0497\u00e3\u0003\u0002\u0002\u0002\u0498\u049a\u0005",
    "\u00e6t\u0002\u0499\u049b\u0005\u010a\u0086\u0002\u049a\u0499\u0003",
    "\u0002\u0002\u0002\u049a\u049b\u0003\u0002\u0002\u0002\u049b\u049d\u0003",
    "\u0002\u0002\u0002\u049c\u049e\u0005\u010e\u0088\u0002\u049d\u049c\u0003",
    "\u0002\u0002\u0002\u049d\u049e\u0003\u0002\u0002\u0002\u049e\u04a0\u0003",
    "\u0002\u0002\u0002\u049f\u04a1\u0005\u011e\u0090\u0002\u04a0\u049f\u0003",
    "\u0002\u0002\u0002\u04a0\u04a1\u0003\u0002\u0002\u0002\u04a1\u04a3\u0003",
    "\u0002\u0002\u0002\u04a2\u04a4\u0005\u0186\u00c4\u0002\u04a3\u04a2\u0003",
    "\u0002\u0002\u0002\u04a3\u04a4\u0003\u0002\u0002\u0002\u04a4\u04a6\u0003",
    "\u0002\u0002\u0002\u04a5\u04a7\u0005\u018e\u00c8\u0002\u04a6\u04a5\u0003",
    "\u0002\u0002\u0002\u04a6\u04a7\u0003\u0002\u0002\u0002\u04a7\u00e5\u0003",
    "\u0002\u0002\u0002\u04a8\u04a9\u0007\u0015\u0002\u0002\u04a9\u04aa\u0005",
    "\u00e8u\u0002\u04aa\u00e7\u0003\u0002\u0002\u0002\u04ab\u04b0\u0005",
    "\u00eav\u0002\u04ac\u04ad\u0007\u00b3\u0002\u0002\u04ad\u04af\u0005",
    "\u00eav\u0002\u04ae\u04ac\u0003\u0002\u0002\u0002\u04af\u04b2\u0003",
    "\u0002\u0002\u0002\u04b0\u04ae\u0003\u0002\u0002\u0002\u04b0\u04b1\u0003",
    "\u0002\u0002\u0002\u04b1\u00e9\u0003\u0002\u0002\u0002\u04b2\u04b0\u0003",
    "\u0002\u0002\u0002\u04b3\u04b6\u0005\u00ecw\u0002\u04b4\u04b6\u0005",
    "\u0104\u0083\u0002\u04b5\u04b3\u0003\u0002\u0002\u0002\u04b5\u04b4\u0003",
    "\u0002\u0002\u0002\u04b6\u00eb\u0003\u0002\u0002\u0002\u04b7\u04b9\u0005",
    "\u0104\u0083\u0002\u04b8\u04ba\u0005\u00eex\u0002\u04b9\u04b8\u0003",
    "\u0002\u0002\u0002\u04ba\u04bb\u0003\u0002\u0002\u0002\u04bb\u04b9\u0003",
    "\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc\u00ed\u0003",
    "\u0002\u0002\u0002\u04bd\u04be\u0007\r\u0002\u0002\u04be\u04bf\u0007",
    "\u001e\u0002\u0002\u04bf\u04d1\u0005\u0104\u0083\u0002\u04c0\u04c2\u0005",
    "\u00f8}\u0002\u04c1\u04c0\u0003\u0002\u0002\u0002\u04c1\u04c2\u0003",
    "\u0002\u0002\u0002\u04c2\u04c3\u0003\u0002\u0002\u0002\u04c3\u04c4\u0007",
    "\u001e\u0002\u0002\u04c4\u04c5\u0005\u0104\u0083\u0002\u04c5\u04c6\u0005",
    "\u00fe\u0080\u0002\u04c6\u04d1\u0003\u0002\u0002\u0002\u04c7\u04c9\u0007",
    "#\u0002\u0002\u04c8\u04ca\u0005\u00f8}\u0002\u04c9\u04c8\u0003\u0002",
    "\u0002\u0002\u04c9\u04ca\u0003\u0002\u0002\u0002\u04ca\u04cb\u0003\u0002",
    "\u0002\u0002\u04cb\u04cc\u0007\u001e\u0002\u0002\u04cc\u04d1\u0005\u0104",
    "\u0083\u0002\u04cd\u04ce\u00072\u0002\u0002\u04ce\u04cf\u0007\u001e",
    "\u0002\u0002\u04cf\u04d1\u0005\u0104\u0083\u0002\u04d0\u04bd\u0003\u0002",
    "\u0002\u0002\u04d0\u04c1\u0003\u0002\u0002\u0002\u04d0\u04c7\u0003\u0002",
    "\u0002\u0002\u04d0\u04cd\u0003\u0002\u0002\u0002\u04d1\u00ef\u0003\u0002",
    "\u0002\u0002\u04d2\u04d3\u0007\r\u0002\u0002\u04d3\u04d4\u0007\u001e",
    "\u0002\u0002\u04d4\u04d5\u0005\u0104\u0083\u0002\u04d5\u00f1\u0003\u0002",
    "\u0002\u0002\u04d6\u04d8\u0005\u00f8}\u0002\u04d7\u04d6\u0003\u0002",
    "\u0002\u0002\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8\u04d9\u0003\u0002",
    "\u0002\u0002\u04d9\u04da\u0007\u001e\u0002\u0002\u04da\u04db\u0005\u0104",
    "\u0083\u0002\u04db\u04dc\u0005\u00fe\u0080\u0002\u04dc\u00f3\u0003\u0002",
    "\u0002\u0002\u04dd\u04df\u0007#\u0002\u0002\u04de\u04e0\u0005\u00f8",
    "}\u0002\u04df\u04de\u0003\u0002\u0002\u0002\u04df\u04e0\u0003\u0002",
    "\u0002\u0002\u04e0\u04e1\u0003\u0002\u0002\u0002\u04e1\u04e2\u0007\u001e",
    "\u0002\u0002\u04e2\u04e3\u0005\u0104\u0083\u0002\u04e3\u00f5\u0003\u0002",
    "\u0002\u0002\u04e4\u04e5\u00072\u0002\u0002\u04e5\u04e6\u0007\u001e",
    "\u0002\u0002\u04e6\u04e7\u0005\u0104\u0083\u0002\u04e7\u00f7\u0003\u0002",
    "\u0002\u0002\u04e8\u04eb\u0007\u001a\u0002\u0002\u04e9\u04eb\u0005\u00fa",
    "~\u0002\u04ea\u04e8\u0003\u0002\u0002\u0002\u04ea\u04e9\u0003\u0002",
    "\u0002\u0002\u04eb\u00f9\u0003\u0002\u0002\u0002\u04ec\u04ee\u0005\u00fc",
    "\u007f\u0002\u04ed\u04ef\u0007\'\u0002\u0002\u04ee\u04ed\u0003\u0002",
    "\u0002\u0002\u04ee\u04ef\u0003\u0002\u0002\u0002\u04ef\u00fb\u0003\u0002",
    "\u0002\u0002\u04f0\u04f1\t\u000b\u0002\u0002\u04f1\u00fd\u0003\u0002",
    "\u0002\u0002\u04f2\u04f5\u0005\u0100\u0081\u0002\u04f3\u04f5\u0005\u0102",
    "\u0082\u0002\u04f4\u04f2\u0003\u0002\u0002\u0002\u04f4\u04f3\u0003\u0002",
    "\u0002\u0002\u04f5\u00ff\u0003\u0002\u0002\u0002\u04f6\u04f7\u0007&",
    "\u0002\u0002\u04f7\u04f8\u0005\u010c\u0087\u0002\u04f8\u0101\u0003\u0002",
    "\u0002\u0002\u04f9\u04fa\u00074\u0002\u0002\u04fa\u04fb\u0007\u00ba",
    "\u0002\u0002\u04fb\u04fc\u0005\u0148\u00a5\u0002\u04fc\u04fd\u0007\u00bb",
    "\u0002\u0002\u04fd\u0103\u0003\u0002\u0002\u0002\u04fe\u0503\u0005\u0134",
    "\u009b\u0002\u04ff\u0501\u0007\u0003\u0002\u0002\u0500\u04ff\u0003\u0002",
    "\u0002\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501\u0502\u0003\u0002",
    "\u0002\u0002\u0502\u0504\u0005<\u001f\u0002\u0503\u0500\u0003\u0002",
    "\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504\u0509\u0003\u0002",
    "\u0002\u0002\u0505\u0506\u0007\u00ba\u0002\u0002\u0506\u0507\u0005\u0106",
    "\u0084\u0002\u0507\u0508\u0007\u00bb\u0002\u0002\u0508\u050a\u0003\u0002",
    "\u0002\u0002\u0509\u0505\u0003\u0002\u0002\u0002\u0509\u050a\u0003\u0002",
    "\u0002\u0002\u050a\u0517\u0003\u0002\u0002\u0002\u050b\u050d\u0005\u0108",
    "\u0085\u0002\u050c\u050e\u0007\u0003\u0002\u0002\u050d\u050c\u0003\u0002",
    "\u0002\u0002\u050d\u050e\u0003\u0002\u0002\u0002\u050e\u050f\u0003\u0002",
    "\u0002\u0002\u050f\u0514\u0005<\u001f\u0002\u0510\u0511\u0007\u00ba",
    "\u0002\u0002\u0511\u0512\u0005\u0106\u0084\u0002\u0512\u0513\u0007\u00bb",
    "\u0002\u0002\u0513\u0515\u0003\u0002\u0002\u0002\u0514\u0510\u0003\u0002",
    "\u0002\u0002\u0514\u0515\u0003\u0002\u0002\u0002\u0515\u0517\u0003\u0002",
    "\u0002\u0002\u0516\u04fe\u0003\u0002\u0002\u0002\u0516\u050b\u0003\u0002",
    "\u0002\u0002\u0517\u0105\u0003\u0002\u0002\u0002\u0518\u051d\u0005<",
    "\u001f\u0002\u0519\u051a\u0007\u00b3\u0002\u0002\u051a\u051c\u0005<",
    "\u001f\u0002\u051b\u0519\u0003\u0002\u0002\u0002\u051c\u051f\u0003\u0002",
    "\u0002\u0002\u051d\u051b\u0003\u0002\u0002\u0002\u051d\u051e\u0003\u0002",
    "\u0002\u0002\u051e\u0107\u0003\u0002\u0002\u0002\u051f\u051d\u0003\u0002",
    "\u0002\u0002\u0520\u0521\u0005\u014e\u00a8\u0002\u0521\u0109\u0003\u0002",
    "\u0002\u0002\u0522\u0523\u00076\u0002\u0002\u0523\u0524\u0005\u010c",
    "\u0087\u0002\u0524\u010b\u0003\u0002\u0002\u0002\u0525\u0526\u0005\u009c",
    "O\u0002\u0526\u010d\u0003\u0002\u0002\u0002\u0527\u0528\u0007\u0016",
    "\u0002\u0002\u0528\u0529\u0007:\u0002\u0002\u0529\u052a\u0005\u0110",
    "\u0089\u0002\u052a\u010f\u0003\u0002\u0002\u0002\u052b\u0530\u0005\u0112",
    "\u008a\u0002\u052c\u052d\u0007\u00b3\u0002\u0002\u052d\u052f\u0005\u0112",
    "\u008a\u0002\u052e\u052c\u0003\u0002\u0002\u0002\u052f\u0532\u0003\u0002",
    "\u0002\u0002\u0530\u052e\u0003\u0002\u0002\u0002\u0530\u0531\u0003\u0002",
    "\u0002\u0002\u0531\u0111\u0003\u0002\u0002\u0002\u0532\u0530\u0003\u0002",
    "\u0002\u0002\u0533\u0538\u0005\u0118\u008d\u0002\u0534\u0538\u0005\u011a",
    "\u008e\u0002\u0535\u0538\u0005\u011c\u008f\u0002\u0536\u0538\u0005\u0114",
    "\u008b\u0002\u0537\u0533\u0003\u0002\u0002\u0002\u0537\u0534\u0003\u0002",
    "\u0002\u0002\u0537\u0535\u0003\u0002\u0002\u0002\u0537\u0536\u0003\u0002",
    "\u0002\u0002\u0538\u0113\u0003\u0002\u0002\u0002\u0539\u053f\u0005\u00e0",
    "q\u0002\u053a\u053b\u0007\u00ba\u0002\u0002\u053b\u053c\u0005\u0120",
    "\u0091\u0002\u053c\u053d\u0007\u00bb\u0002\u0002\u053d\u053f\u0003\u0002",
    "\u0002\u0002\u053e\u0539\u0003\u0002\u0002\u0002\u053e\u053a\u0003\u0002",
    "\u0002\u0002\u053f\u0115\u0003\u0002\u0002\u0002\u0540\u0545\u0005\u0114",
    "\u008b\u0002\u0541\u0542\u0007\u00b3\u0002\u0002\u0542\u0544\u0005\u0114",
    "\u008b\u0002\u0543\u0541\u0003\u0002\u0002\u0002\u0544\u0547\u0003\u0002",
    "\u0002\u0002\u0545\u0543\u0003\u0002\u0002\u0002\u0545\u0546\u0003\u0002",
    "\u0002\u0002\u0546\u0117\u0003\u0002\u0002\u0002\u0547\u0545\u0003\u0002",
    "\u0002\u0002\u0548\u0549\u0007p\u0002\u0002\u0549\u054a\u0007\u00ba",
    "\u0002\u0002\u054a\u054b\u0005\u0116\u008c\u0002\u054b\u054c\u0007\u00bb",
    "\u0002\u0002\u054c\u0119\u0003\u0002\u0002\u0002\u054d\u054e\u0007A",
    "\u0002\u0002\u054e\u054f\u0007\u00ba\u0002\u0002\u054f\u0550\u0005\u0116",
    "\u008c\u0002\u0550\u0551\u0007\u00bb\u0002\u0002\u0551\u011b\u0003\u0002",
    "\u0002\u0002\u0552\u0553\u0007\u00ba\u0002\u0002\u0553\u0554\u0007\u00bb",
    "\u0002\u0002\u0554\u011d\u0003\u0002\u0002\u0002\u0555\u0556\u0007\u0017",
    "\u0002\u0002\u0556\u0557\u0005\u00c6d\u0002\u0557\u011f\u0003\u0002",
    "\u0002\u0002\u0558\u055d\u0005\u00e0q\u0002\u0559\u055a\u0007\u00b3",
    "\u0002\u0002\u055a\u055c\u0005\u00e0q\u0002\u055b\u0559\u0003\u0002",
    "\u0002\u0002\u055c\u055f\u0003\u0002\u0002\u0002\u055d\u055b\u0003\u0002",
    "\u0002\u0002\u055d\u055e\u0003\u0002\u0002\u0002\u055e\u0121\u0003\u0002",
    "\u0002\u0002\u055f\u055d\u0003\u0002\u0002\u0002\u0560\u0561\u0005\u0124",
    "\u0093\u0002\u0561\u0123\u0003\u0002\u0002\u0002\u0562\u0565\u0005\u0126",
    "\u0094\u0002\u0563\u0565\u0005\u00ecw\u0002\u0564\u0562\u0003\u0002",
    "\u0002\u0002\u0564\u0563\u0003\u0002\u0002\u0002\u0565\u0125\u0003\u0002",
    "\u0002\u0002\u0566\u056f\u0005\u012a\u0096\u0002\u0567\u0568\u0005\u00ec",
    "w\u0002\u0568\u056a\t\f\u0002\u0002\u0569\u056b\t\r\u0002\u0002\u056a",
    "\u0569\u0003\u0002\u0002\u0002\u056a\u056b\u0003\u0002\u0002\u0002\u056b",
    "\u056c\u0003\u0002\u0002\u0002\u056c\u056d\u0005\u0128\u0095\u0002\u056d",
    "\u056f\u0003\u0002\u0002\u0002\u056e\u0566\u0003\u0002\u0002\u0002\u056e",
    "\u0567\u0003\u0002\u0002\u0002\u056f\u0577\u0003\u0002\u0002\u0002\u0570",
    "\u0572\t\f\u0002\u0002\u0571\u0573\t\r\u0002\u0002\u0572\u0571\u0003",
    "\u0002\u0002\u0002\u0572\u0573\u0003\u0002\u0002\u0002\u0573\u0574\u0003",
    "\u0002\u0002\u0002\u0574\u0576\u0005\u0128\u0095\u0002\u0575\u0570\u0003",
    "\u0002\u0002\u0002\u0576\u0579\u0003\u0002\u0002\u0002\u0577\u0575\u0003",
    "\u0002\u0002\u0002\u0577\u0578\u0003\u0002\u0002\u0002\u0578\u0127\u0003",
    "\u0002\u0002\u0002\u0579\u0577\u0003\u0002\u0002\u0002\u057a\u057d\u0005",
    "\u012a\u0096\u0002\u057b\u057d\u0005\u00ecw\u0002\u057c\u057a\u0003",
    "\u0002\u0002\u0002\u057c\u057b\u0003\u0002\u0002\u0002\u057d\u0129\u0003",
    "\u0002\u0002\u0002\u057e\u0587\u0005\u012e\u0098\u0002\u057f\u0580\u0005",
    "\u00ecw\u0002\u0580\u0582\u0007\u001b\u0002\u0002\u0581\u0583\t\r\u0002",
    "\u0002\u0582\u0581\u0003\u0002\u0002\u0002\u0582\u0583\u0003\u0002\u0002",
    "\u0002\u0583\u0584\u0003\u0002\u0002\u0002\u0584\u0585\u0005\u012c\u0097",
    "\u0002\u0585\u0587\u0003\u0002\u0002\u0002\u0586\u057e\u0003\u0002\u0002",
    "\u0002\u0586\u057f\u0003\u0002\u0002\u0002\u0587\u058f\u0003\u0002\u0002",
    "\u0002\u0588\u058a\u0007\u001b\u0002\u0002\u0589\u058b\t\r\u0002\u0002",
    "\u058a\u0589\u0003\u0002\u0002\u0002\u058a\u058b\u0003\u0002\u0002\u0002",
    "\u058b\u058c\u0003\u0002\u0002\u0002\u058c\u058e\u0005\u012c\u0097\u0002",
    "\u058d\u0588\u0003\u0002\u0002\u0002\u058e\u0591\u0003\u0002\u0002\u0002",
    "\u058f\u058d\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002",
    "\u0590\u012b\u0003\u0002\u0002\u0002\u0591\u058f\u0003\u0002\u0002\u0002",
    "\u0592\u0595\u0005\u012e\u0098\u0002\u0593\u0595\u0005\u00ecw\u0002",
    "\u0594\u0592\u0003\u0002\u0002\u0002\u0594\u0593\u0003\u0002\u0002\u0002",
    "\u0595\u012d\u0003\u0002\u0002\u0002\u0596\u059c\u0005\u0130\u0099\u0002",
    "\u0597\u0598\u0007\u00ba\u0002\u0002\u0598\u0599\u0005\u0126\u0094\u0002",
    "\u0599\u059a\u0007\u00bb\u0002\u0002\u059a\u059c\u0003\u0002\u0002\u0002",
    "\u059b\u0596\u0003\u0002\u0002\u0002\u059b\u0597\u0003\u0002\u0002\u0002",
    "\u059c\u012f\u0003\u0002\u0002\u0002\u059d\u05a0\u0005\u0138\u009d\u0002",
    "\u059e\u05a0\u0005\u0132\u009a\u0002\u059f\u059d\u0003\u0002\u0002\u0002",
    "\u059f\u059e\u0003\u0002\u0002\u0002\u05a0\u0131\u0003\u0002\u0002\u0002",
    "\u05a1\u05a2\u0007.\u0002\u0002\u05a2\u05a3\u0005\u0134\u009b\u0002",
    "\u05a3\u0133\u0003\u0002\u0002\u0002\u05a4\u05a7\u0005\u0136\u009c\u0002",
    "\u05a5\u05a7\u0005<\u001f\u0002\u05a6\u05a4\u0003\u0002\u0002\u0002",
    "\u05a6\u05a5\u0003\u0002\u0002\u0002\u05a7\u0135\u0003\u0002\u0002\u0002",
    "\u05a8\u05af\u0005<\u001f\u0002\u05a9\u05aa\u0007\u00c1\u0002\u0002",
    "\u05aa\u05ad\u0005<\u001f\u0002\u05ab\u05ac\u0007\u00c1\u0002\u0002",
    "\u05ac\u05ae\u0005<\u001f\u0002\u05ad\u05ab\u0003\u0002\u0002\u0002",
    "\u05ad\u05ae\u0003\u0002\u0002\u0002\u05ae\u05b0\u0003\u0002\u0002\u0002",
    "\u05af\u05a9\u0003\u0002\u0002\u0002\u05af\u05b0\u0003\u0002\u0002\u0002",
    "\u05b0\u0137\u0003\u0002\u0002\u0002\u05b1\u05b3\u0007+\u0002\u0002",
    "\u05b2\u05b4\u0005\u0142\u00a2\u0002\u05b3\u05b2\u0003\u0002\u0002\u0002",
    "\u05b3\u05b4\u0003\u0002\u0002\u0002\u05b4\u05b5\u0003\u0002\u0002\u0002",
    "\u05b5\u05b7\u0005\u013a\u009e\u0002\u05b6\u05b8\u0005\u00e4s\u0002",
    "\u05b7\u05b6\u0003\u0002\u0002\u0002\u05b7\u05b8\u0003\u0002\u0002\u0002",
    "\u05b8\u0139\u0003\u0002\u0002\u0002\u05b9\u05be\u0005\u013c\u009f\u0002",
    "\u05ba\u05bb\u0007\u00b3\u0002\u0002\u05bb\u05bd\u0005\u013c\u009f\u0002",
    "\u05bc\u05ba\u0003\u0002\u0002\u0002\u05bd\u05c0\u0003\u0002\u0002\u0002",
    "\u05be\u05bc\u0003\u0002\u0002\u0002\u05be\u05bf\u0003\u0002\u0002\u0002",
    "\u05bf\u013b\u0003\u0002\u0002\u0002\u05c0\u05be\u0003\u0002\u0002\u0002",
    "\u05c1\u05c4\u0005\u013e\u00a0\u0002\u05c2\u05c4\u0005\u0140\u00a1\u0002",
    "\u05c3\u05c1\u0003\u0002\u0002\u0002\u05c3\u05c2\u0003\u0002\u0002\u0002",
    "\u05c4\u013d\u0003\u0002\u0002\u0002\u05c5\u05c7\u0005\u009cO\u0002",
    "\u05c6\u05c8\u0005\u0146\u00a4\u0002\u05c7\u05c6\u0003\u0002\u0002\u0002",
    "\u05c7\u05c8\u0003\u0002\u0002\u0002\u05c8\u013f\u0003\u0002\u0002\u0002",
    "\u05c9\u05ca\u0007\u00ca\u0002\u0002\u05ca\u05cc\u0007\u00c1\u0002\u0002",
    "\u05cb\u05c9\u0003\u0002\u0002\u0002\u05cb\u05cc\u0003\u0002\u0002\u0002",
    "\u05cc\u05cd\u0003\u0002\u0002\u0002\u05cd\u05ce\u0007\u00be\u0002\u0002",
    "\u05ce\u0141\u0003\u0002\u0002\u0002\u05cf\u05d0\t\r\u0002\u0002\u05d0",
    "\u0143\u0003\u0002\u0002\u0002\u05d1\u05d2\u0005<\u001f\u0002\u05d2",
    "\u05d3\u0007\u00c1\u0002\u0002\u05d3\u05d5\u0003\u0002\u0002\u0002\u05d4",
    "\u05d1\u0003\u0002\u0002\u0002\u05d4\u05d5\u0003\u0002\u0002\u0002\u05d5",
    "\u05d6\u0003\u0002\u0002\u0002\u05d6\u05d7\u0005<\u001f\u0002\u05d7",
    "\u0145\u0003\u0002\u0002\u0002\u05d8\u05da\u0007\u0003\u0002\u0002\u05d9",
    "\u05d8\u0003\u0002\u0002\u0002\u05d9\u05da\u0003\u0002\u0002\u0002\u05da",
    "\u05db\u0003\u0002\u0002\u0002\u05db\u05dc\u0005<\u001f\u0002\u05dc",
    "\u0147\u0003\u0002\u0002\u0002\u05dd\u05e2\u0005\u0144\u00a3\u0002\u05de",
    "\u05df\u0007\u00b3\u0002\u0002\u05df\u05e1\u0005\u0144\u00a3\u0002\u05e0",
    "\u05de\u0003\u0002\u0002\u0002\u05e1\u05e4\u0003\u0002\u0002\u0002\u05e2",
    "\u05e0\u0003\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3",
    "\u0149\u0003\u0002\u0002\u0002\u05e4\u05e2\u0003\u0002\u0002\u0002\u05e5",
    "\u05e6\u0005\u0150\u00a9\u0002\u05e6\u014b\u0003\u0002\u0002\u0002\u05e7",
    "\u05e8\u0005\u0150\u00a9\u0002\u05e8\u014d\u0003\u0002\u0002\u0002\u05e9",
    "\u05ea\u0005\u0150\u00a9\u0002\u05ea\u014f\u0003\u0002\u0002\u0002\u05eb",
    "\u05ec\u0007\u00ba\u0002\u0002\u05ec\u05ed\u0005\u0122\u0092\u0002\u05ed",
    "\u05ee\u0007\u00bb\u0002\u0002\u05ee\u0151\u0003\u0002\u0002\u0002\u05ef",
    "\u05f6\u0005\u0154\u00ab\u0002\u05f0\u05f6\u0005\u0158\u00ad\u0002\u05f1",
    "\u05f6\u0005\u015c\u00af\u0002\u05f2\u05f6\u0005\u0162\u00b2\u0002\u05f3",
    "\u05f6\u0005\u016a\u00b6\u0002\u05f4\u05f6\u0005\u0174\u00bb\u0002\u05f5",
    "\u05ef\u0003\u0002\u0002\u0002\u05f5\u05f0\u0003\u0002\u0002\u0002\u05f5",
    "\u05f1\u0003\u0002\u0002\u0002\u05f5\u05f2\u0003\u0002\u0002\u0002\u05f5",
    "\u05f3\u0003\u0002\u0002\u0002\u05f5\u05f4\u0003\u0002\u0002\u0002\u05f6",
    "\u0153\u0003\u0002\u0002\u0002\u05f7\u05f8\u0005\u00e0q\u0002\u05f8",
    "\u05f9\u0005\u0156\u00ac\u0002\u05f9\u05fa\u0005\u00e0q\u0002\u05fa",
    "\u0155\u0003\u0002\u0002\u0002\u05fb\u05fc\t\u000e\u0002\u0002\u05fc",
    "\u0157\u0003\u0002\u0002\u0002\u05fd\u05fe\u0005\u00e0q\u0002\u05fe",
    "\u05ff\u0005\u015a\u00ae\u0002\u05ff\u0159\u0003\u0002\u0002\u0002\u0600",
    "\u0602\u0007$\u0002\u0002\u0601\u0600\u0003\u0002\u0002\u0002\u0601",
    "\u0602\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002\u0002\u0603",
    "\u0605\u00079\u0002\u0002\u0604\u0606\t\u000f\u0002\u0002\u0605\u0604",
    "\u0003\u0002\u0002\u0002\u0605\u0606\u0003\u0002\u0002\u0002\u0606\u0607",
    "\u0003\u0002\u0002\u0002\u0607\u0608\u0005\u00e0q\u0002\u0608\u0609",
    "\u0007\u0005\u0002\u0002\u0609\u060a\u0005\u00e0q\u0002\u060a\u015b",
    "\u0003\u0002\u0002\u0002\u060b\u060d\u0005\u00a0Q\u0002\u060c\u060e",
    "\u0007$\u0002\u0002\u060d\u060c\u0003\u0002\u0002\u0002\u060d\u060e",
    "\u0003\u0002\u0002\u0002\u060e\u060f\u0003\u0002\u0002\u0002\u060f\u0610",
    "\u0007\u0019\u0002\u0002\u0610\u0611\u0005\u015e\u00b0\u0002\u0611\u015d",
    "\u0003\u0002\u0002\u0002\u0612\u0618\u0005\u014e\u00a8\u0002\u0613\u0614",
    "\u0007\u00ba\u0002\u0002\u0614\u0615\u0005\u0160\u00b1\u0002\u0615\u0616",
    "\u0007\u00bb\u0002\u0002\u0616\u0618\u0003\u0002\u0002\u0002\u0617\u0612",
    "\u0003\u0002\u0002\u0002\u0617\u0613\u0003\u0002\u0002\u0002\u0618\u015f",
    "\u0003\u0002\u0002\u0002\u0619\u061e\u0005\u00dan\u0002\u061a\u061b",
    "\u0007\u00b3\u0002\u0002\u061b\u061d\u0005\u00dan\u0002\u061c\u061a",
    "\u0003\u0002\u0002\u0002\u061d\u0620\u0003\u0002\u0002\u0002\u061e\u061c",
    "\u0003\u0002\u0002\u0002\u061e\u061f\u0003\u0002\u0002\u0002\u061f\u0161",
    "\u0003\u0002\u0002\u0002\u0620\u061e\u0003\u0002\u0002\u0002\u0621\u0622",
    "\u0005\u00e0q\u0002\u0622\u0623\u0005\u0164\u00b3\u0002\u0623\u0624",
    "\u0007\u00cb\u0002\u0002\u0624\u0163\u0003\u0002\u0002\u0002\u0625\u0627",
    "\u0007$\u0002\u0002\u0626\u0625\u0003\u0002\u0002\u0002\u0626\u0627",
    "\u0003\u0002\u0002\u0002\u0627\u0628\u0003\u0002\u0002\u0002\u0628\u062b",
    "\u0005\u0166\u00b4\u0002\u0629\u062b\u0005\u0168\u00b5\u0002\u062a\u0626",
    "\u0003\u0002\u0002\u0002\u062a\u0629\u0003\u0002\u0002\u0002\u062b\u0165",
    "\u0003\u0002\u0002\u0002\u062c\u0633\u0007!\u0002\u0002\u062d\u0633",
    "\u0007\u0018\u0002\u0002\u062e\u062f\u0007s\u0002\u0002\u062f\u0633",
    "\u0007~\u0002\u0002\u0630\u0633\u0007n\u0002\u0002\u0631\u0633\u0007",
    "o\u0002\u0002\u0632\u062c\u0003\u0002\u0002\u0002\u0632\u062d\u0003",
    "\u0002\u0002\u0002\u0632\u062e\u0003\u0002\u0002\u0002\u0632\u0630\u0003",
    "\u0002\u0002\u0002\u0632\u0631\u0003\u0002\u0002\u0002\u0633\u0167\u0003",
    "\u0002\u0002\u0002\u0634\u0635\t\u0010\u0002\u0002\u0635\u0169\u0003",
    "\u0002\u0002\u0002\u0636\u0637\u0005\u00e0q\u0002\u0637\u0639\u0007",
    "\u001d\u0002\u0002\u0638\u063a\u0007$\u0002\u0002\u0639\u0638\u0003",
    "\u0002\u0002\u0002\u0639\u063a\u0003\u0002\u0002\u0002\u063a\u063b\u0003",
    "\u0002\u0002\u0002\u063b\u063c\u0007%\u0002\u0002\u063c\u016b\u0003",
    "\u0002\u0002\u0002\u063d\u063e\u0005\u00a0Q\u0002\u063e\u063f\u0005",
    "\u0156\u00ac\u0002\u063f\u0640\u0005\u016e\u00b8\u0002\u0640\u0641\u0005",
    "\u014e\u00a8\u0002\u0641\u016d\u0003\u0002\u0002\u0002\u0642\u0645\u0005",
    "\u0170\u00b9\u0002\u0643\u0645\u0005\u0172\u00ba\u0002\u0644\u0642\u0003",
    "\u0002\u0002\u0002\u0644\u0643\u0003\u0002\u0002\u0002\u0645\u016f\u0003",
    "\u0002\u0002\u0002\u0646\u0647\u0007\u0004\u0002\u0002\u0647\u0171\u0003",
    "\u0002\u0002\u0002\u0648\u0649\t\u0011\u0002\u0002\u0649\u0173\u0003",
    "\u0002\u0002\u0002\u064a\u064c\u0007$\u0002\u0002\u064b\u064a\u0003",
    "\u0002\u0002\u0002\u064b\u064c\u0003\u0002\u0002\u0002\u064c\u064d\u0003",
    "\u0002\u0002\u0002\u064d\u064e\u0007J\u0002\u0002\u064e\u064f\u0005",
    "\u014e\u00a8\u0002\u064f\u0175\u0003\u0002\u0002\u0002\u0650\u0651\u0007",
    "3\u0002\u0002\u0651\u0652\u0005\u014e\u00a8\u0002\u0652\u0177\u0003",
    "\u0002\u0002\u0002\u0653\u0656\u0005\u017a\u00be\u0002\u0654\u0656\u0007",
    "q\u0002\u0002\u0655\u0653\u0003\u0002\u0002\u0002\u0655\u0654\u0003",
    "\u0002\u0002\u0002\u0656\u0179\u0003\u0002\u0002\u0002\u0657\u0658\t",
    "\u0012\u0002\u0002\u0658\u017b\u0003\u0002\u0002\u0002\u0659\u065a\t",
    "\u0013\u0002\u0002\u065a\u017d\u0003\u0002\u0002\u0002\u065b\u065c\u0005",
    "\u0182\u00c2\u0002\u065c\u065e\u0007\u00ba\u0002\u0002\u065d\u065f\u0005",
    "\u0184\u00c3\u0002\u065e\u065d\u0003\u0002\u0002\u0002\u065e\u065f\u0003",
    "\u0002\u0002\u0002\u065f\u0660\u0003\u0002\u0002\u0002\u0660\u0661\u0007",
    "\u00bb\u0002\u0002\u0661\u017f\u0003\u0002\u0002\u0002\u0662\u0663\t",
    "\u0014\u0002\u0002\u0663\u0181\u0003\u0002\u0002\u0002\u0664\u0667\u0005",
    "<\u001f\u0002\u0665\u0667\u0005\u0180\u00c1\u0002\u0666\u0664\u0003",
    "\u0002\u0002\u0002\u0666\u0665\u0003\u0002\u0002\u0002\u0667\u0183\u0003",
    "\u0002\u0002\u0002\u0668\u066d\u0005\u009cO\u0002\u0669\u066a\u0007",
    "\u00b3\u0002\u0002\u066a\u066c\u0005\u009cO\u0002\u066b\u0669\u0003",
    "\u0002\u0002\u0002\u066c\u066f\u0003\u0002\u0002\u0002\u066d\u066b\u0003",
    "\u0002\u0002\u0002\u066d\u066e\u0003\u0002\u0002\u0002\u066e\u0185\u0003",
    "\u0002\u0002\u0002\u066f\u066d\u0003\u0002\u0002\u0002\u0670\u0671\u0007",
    ")\u0002\u0002\u0671\u0672\u0007:\u0002\u0002\u0672\u0673\u0005\u0188",
    "\u00c5\u0002\u0673\u0187\u0003\u0002\u0002\u0002\u0674\u0679\u0005\u018a",
    "\u00c6\u0002\u0675\u0676\u0007\u00b3\u0002\u0002\u0676\u0678\u0005\u018a",
    "\u00c6\u0002\u0677\u0675\u0003\u0002\u0002\u0002\u0678\u067b\u0003\u0002",
    "\u0002\u0002\u0679\u0677\u0003\u0002\u0002\u0002\u0679\u067a\u0003\u0002",
    "\u0002\u0002\u067a\u0189\u0003\u0002\u0002\u0002\u067b\u0679\u0003\u0002",
    "\u0002\u0002\u067c\u067e\u0005\u00e0q\u0002\u067d\u067f\u0005\u018c",
    "\u00c7\u0002\u067e\u067d\u0003\u0002\u0002\u0002\u067e\u067f\u0003\u0002",
    "\u0002\u0002\u067f\u0681\u0003\u0002\u0002\u0002\u0680\u0682\u0005\u0190",
    "\u00c9\u0002\u0681\u0680\u0003\u0002\u0002\u0002\u0681\u0682\u0003\u0002",
    "\u0002\u0002\u0682\u018b\u0003\u0002\u0002\u0002\u0683\u0684\t\u0015",
    "\u0002\u0002\u0684\u018d\u0003\u0002\u0002\u0002\u0685\u0686\u0007\"",
    "\u0002\u0002\u0686\u0687\u0005\u00a0Q\u0002\u0687\u018f\u0003\u0002",
    "\u0002\u0002\u0688\u0689\u0007%\u0002\u0002\u0689\u068d\u0007N\u0002",
    "\u0002\u068a\u068b\u0007%\u0002\u0002\u068b\u068d\u0007Y\u0002\u0002",
    "\u068c\u0688\u0003\u0002\u0002\u0002\u068c\u068a\u0003\u0002\u0002\u0002",
    "\u068d\u0191\u0003\u0002\u0002\u0002\u068e\u0690\u0007U\u0002\u0002",
    "\u068f\u0691\u0007g\u0002\u0002\u0690\u068f\u0003\u0002\u0002\u0002",
    "\u0690\u0691\u0003\u0002\u0002\u0002\u0691\u0692\u0003\u0002\u0002\u0002",
    "\u0692\u0693\u0007\u001c\u0002\u0002\u0693\u0698\u0005\u0136\u009c\u0002",
    "\u0694\u0695\u0007\u00ba\u0002\u0002\u0695\u0696\u0005\u0106\u0084\u0002",
    "\u0696\u0697\u0007\u00bb\u0002\u0002\u0697\u0699\u0003\u0002\u0002\u0002",
    "\u0698\u0694\u0003\u0002\u0002\u0002\u0698\u0699\u0003\u0002\u0002\u0002",
    "\u0699\u069a\u0003\u0002\u0002\u0002\u069a\u069b\u0005\u0122\u0092\u0002",
    "\u069b\u06ac\u0003\u0002\u0002\u0002\u069c\u069e\u0007U\u0002\u0002",
    "\u069d\u069f\u0007g\u0002\u0002\u069e\u069d\u0003\u0002\u0002\u0002",
    "\u069e\u069f\u0003\u0002\u0002\u0002\u069f\u06a0\u0003\u0002\u0002\u0002",
    "\u06a0\u06a1\u0007\u001c\u0002\u0002\u06a1\u06a2\u0007\\\u0002\u0002",
    "\u06a2\u06a8\u0007\u00cb\u0002\u0002\u06a3\u06a4\u00074\u0002\u0002",
    "\u06a4\u06a6\u0005<\u001f\u0002\u06a5\u06a7\u0005\u0016\f\u0002\u06a6",
    "\u06a5\u0003\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002\u0002\u0002\u06a7",
    "\u06a9\u0003\u0002\u0002\u0002\u06a8\u06a3\u0003\u0002\u0002\u0002\u06a8",
    "\u06a9\u0003\u0002\u0002\u0002\u06a9\u06aa\u0003\u0002\u0002\u0002\u06aa",
    "\u06ac\u0005\u0122\u0092\u0002\u06ab\u068e\u0003\u0002\u0002\u0002\u06ab",
    "\u069c\u0003\u0002\u0002\u0002\u06ac\u0193\u0003\u0002\u0002\u0002\u00bc",
    "\u0196\u019e\u01a6\u01aa\u01b1\u01b7\u01c1\u01c4\u01cf\u01d2\u01d5\u01d9",
    "\u01e0\u01e3\u01e6\u01eb\u01f3\u0204\u0219\u022a\u0237\u023b\u023d\u024a",
    "\u0251\u0269\u0270\u0281\u0285\u028b\u0290\u0295\u02ad\u02b3\u02b7\u02bc",
    "\u02c1\u02c5\u02c8\u02d1\u02d6\u02da\u02e0\u02e6\u02eb\u02ef\u02f1\u02f5",
    "\u02f9\u02fb\u02ff\u0303\u0307\u030b\u0316\u031a\u0322\u032c\u033d\u0341",
    "\u0345\u034a\u034c\u0350\u0355\u0359\u035b\u035f\u036c\u0373\u037f\u0381",
    "\u0386\u03a8\u03ac\u03b0\u03b7\u03ba\u03c2\u03c5\u03d8\u03e8\u03ed\u03f4",
    "\u03fc\u0400\u040a\u0414\u0418\u0428\u042e\u0437\u043e\u0448\u044b\u044e",
    "\u0455\u0460\u0468\u046e\u0472\u0476\u047e\u0482\u048a\u0492\u0496\u049a",
    "\u049d\u04a0\u04a3\u04a6\u04b0\u04b5\u04bb\u04c1\u04c9\u04d0\u04d7\u04df",
    "\u04ea\u04ee\u04f4\u0500\u0503\u0509\u050d\u0514\u0516\u051d\u0530\u0537",
    "\u053e\u0545\u055d\u0564\u056a\u056e\u0572\u0577\u057c\u0582\u0586\u058a",
    "\u058f\u0594\u059b\u059f\u05a6\u05ad\u05af\u05b3\u05b7\u05be\u05c3\u05c7",
    "\u05cb\u05d4\u05d9\u05e2\u05f5\u0601\u0605\u060d\u0617\u061e\u0626\u062a",
    "\u0632\u0639\u0644\u064b\u0655\u065e\u0666\u066d\u0679\u067e\u0681\u068c",
    "\u0690\u0698\u069e\u06a6\u06a8\u06ab"].join("");


var literalNames = [ 'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     "'~'", "'!~'", "'~*'", "'!~*'", 'null', "':='", "'='", 
                     "':'", "';'", "','", 'null', 'null', "'<'", "'<='", 
                     "'>'", "'>='", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
                     "'%'", "'.'", "'_'", "'|'", "'''", "'\"'", 'null', 
                     'null', 'null', 'null', 'null', 'null', "' '" ];

var symbolicNames = [ 'null', "AS", "ALL", "AND", "ANY", "ASYMMETRIC", "ASC", 
                      "BOTH", "CASE", "CAST", "CREATE", "CROSS", "DESC", 
                      "DISTINCT", "END", "ELSE", "EXCEPT", "FALSE", "FULL", 
                      "FROM", "GROUP", "HAVING", "ILIKE", "IN", "INNER", 
                      "INTERSECT", "INTO", "IS", "JOIN", "LEADING", "LEFT", 
                      "LIKE", "LIMIT", "NATURAL", "NOT", "NULL", "ON", "OUTER", 
                      "OR", "ORDER", "RIGHT", "SELECT", "SOME", "SYMMETRIC", 
                      "TABLE", "THEN", "TRAILING", "TRUE", "UNION", "UNIQUE", 
                      "USING", "WHEN", "WHERE", "WITH", "AVG", "BETWEEN", 
                      "BY", "CENTURY", "CHARACTER", "COLLECT", "COALESCE", 
                      "COLUMN", "COUNT", "CUBE", "DAY", "DEC", "DECADE", 
                      "DOW", "DOY", "DROP", "EPOCH", "EVERY", "EXISTS", 
                      "EXTERNAL", "EXTRACT", "FILTER", "FIRST", "FORMAT", 
                      "FUSION", "GROUPING", "HASH", "HOUR", "INDEX", "INSERT", 
                      "INTERSECTION", "ISODOW", "ISOYEAR", "LAST", "LESS", 
                      "LIST", "LOCATION", "MAX", "MAXVALUE", "MICROSECONDS", 
                      "MILLENNIUM", "MILLISECONDS", "MIN", "MINUTE", "MONTH", 
                      "NATIONAL", "NULLIF", "OVERWRITE", "PARTITION", "PARTITIONS", 
                      "PRECISION", "PURGE", "QUARTER", "RANGE", "REGEXP", 
                      "RLIKE", "ROLLUP", "SECOND", "SET", "SIMILAR", "STDDEV_POP", 
                      "STDDEV_SAMP", "SUBPARTITION", "SUM", "TABLESPACE", 
                      "THAN", "TIMEZONE", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                      "TRIM", "TO", "UNKNOWN", "VALUES", "VAR_SAMP", "VAR_POP", 
                      "VARYING", "WEEK", "YEAR", "ZONE", "BOOLEAN", "BOOL", 
                      "BIT", "VARBIT", "INT1", "INT2", "INT4", "INT8", "TINYINT", 
                      "SMALLINT", "INT", "INTEGER", "BIGINT", "FLOAT4", 
                      "FLOAT8", "REAL", "FLOAT", "DOUBLE", "NUMERIC", "DECIMAL", 
                      "CHAR", "VARCHAR", "NCHAR", "NVARCHAR", "DATE", "TIME", 
                      "TIMETZ", "TIMESTAMP", "TIMESTAMPTZ", "TEXT", "BINARY", 
                      "VARBINARY", "BLOB", "BYTEA", "INET4", "Similar_To", 
                      "Not_Similar_To", "Similar_To_Case_Insensitive", "Not_Similar_To_Case_Insensitive", 
                      "CAST_EXPRESSION", "ASSIGN", "EQUAL", "COLON", "SEMI_COLON", 
                      "COMMA", "CONCATENATION_OPERATOR", "NOT_EQUAL", "LTH", 
                      "LEQ", "GTH", "GEQ", "LEFT_PAREN", "RIGHT_PAREN", 
                      "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULAR", 
                      "DOT", "UNDERLINE", "VERTICAL_BAR", "QUOTE", "DOUBLE_QUOTE", 
                      "NUMBER", "REAL_NUMBER", "BlockComment", "LineComment", 
                      "Identifier", "Character_String_Literal", "Space", 
                      "White_Space", "BAD" ];

var ruleNames =  [ "sql", "statement", "data_statement", "data_change_statement", 
                   "schema_statement", "index_statement", "create_table_statement", 
                   "table_elements", "field_element", "field_type", "param_clause", 
                   "param", "method_specifier", "table_space_specifier", 
                   "table_space_name", "table_partitioning_clauses", "range_partitions", 
                   "range_value_clause_list", "range_value_clause", "hash_partitions", 
                   "individual_hash_partitions", "individual_hash_partition", 
                   "hash_partitions_by_quantity", "list_partitions", "list_value_clause_list", 
                   "list_value_partition", "column_partitions", "partition_name", 
                   "drop_table_statement", "identifier", "nonreserved_keywords", 
                   "unsigned_literal", "general_literal", "datetime_literal", 
                   "time_literal", "timestamp_literal", "date_literal", 
                   "boolean_literal", "data_type", "predefined_type", "network_type", 
                   "character_string_type", "type_length", "national_character_string_type", 
                   "binary_large_object_string_type", "numeric_type", "exact_numeric_type", 
                   "approximate_numeric_type", "precision_param", "boolean_type", 
                   "datetime_type", "bit_type", "binary_type", "value_expression_primary", 
                   "parenthesized_value_expression", "nonparenthesized_value_expression_primary", 
                   "unsigned_value_specification", "unsigned_numeric_literal", 
                   "signed_numerical_literal", "set_function_specification", 
                   "aggregate_function", "general_set_function", "set_function_type", 
                   "filter_clause", "grouping_operation", "case_expression", 
                   "case_abbreviation", "case_specification", "simple_case", 
                   "searched_case", "simple_when_clause", "searched_when_clause", 
                   "else_clause", "result", "cast_specification", "cast_operand", 
                   "cast_target", "value_expression", "common_value_expression", 
                   "numeric_value_expression", "term", "factor", "array", 
                   "numeric_primary", "sign", "numeric_value_function", 
                   "extract_expression", "extract_field", "time_zone_field", 
                   "extract_source", "string_value_expression", "character_value_expression", 
                   "character_factor", "character_primary", "string_value_function", 
                   "trim_function", "trim_operands", "trim_specification", 
                   "boolean_value_expression", "or_predicate", "and_predicate", 
                   "boolean_factor", "boolean_test", "is_clause", "truth_value", 
                   "boolean_primary", "boolean_predicand", "parenthesized_boolean_value_expression", 
                   "row_value_expression", "row_value_special_case", "explicit_row_value_constructor", 
                   "row_value_predicand", "row_value_constructor_predicand", 
                   "table_expression", "from_clause", "table_reference_list", 
                   "table_reference", "joined_table", "joined_table_primary", 
                   "cross_join", "qualified_join", "natural_join", "union_join", 
                   "join_type", "outer_join_type", "outer_join_type_part2", 
                   "join_specification", "join_condition", "named_columns_join", 
                   "table_primary", "column_name_list", "derived_table", 
                   "where_clause", "search_condition", "groupby_clause", 
                   "grouping_element_list", "grouping_element", "ordinary_grouping_set", 
                   "ordinary_grouping_set_list", "rollup_list", "cube_list", 
                   "empty_grouping_set", "having_clause", "row_value_predicand_list", 
                   "query_expression", "query_expression_body", "non_join_query_expression", 
                   "query_term", "non_join_query_term", "query_primary", 
                   "non_join_query_primary", "simple_table", "explicit_table", 
                   "table_or_query_name", "table_name", "query_specification", 
                   "select_list", "select_sublist", "derived_column", "qualified_asterisk", 
                   "set_qualifier", "column_reference", "as_clause", "column_reference_list", 
                   "scalar_subquery", "row_subquery", "table_subquery", 
                   "subquery", "predicate", "comparison_predicate", "comp_op", 
                   "between_predicate", "between_predicate_part_2", "in_predicate", 
                   "in_predicate_value", "in_value_list", "pattern_matching_predicate", 
                   "pattern_matcher", "negativable_matcher", "regex_matcher", 
                   "null_predicate", "quantified_comparison_predicate", 
                   "quantifier", "all", "some", "exists_predicate", "unique_predicate", 
                   "primary_datetime_field", "non_second_primary_datetime_field", 
                   "extended_datetime_field", "routine_invocation", "function_names_for_reserved_words", 
                   "function_name", "sql_argument_list", "orderby_clause", 
                   "sort_specifier_list", "sort_specifier", "order_specification", 
                   "limit_clause", "null_ordering", "insert_statement" ];

function SQLParser (input) {
    //NOTE: changed by SIREn Solutions
    var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
    var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });
    var sharedContextCache = new antlr4.PredictionContextCache();
    this.atn = atn;
    // end changes

	  antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;


    return this;
}

SQLParser.prototype = Object.create(antlr4.Parser.prototype);
SQLParser.prototype.constructor = SQLParser;

//NOTE changed by SIREn Solutions
/*
Object.defineProperty(SQLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});
*/

SQLParser.EOF = antlr4.Token.EOF;
SQLParser.AS = 1;
SQLParser.ALL = 2;
SQLParser.AND = 3;
SQLParser.ANY = 4;
SQLParser.ASYMMETRIC = 5;
SQLParser.ASC = 6;
SQLParser.BOTH = 7;
SQLParser.CASE = 8;
SQLParser.CAST = 9;
SQLParser.CREATE = 10;
SQLParser.CROSS = 11;
SQLParser.DESC = 12;
SQLParser.DISTINCT = 13;
SQLParser.END = 14;
SQLParser.ELSE = 15;
SQLParser.EXCEPT = 16;
SQLParser.FALSE = 17;
SQLParser.FULL = 18;
SQLParser.FROM = 19;
SQLParser.GROUP = 20;
SQLParser.HAVING = 21;
SQLParser.ILIKE = 22;
SQLParser.IN = 23;
SQLParser.INNER = 24;
SQLParser.INTERSECT = 25;
SQLParser.INTO = 26;
SQLParser.IS = 27;
SQLParser.JOIN = 28;
SQLParser.LEADING = 29;
SQLParser.LEFT = 30;
SQLParser.LIKE = 31;
SQLParser.LIMIT = 32;
SQLParser.NATURAL = 33;
SQLParser.NOT = 34;
SQLParser.NULL = 35;
SQLParser.ON = 36;
SQLParser.OUTER = 37;
SQLParser.OR = 38;
SQLParser.ORDER = 39;
SQLParser.RIGHT = 40;
SQLParser.SELECT = 41;
SQLParser.SOME = 42;
SQLParser.SYMMETRIC = 43;
SQLParser.TABLE = 44;
SQLParser.THEN = 45;
SQLParser.TRAILING = 46;
SQLParser.TRUE = 47;
SQLParser.UNION = 48;
SQLParser.UNIQUE = 49;
SQLParser.USING = 50;
SQLParser.WHEN = 51;
SQLParser.WHERE = 52;
SQLParser.WITH = 53;
SQLParser.AVG = 54;
SQLParser.BETWEEN = 55;
SQLParser.BY = 56;
SQLParser.CENTURY = 57;
SQLParser.CHARACTER = 58;
SQLParser.COLLECT = 59;
SQLParser.COALESCE = 60;
SQLParser.COLUMN = 61;
SQLParser.COUNT = 62;
SQLParser.CUBE = 63;
SQLParser.DAY = 64;
SQLParser.DEC = 65;
SQLParser.DECADE = 66;
SQLParser.DOW = 67;
SQLParser.DOY = 68;
SQLParser.DROP = 69;
SQLParser.EPOCH = 70;
SQLParser.EVERY = 71;
SQLParser.EXISTS = 72;
SQLParser.EXTERNAL = 73;
SQLParser.EXTRACT = 74;
SQLParser.FILTER = 75;
SQLParser.FIRST = 76;
SQLParser.FORMAT = 77;
SQLParser.FUSION = 78;
SQLParser.GROUPING = 79;
SQLParser.HASH = 80;
SQLParser.HOUR = 81;
SQLParser.INDEX = 82;
SQLParser.INSERT = 83;
SQLParser.INTERSECTION = 84;
SQLParser.ISODOW = 85;
SQLParser.ISOYEAR = 86;
SQLParser.LAST = 87;
SQLParser.LESS = 88;
SQLParser.LIST = 89;
SQLParser.LOCATION = 90;
SQLParser.MAX = 91;
SQLParser.MAXVALUE = 92;
SQLParser.MICROSECONDS = 93;
SQLParser.MILLENNIUM = 94;
SQLParser.MILLISECONDS = 95;
SQLParser.MIN = 96;
SQLParser.MINUTE = 97;
SQLParser.MONTH = 98;
SQLParser.NATIONAL = 99;
SQLParser.NULLIF = 100;
SQLParser.OVERWRITE = 101;
SQLParser.PARTITION = 102;
SQLParser.PARTITIONS = 103;
SQLParser.PRECISION = 104;
SQLParser.PURGE = 105;
SQLParser.QUARTER = 106;
SQLParser.RANGE = 107;
SQLParser.REGEXP = 108;
SQLParser.RLIKE = 109;
SQLParser.ROLLUP = 110;
SQLParser.SECOND = 111;
SQLParser.SET = 112;
SQLParser.SIMILAR = 113;
SQLParser.STDDEV_POP = 114;
SQLParser.STDDEV_SAMP = 115;
SQLParser.SUBPARTITION = 116;
SQLParser.SUM = 117;
SQLParser.TABLESPACE = 118;
SQLParser.THAN = 119;
SQLParser.TIMEZONE = 120;
SQLParser.TIMEZONE_HOUR = 121;
SQLParser.TIMEZONE_MINUTE = 122;
SQLParser.TRIM = 123;
SQLParser.TO = 124;
SQLParser.UNKNOWN = 125;
SQLParser.VALUES = 126;
SQLParser.VAR_SAMP = 127;
SQLParser.VAR_POP = 128;
SQLParser.VARYING = 129;
SQLParser.WEEK = 130;
SQLParser.YEAR = 131;
SQLParser.ZONE = 132;
SQLParser.BOOLEAN = 133;
SQLParser.BOOL = 134;
SQLParser.BIT = 135;
SQLParser.VARBIT = 136;
SQLParser.INT1 = 137;
SQLParser.INT2 = 138;
SQLParser.INT4 = 139;
SQLParser.INT8 = 140;
SQLParser.TINYINT = 141;
SQLParser.SMALLINT = 142;
SQLParser.INT = 143;
SQLParser.INTEGER = 144;
SQLParser.BIGINT = 145;
SQLParser.FLOAT4 = 146;
SQLParser.FLOAT8 = 147;
SQLParser.REAL = 148;
SQLParser.FLOAT = 149;
SQLParser.DOUBLE = 150;
SQLParser.NUMERIC = 151;
SQLParser.DECIMAL = 152;
SQLParser.CHAR = 153;
SQLParser.VARCHAR = 154;
SQLParser.NCHAR = 155;
SQLParser.NVARCHAR = 156;
SQLParser.DATE = 157;
SQLParser.TIME = 158;
SQLParser.TIMETZ = 159;
SQLParser.TIMESTAMP = 160;
SQLParser.TIMESTAMPTZ = 161;
SQLParser.TEXT = 162;
SQLParser.BINARY = 163;
SQLParser.VARBINARY = 164;
SQLParser.BLOB = 165;
SQLParser.BYTEA = 166;
SQLParser.INET4 = 167;
SQLParser.Similar_To = 168;
SQLParser.Not_Similar_To = 169;
SQLParser.Similar_To_Case_Insensitive = 170;
SQLParser.Not_Similar_To_Case_Insensitive = 171;
SQLParser.CAST_EXPRESSION = 172;
SQLParser.ASSIGN = 173;
SQLParser.EQUAL = 174;
SQLParser.COLON = 175;
SQLParser.SEMI_COLON = 176;
SQLParser.COMMA = 177;
SQLParser.CONCATENATION_OPERATOR = 178;
SQLParser.NOT_EQUAL = 179;
SQLParser.LTH = 180;
SQLParser.LEQ = 181;
SQLParser.GTH = 182;
SQLParser.GEQ = 183;
SQLParser.LEFT_PAREN = 184;
SQLParser.RIGHT_PAREN = 185;
SQLParser.PLUS = 186;
SQLParser.MINUS = 187;
SQLParser.MULTIPLY = 188;
SQLParser.DIVIDE = 189;
SQLParser.MODULAR = 190;
SQLParser.DOT = 191;
SQLParser.UNDERLINE = 192;
SQLParser.VERTICAL_BAR = 193;
SQLParser.QUOTE = 194;
SQLParser.DOUBLE_QUOTE = 195;
SQLParser.NUMBER = 196;
SQLParser.REAL_NUMBER = 197;
SQLParser.BlockComment = 198;
SQLParser.LineComment = 199;
SQLParser.Identifier = 200;
SQLParser.Character_String_Literal = 201;
SQLParser.Space = 202;
SQLParser.White_Space = 203;
SQLParser.BAD = 204;

SQLParser.RULE_sql = 0;
SQLParser.RULE_statement = 1;
SQLParser.RULE_data_statement = 2;
SQLParser.RULE_data_change_statement = 3;
SQLParser.RULE_schema_statement = 4;
SQLParser.RULE_index_statement = 5;
SQLParser.RULE_create_table_statement = 6;
SQLParser.RULE_table_elements = 7;
SQLParser.RULE_field_element = 8;
SQLParser.RULE_field_type = 9;
SQLParser.RULE_param_clause = 10;
SQLParser.RULE_param = 11;
SQLParser.RULE_method_specifier = 12;
SQLParser.RULE_table_space_specifier = 13;
SQLParser.RULE_table_space_name = 14;
SQLParser.RULE_table_partitioning_clauses = 15;
SQLParser.RULE_range_partitions = 16;
SQLParser.RULE_range_value_clause_list = 17;
SQLParser.RULE_range_value_clause = 18;
SQLParser.RULE_hash_partitions = 19;
SQLParser.RULE_individual_hash_partitions = 20;
SQLParser.RULE_individual_hash_partition = 21;
SQLParser.RULE_hash_partitions_by_quantity = 22;
SQLParser.RULE_list_partitions = 23;
SQLParser.RULE_list_value_clause_list = 24;
SQLParser.RULE_list_value_partition = 25;
SQLParser.RULE_column_partitions = 26;
SQLParser.RULE_partition_name = 27;
SQLParser.RULE_drop_table_statement = 28;
SQLParser.RULE_identifier = 29;
SQLParser.RULE_nonreserved_keywords = 30;
SQLParser.RULE_unsigned_literal = 31;
SQLParser.RULE_general_literal = 32;
SQLParser.RULE_datetime_literal = 33;
SQLParser.RULE_time_literal = 34;
SQLParser.RULE_timestamp_literal = 35;
SQLParser.RULE_date_literal = 36;
SQLParser.RULE_boolean_literal = 37;
SQLParser.RULE_data_type = 38;
SQLParser.RULE_predefined_type = 39;
SQLParser.RULE_network_type = 40;
SQLParser.RULE_character_string_type = 41;
SQLParser.RULE_type_length = 42;
SQLParser.RULE_national_character_string_type = 43;
SQLParser.RULE_binary_large_object_string_type = 44;
SQLParser.RULE_numeric_type = 45;
SQLParser.RULE_exact_numeric_type = 46;
SQLParser.RULE_approximate_numeric_type = 47;
SQLParser.RULE_precision_param = 48;
SQLParser.RULE_boolean_type = 49;
SQLParser.RULE_datetime_type = 50;
SQLParser.RULE_bit_type = 51;
SQLParser.RULE_binary_type = 52;
SQLParser.RULE_value_expression_primary = 53;
SQLParser.RULE_parenthesized_value_expression = 54;
SQLParser.RULE_nonparenthesized_value_expression_primary = 55;
SQLParser.RULE_unsigned_value_specification = 56;
SQLParser.RULE_unsigned_numeric_literal = 57;
SQLParser.RULE_signed_numerical_literal = 58;
SQLParser.RULE_set_function_specification = 59;
SQLParser.RULE_aggregate_function = 60;
SQLParser.RULE_general_set_function = 61;
SQLParser.RULE_set_function_type = 62;
SQLParser.RULE_filter_clause = 63;
SQLParser.RULE_grouping_operation = 64;
SQLParser.RULE_case_expression = 65;
SQLParser.RULE_case_abbreviation = 66;
SQLParser.RULE_case_specification = 67;
SQLParser.RULE_simple_case = 68;
SQLParser.RULE_searched_case = 69;
SQLParser.RULE_simple_when_clause = 70;
SQLParser.RULE_searched_when_clause = 71;
SQLParser.RULE_else_clause = 72;
SQLParser.RULE_result = 73;
SQLParser.RULE_cast_specification = 74;
SQLParser.RULE_cast_operand = 75;
SQLParser.RULE_cast_target = 76;
SQLParser.RULE_value_expression = 77;
SQLParser.RULE_common_value_expression = 78;
SQLParser.RULE_numeric_value_expression = 79;
SQLParser.RULE_term = 80;
SQLParser.RULE_factor = 81;
SQLParser.RULE_array = 82;
SQLParser.RULE_numeric_primary = 83;
SQLParser.RULE_sign = 84;
SQLParser.RULE_numeric_value_function = 85;
SQLParser.RULE_extract_expression = 86;
SQLParser.RULE_extract_field = 87;
SQLParser.RULE_time_zone_field = 88;
SQLParser.RULE_extract_source = 89;
SQLParser.RULE_string_value_expression = 90;
SQLParser.RULE_character_value_expression = 91;
SQLParser.RULE_character_factor = 92;
SQLParser.RULE_character_primary = 93;
SQLParser.RULE_string_value_function = 94;
SQLParser.RULE_trim_function = 95;
SQLParser.RULE_trim_operands = 96;
SQLParser.RULE_trim_specification = 97;
SQLParser.RULE_boolean_value_expression = 98;
SQLParser.RULE_or_predicate = 99;
SQLParser.RULE_and_predicate = 100;
SQLParser.RULE_boolean_factor = 101;
SQLParser.RULE_boolean_test = 102;
SQLParser.RULE_is_clause = 103;
SQLParser.RULE_truth_value = 104;
SQLParser.RULE_boolean_primary = 105;
SQLParser.RULE_boolean_predicand = 106;
SQLParser.RULE_parenthesized_boolean_value_expression = 107;
SQLParser.RULE_row_value_expression = 108;
SQLParser.RULE_row_value_special_case = 109;
SQLParser.RULE_explicit_row_value_constructor = 110;
SQLParser.RULE_row_value_predicand = 111;
SQLParser.RULE_row_value_constructor_predicand = 112;
SQLParser.RULE_table_expression = 113;
SQLParser.RULE_from_clause = 114;
SQLParser.RULE_table_reference_list = 115;
SQLParser.RULE_table_reference = 116;
SQLParser.RULE_joined_table = 117;
SQLParser.RULE_joined_table_primary = 118;
SQLParser.RULE_cross_join = 119;
SQLParser.RULE_qualified_join = 120;
SQLParser.RULE_natural_join = 121;
SQLParser.RULE_union_join = 122;
SQLParser.RULE_join_type = 123;
SQLParser.RULE_outer_join_type = 124;
SQLParser.RULE_outer_join_type_part2 = 125;
SQLParser.RULE_join_specification = 126;
SQLParser.RULE_join_condition = 127;
SQLParser.RULE_named_columns_join = 128;
SQLParser.RULE_table_primary = 129;
SQLParser.RULE_column_name_list = 130;
SQLParser.RULE_derived_table = 131;
SQLParser.RULE_where_clause = 132;
SQLParser.RULE_search_condition = 133;
SQLParser.RULE_groupby_clause = 134;
SQLParser.RULE_grouping_element_list = 135;
SQLParser.RULE_grouping_element = 136;
SQLParser.RULE_ordinary_grouping_set = 137;
SQLParser.RULE_ordinary_grouping_set_list = 138;
SQLParser.RULE_rollup_list = 139;
SQLParser.RULE_cube_list = 140;
SQLParser.RULE_empty_grouping_set = 141;
SQLParser.RULE_having_clause = 142;
SQLParser.RULE_row_value_predicand_list = 143;
SQLParser.RULE_query_expression = 144;
SQLParser.RULE_query_expression_body = 145;
SQLParser.RULE_non_join_query_expression = 146;
SQLParser.RULE_query_term = 147;
SQLParser.RULE_non_join_query_term = 148;
SQLParser.RULE_query_primary = 149;
SQLParser.RULE_non_join_query_primary = 150;
SQLParser.RULE_simple_table = 151;
SQLParser.RULE_explicit_table = 152;
SQLParser.RULE_table_or_query_name = 153;
SQLParser.RULE_table_name = 154;
SQLParser.RULE_query_specification = 155;
SQLParser.RULE_select_list = 156;
SQLParser.RULE_select_sublist = 157;
SQLParser.RULE_derived_column = 158;
SQLParser.RULE_qualified_asterisk = 159;
SQLParser.RULE_set_qualifier = 160;
SQLParser.RULE_column_reference = 161;
SQLParser.RULE_as_clause = 162;
SQLParser.RULE_column_reference_list = 163;
SQLParser.RULE_scalar_subquery = 164;
SQLParser.RULE_row_subquery = 165;
SQLParser.RULE_table_subquery = 166;
SQLParser.RULE_subquery = 167;
SQLParser.RULE_predicate = 168;
SQLParser.RULE_comparison_predicate = 169;
SQLParser.RULE_comp_op = 170;
SQLParser.RULE_between_predicate = 171;
SQLParser.RULE_between_predicate_part_2 = 172;
SQLParser.RULE_in_predicate = 173;
SQLParser.RULE_in_predicate_value = 174;
SQLParser.RULE_in_value_list = 175;
SQLParser.RULE_pattern_matching_predicate = 176;
SQLParser.RULE_pattern_matcher = 177;
SQLParser.RULE_negativable_matcher = 178;
SQLParser.RULE_regex_matcher = 179;
SQLParser.RULE_null_predicate = 180;
SQLParser.RULE_quantified_comparison_predicate = 181;
SQLParser.RULE_quantifier = 182;
SQLParser.RULE_all = 183;
SQLParser.RULE_some = 184;
SQLParser.RULE_exists_predicate = 185;
SQLParser.RULE_unique_predicate = 186;
SQLParser.RULE_primary_datetime_field = 187;
SQLParser.RULE_non_second_primary_datetime_field = 188;
SQLParser.RULE_extended_datetime_field = 189;
SQLParser.RULE_routine_invocation = 190;
SQLParser.RULE_function_names_for_reserved_words = 191;
SQLParser.RULE_function_name = 192;
SQLParser.RULE_sql_argument_list = 193;
SQLParser.RULE_orderby_clause = 194;
SQLParser.RULE_sort_specifier_list = 195;
SQLParser.RULE_sort_specifier = 196;
SQLParser.RULE_order_specification = 197;
SQLParser.RULE_limit_clause = 198;
SQLParser.RULE_null_ordering = 199;
SQLParser.RULE_insert_statement = 200;

function SqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sql;
    return this;
}

SqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlContext.prototype.constructor = SqlContext;

SqlContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SqlContext.prototype.EOF = function() {
    return this.getToken(SQLParser.EOF, 0);
};

SqlContext.prototype.SEMI_COLON = function() {
    return this.getToken(SQLParser.SEMI_COLON, 0);
};

SqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSql(this);
	}
};

SqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSql(this);
	}
};

SqlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSql(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.SqlContext = SqlContext;

SQLParser.prototype.sql = function() {

    var localctx = new SqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SQLParser.RULE_sql);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 402;
        this.statement();
        this.state = 404;
        _la = this._input.LA(1);
        if(_la===SQLParser.SEMI_COLON) {
            this.state = 403;
            this.match(SQLParser.SEMI_COLON);
        }

        this.state = 406;
        this.match(SQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.data_statement = function() {
    return this.getTypedRuleContext(Data_statementContext,0);
};

StatementContext.prototype.data_change_statement = function() {
    return this.getTypedRuleContext(Data_change_statementContext,0);
};

StatementContext.prototype.schema_statement = function() {
    return this.getTypedRuleContext(Schema_statementContext,0);
};

StatementContext.prototype.index_statement = function() {
    return this.getTypedRuleContext(Index_statementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.StatementContext = StatementContext;

SQLParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SQLParser.RULE_statement);
    try {
        this.state = 412;
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 408;
            this.data_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 409;
            this.data_change_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 410;
            this.schema_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 411;
            this.index_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_data_statement;
    return this;
}

Data_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_statementContext.prototype.constructor = Data_statementContext;

Data_statementContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Data_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterData_statement(this);
	}
};

Data_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitData_statement(this);
	}
};

Data_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitData_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Data_statementContext = Data_statementContext;

SQLParser.prototype.data_statement = function() {

    var localctx = new Data_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SQLParser.RULE_data_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this.query_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_change_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_data_change_statement;
    return this;
}

Data_change_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_change_statementContext.prototype.constructor = Data_change_statementContext;

Data_change_statementContext.prototype.insert_statement = function() {
    return this.getTypedRuleContext(Insert_statementContext,0);
};

Data_change_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterData_change_statement(this);
	}
};

Data_change_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitData_change_statement(this);
	}
};

Data_change_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitData_change_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Data_change_statementContext = Data_change_statementContext;

SQLParser.prototype.data_change_statement = function() {

    var localctx = new Data_change_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SQLParser.RULE_data_change_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.insert_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Schema_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_schema_statement;
    return this;
}

Schema_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Schema_statementContext.prototype.constructor = Schema_statementContext;

Schema_statementContext.prototype.create_table_statement = function() {
    return this.getTypedRuleContext(Create_table_statementContext,0);
};

Schema_statementContext.prototype.drop_table_statement = function() {
    return this.getTypedRuleContext(Drop_table_statementContext,0);
};

Schema_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSchema_statement(this);
	}
};

Schema_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSchema_statement(this);
	}
};

Schema_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSchema_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Schema_statementContext = Schema_statementContext;

SQLParser.prototype.schema_statement = function() {

    var localctx = new Schema_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SQLParser.RULE_schema_statement);
    try {
        this.state = 420;
        switch(this._input.LA(1)) {
        case SQLParser.CREATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 418;
            this.create_table_statement();
            break;
        case SQLParser.DROP:
            this.enterOuterAlt(localctx, 2);
            this.state = 419;
            this.drop_table_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_index_statement;
    this.u = null; // Token
    this.n = null; // IdentifierContext
    this.t = null; // Table_nameContext
    this.m = null; // Method_specifierContext
    this.s = null; // Sort_specifier_listContext
    this.p = null; // Param_clauseContext
    return this;
}

Index_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_statementContext.prototype.constructor = Index_statementContext;

Index_statementContext.prototype.CREATE = function() {
    return this.getToken(SQLParser.CREATE, 0);
};

Index_statementContext.prototype.INDEX = function() {
    return this.getToken(SQLParser.INDEX, 0);
};

Index_statementContext.prototype.ON = function() {
    return this.getToken(SQLParser.ON, 0);
};

Index_statementContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Index_statementContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Index_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Index_statementContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Index_statementContext.prototype.sort_specifier_list = function() {
    return this.getTypedRuleContext(Sort_specifier_listContext,0);
};

Index_statementContext.prototype.UNIQUE = function() {
    return this.getToken(SQLParser.UNIQUE, 0);
};

Index_statementContext.prototype.method_specifier = function() {
    return this.getTypedRuleContext(Method_specifierContext,0);
};

Index_statementContext.prototype.param_clause = function() {
    return this.getTypedRuleContext(Param_clauseContext,0);
};

Index_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIndex_statement(this);
	}
};

Index_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIndex_statement(this);
	}
};

Index_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIndex_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Index_statementContext = Index_statementContext;

SQLParser.prototype.index_statement = function() {

    var localctx = new Index_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SQLParser.RULE_index_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 422;
        this.match(SQLParser.CREATE);
        this.state = 424;
        _la = this._input.LA(1);
        if(_la===SQLParser.UNIQUE) {
            this.state = 423;
            localctx.u = this.match(SQLParser.UNIQUE);
        }

        this.state = 426;
        this.match(SQLParser.INDEX);
        this.state = 427;
        localctx.n = this.identifier();
        this.state = 428;
        this.match(SQLParser.ON);
        this.state = 429;
        localctx.t = this.table_name();
        this.state = 431;
        _la = this._input.LA(1);
        if(_la===SQLParser.USING) {
            this.state = 430;
            localctx.m = this.method_specifier();
        }

        this.state = 433;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 434;
        localctx.s = this.sort_specifier_list();
        this.state = 435;
        this.match(SQLParser.RIGHT_PAREN);
        this.state = 437;
        _la = this._input.LA(1);
        if(_la===SQLParser.WITH) {
            this.state = 436;
            localctx.p = this.param_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_table_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_create_table_statement;
    this.file_type = null; // IdentifierContext
    this.path = null; // Token
    return this;
}

Create_table_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_table_statementContext.prototype.constructor = Create_table_statementContext;

Create_table_statementContext.prototype.CREATE = function() {
    return this.getToken(SQLParser.CREATE, 0);
};

Create_table_statementContext.prototype.EXTERNAL = function() {
    return this.getToken(SQLParser.EXTERNAL, 0);
};

Create_table_statementContext.prototype.TABLE = function() {
    return this.getToken(SQLParser.TABLE, 0);
};

Create_table_statementContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_table_statementContext.prototype.table_elements = function() {
    return this.getTypedRuleContext(Table_elementsContext,0);
};

Create_table_statementContext.prototype.USING = function() {
    return this.getToken(SQLParser.USING, 0);
};

Create_table_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Create_table_statementContext.prototype.LOCATION = function() {
    return this.getToken(SQLParser.LOCATION, 0);
};

Create_table_statementContext.prototype.param_clause = function() {
    return this.getTypedRuleContext(Param_clauseContext,0);
};

Create_table_statementContext.prototype.table_partitioning_clauses = function() {
    return this.getTypedRuleContext(Table_partitioning_clausesContext,0);
};

Create_table_statementContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Create_table_statementContext.prototype.AS = function() {
    return this.getToken(SQLParser.AS, 0);
};

Create_table_statementContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Create_table_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCreate_table_statement(this);
	}
};

Create_table_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCreate_table_statement(this);
	}
};

Create_table_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCreate_table_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Create_table_statementContext = Create_table_statementContext;

SQLParser.prototype.create_table_statement = function() {

    var localctx = new Create_table_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SQLParser.RULE_create_table_statement);
    var _la = 0; // Token type
    try {
        this.state = 489;
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 439;
            this.match(SQLParser.CREATE);
            this.state = 440;
            this.match(SQLParser.EXTERNAL);
            this.state = 441;
            this.match(SQLParser.TABLE);
            this.state = 442;
            this.table_name();
            this.state = 443;
            this.table_elements();
            this.state = 444;
            this.match(SQLParser.USING);
            this.state = 445;
            localctx.file_type = this.identifier();
            this.state = 447;
            _la = this._input.LA(1);
            if(_la===SQLParser.WITH) {
                this.state = 446;
                this.param_clause();
            }

            this.state = 450;
            _la = this._input.LA(1);
            if(_la===SQLParser.PARTITION) {
                this.state = 449;
                this.table_partitioning_clauses();
            }

            this.state = 452;
            this.match(SQLParser.LOCATION);
            this.state = 453;
            localctx.path = this.match(SQLParser.Character_String_Literal);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 455;
            this.match(SQLParser.CREATE);
            this.state = 456;
            this.match(SQLParser.TABLE);
            this.state = 457;
            this.table_name();
            this.state = 458;
            this.table_elements();
            this.state = 461;
            _la = this._input.LA(1);
            if(_la===SQLParser.USING) {
                this.state = 459;
                this.match(SQLParser.USING);
                this.state = 460;
                localctx.file_type = this.identifier();
            }

            this.state = 464;
            _la = this._input.LA(1);
            if(_la===SQLParser.WITH) {
                this.state = 463;
                this.param_clause();
            }

            this.state = 467;
            _la = this._input.LA(1);
            if(_la===SQLParser.PARTITION) {
                this.state = 466;
                this.table_partitioning_clauses();
            }

            this.state = 471;
            _la = this._input.LA(1);
            if(_la===SQLParser.AS) {
                this.state = 469;
                this.match(SQLParser.AS);
                this.state = 470;
                this.query_expression();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 473;
            this.match(SQLParser.CREATE);
            this.state = 474;
            this.match(SQLParser.TABLE);
            this.state = 475;
            this.table_name();
            this.state = 478;
            _la = this._input.LA(1);
            if(_la===SQLParser.USING) {
                this.state = 476;
                this.match(SQLParser.USING);
                this.state = 477;
                localctx.file_type = this.identifier();
            }

            this.state = 481;
            _la = this._input.LA(1);
            if(_la===SQLParser.WITH) {
                this.state = 480;
                this.param_clause();
            }

            this.state = 484;
            _la = this._input.LA(1);
            if(_la===SQLParser.PARTITION) {
                this.state = 483;
                this.table_partitioning_clauses();
            }

            this.state = 486;
            this.match(SQLParser.AS);
            this.state = 487;
            this.query_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_elements;
    return this;
}

Table_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_elementsContext.prototype.constructor = Table_elementsContext;

Table_elementsContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Table_elementsContext.prototype.field_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Field_elementContext);
    } else {
        return this.getTypedRuleContext(Field_elementContext,i);
    }
};

Table_elementsContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Table_elementsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Table_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_elements(this);
	}
};

Table_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_elements(this);
	}
};

Table_elementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_elements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_elementsContext = Table_elementsContext;

SQLParser.prototype.table_elements = function() {

    var localctx = new Table_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SQLParser.RULE_table_elements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 491;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 492;
        this.field_element();
        this.state = 497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 493;
            this.match(SQLParser.COMMA);
            this.state = 494;
            this.field_element();
            this.state = 499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 500;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_field_element;
    this.name = null; // IdentifierContext
    return this;
}

Field_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_elementContext.prototype.constructor = Field_elementContext;

Field_elementContext.prototype.field_type = function() {
    return this.getTypedRuleContext(Field_typeContext,0);
};

Field_elementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Field_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterField_element(this);
	}
};

Field_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitField_element(this);
	}
};

Field_elementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitField_element(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Field_elementContext = Field_elementContext;

SQLParser.prototype.field_element = function() {

    var localctx = new Field_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SQLParser.RULE_field_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 502;
        localctx.name = this.identifier();
        this.state = 503;
        this.field_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_field_type;
    return this;
}

Field_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_typeContext.prototype.constructor = Field_typeContext;

Field_typeContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Field_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterField_type(this);
	}
};

Field_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitField_type(this);
	}
};

Field_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitField_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Field_typeContext = Field_typeContext;

SQLParser.prototype.field_type = function() {

    var localctx = new Field_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SQLParser.RULE_field_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.data_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Param_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_param_clause;
    return this;
}

Param_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Param_clauseContext.prototype.constructor = Param_clauseContext;

Param_clauseContext.prototype.WITH = function() {
    return this.getToken(SQLParser.WITH, 0);
};

Param_clauseContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Param_clauseContext.prototype.param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamContext);
    } else {
        return this.getTypedRuleContext(ParamContext,i);
    }
};

Param_clauseContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Param_clauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Param_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterParam_clause(this);
	}
};

Param_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitParam_clause(this);
	}
};

Param_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitParam_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Param_clauseContext = Param_clauseContext;

SQLParser.prototype.param_clause = function() {

    var localctx = new Param_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SQLParser.RULE_param_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 507;
        this.match(SQLParser.WITH);
        this.state = 508;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 509;
        this.param();
        this.state = 514;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 510;
            this.match(SQLParser.COMMA);
            this.state = 511;
            this.param();
            this.state = 516;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 517;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_param;
    this.key = null; // Token
    this.value = null; // Numeric_value_expressionContext
    return this;
}

ParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamContext.prototype.constructor = ParamContext;

ParamContext.prototype.EQUAL = function() {
    return this.getToken(SQLParser.EQUAL, 0);
};

ParamContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

ParamContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

ParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterParam(this);
	}
};

ParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitParam(this);
	}
};

ParamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitParam(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.ParamContext = ParamContext;

SQLParser.prototype.param = function() {

    var localctx = new ParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SQLParser.RULE_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        localctx.key = this.match(SQLParser.Character_String_Literal);
        this.state = 520;
        this.match(SQLParser.EQUAL);
        this.state = 521;
        localctx.value = this.numeric_value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_method_specifier;
    this.m = null; // IdentifierContext
    return this;
}

Method_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_specifierContext.prototype.constructor = Method_specifierContext;

Method_specifierContext.prototype.USING = function() {
    return this.getToken(SQLParser.USING, 0);
};

Method_specifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Method_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterMethod_specifier(this);
	}
};

Method_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitMethod_specifier(this);
	}
};

Method_specifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitMethod_specifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Method_specifierContext = Method_specifierContext;

SQLParser.prototype.method_specifier = function() {

    var localctx = new Method_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SQLParser.RULE_method_specifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this.match(SQLParser.USING);
        this.state = 524;
        localctx.m = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_space_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_space_specifier;
    return this;
}

Table_space_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_space_specifierContext.prototype.constructor = Table_space_specifierContext;

Table_space_specifierContext.prototype.TABLESPACE = function() {
    return this.getToken(SQLParser.TABLESPACE, 0);
};

Table_space_specifierContext.prototype.table_space_name = function() {
    return this.getTypedRuleContext(Table_space_nameContext,0);
};

Table_space_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_space_specifier(this);
	}
};

Table_space_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_space_specifier(this);
	}
};

Table_space_specifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_space_specifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_space_specifierContext = Table_space_specifierContext;

SQLParser.prototype.table_space_specifier = function() {

    var localctx = new Table_space_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SQLParser.RULE_table_space_specifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this.match(SQLParser.TABLESPACE);
        this.state = 527;
        this.table_space_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_space_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_space_name;
    return this;
}

Table_space_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_space_nameContext.prototype.constructor = Table_space_nameContext;

Table_space_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Table_space_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_space_name(this);
	}
};

Table_space_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_space_name(this);
	}
};

Table_space_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_space_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_space_nameContext = Table_space_nameContext;

SQLParser.prototype.table_space_name = function() {

    var localctx = new Table_space_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SQLParser.RULE_table_space_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 529;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_partitioning_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_partitioning_clauses;
    return this;
}

Table_partitioning_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_partitioning_clausesContext.prototype.constructor = Table_partitioning_clausesContext;

Table_partitioning_clausesContext.prototype.range_partitions = function() {
    return this.getTypedRuleContext(Range_partitionsContext,0);
};

Table_partitioning_clausesContext.prototype.hash_partitions = function() {
    return this.getTypedRuleContext(Hash_partitionsContext,0);
};

Table_partitioning_clausesContext.prototype.list_partitions = function() {
    return this.getTypedRuleContext(List_partitionsContext,0);
};

Table_partitioning_clausesContext.prototype.column_partitions = function() {
    return this.getTypedRuleContext(Column_partitionsContext,0);
};

Table_partitioning_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_partitioning_clauses(this);
	}
};

Table_partitioning_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_partitioning_clauses(this);
	}
};

Table_partitioning_clausesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_partitioning_clauses(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_partitioning_clausesContext = Table_partitioning_clausesContext;

SQLParser.prototype.table_partitioning_clauses = function() {

    var localctx = new Table_partitioning_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SQLParser.RULE_table_partitioning_clauses);
    try {
        this.state = 535;
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 531;
            this.range_partitions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 532;
            this.hash_partitions();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 533;
            this.list_partitions();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 534;
            this.column_partitions();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Range_partitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_range_partitions;
    return this;
}

Range_partitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_partitionsContext.prototype.constructor = Range_partitionsContext;

Range_partitionsContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Range_partitionsContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Range_partitionsContext.prototype.RANGE = function() {
    return this.getToken(SQLParser.RANGE, 0);
};

Range_partitionsContext.prototype.LEFT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.LEFT_PAREN);
    } else {
        return this.getToken(SQLParser.LEFT_PAREN, i);
    }
};


Range_partitionsContext.prototype.column_reference_list = function() {
    return this.getTypedRuleContext(Column_reference_listContext,0);
};

Range_partitionsContext.prototype.RIGHT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.RIGHT_PAREN);
    } else {
        return this.getToken(SQLParser.RIGHT_PAREN, i);
    }
};


Range_partitionsContext.prototype.range_value_clause_list = function() {
    return this.getTypedRuleContext(Range_value_clause_listContext,0);
};

Range_partitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRange_partitions(this);
	}
};

Range_partitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRange_partitions(this);
	}
};

Range_partitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRange_partitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Range_partitionsContext = Range_partitionsContext;

SQLParser.prototype.range_partitions = function() {

    var localctx = new Range_partitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SQLParser.RULE_range_partitions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 537;
        this.match(SQLParser.PARTITION);
        this.state = 538;
        this.match(SQLParser.BY);
        this.state = 539;
        this.match(SQLParser.RANGE);
        this.state = 540;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 541;
        this.column_reference_list();
        this.state = 542;
        this.match(SQLParser.RIGHT_PAREN);
        this.state = 543;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 544;
        this.range_value_clause_list();
        this.state = 545;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Range_value_clause_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_range_value_clause_list;
    return this;
}

Range_value_clause_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_value_clause_listContext.prototype.constructor = Range_value_clause_listContext;

Range_value_clause_listContext.prototype.range_value_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Range_value_clauseContext);
    } else {
        return this.getTypedRuleContext(Range_value_clauseContext,i);
    }
};

Range_value_clause_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Range_value_clause_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRange_value_clause_list(this);
	}
};

Range_value_clause_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRange_value_clause_list(this);
	}
};

Range_value_clause_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRange_value_clause_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Range_value_clause_listContext = Range_value_clause_listContext;

SQLParser.prototype.range_value_clause_list = function() {

    var localctx = new Range_value_clause_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SQLParser.RULE_range_value_clause_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.range_value_clause();
        this.state = 552;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 548;
            this.match(SQLParser.COMMA);
            this.state = 549;
            this.range_value_clause();
            this.state = 554;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Range_value_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_range_value_clause;
    return this;
}

Range_value_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_value_clauseContext.prototype.constructor = Range_value_clauseContext;

Range_value_clauseContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Range_value_clauseContext.prototype.partition_name = function() {
    return this.getTypedRuleContext(Partition_nameContext,0);
};

Range_value_clauseContext.prototype.VALUES = function() {
    return this.getToken(SQLParser.VALUES, 0);
};

Range_value_clauseContext.prototype.LESS = function() {
    return this.getToken(SQLParser.LESS, 0);
};

Range_value_clauseContext.prototype.THAN = function() {
    return this.getToken(SQLParser.THAN, 0);
};

Range_value_clauseContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Range_value_clauseContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

Range_value_clauseContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Range_value_clauseContext.prototype.MAXVALUE = function() {
    return this.getToken(SQLParser.MAXVALUE, 0);
};

Range_value_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRange_value_clause(this);
	}
};

Range_value_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRange_value_clause(this);
	}
};

Range_value_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRange_value_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Range_value_clauseContext = Range_value_clauseContext;

SQLParser.prototype.range_value_clause = function() {

    var localctx = new Range_value_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SQLParser.RULE_range_value_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 555;
        this.match(SQLParser.PARTITION);
        this.state = 556;
        this.partition_name();
        this.state = 557;
        this.match(SQLParser.VALUES);
        this.state = 558;
        this.match(SQLParser.LESS);
        this.state = 559;
        this.match(SQLParser.THAN);
        this.state = 571;
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        switch(la_) {
        case 1:
            this.state = 560;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 561;
            this.value_expression();
            this.state = 562;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 565;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 564;
                this.match(SQLParser.LEFT_PAREN);
            }

            this.state = 567;
            this.match(SQLParser.MAXVALUE);
            this.state = 569;
            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
            if(la_===1) {
                this.state = 568;
                this.match(SQLParser.RIGHT_PAREN);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Hash_partitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_hash_partitions;
    return this;
}

Hash_partitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hash_partitionsContext.prototype.constructor = Hash_partitionsContext;

Hash_partitionsContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Hash_partitionsContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Hash_partitionsContext.prototype.HASH = function() {
    return this.getToken(SQLParser.HASH, 0);
};

Hash_partitionsContext.prototype.LEFT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.LEFT_PAREN);
    } else {
        return this.getToken(SQLParser.LEFT_PAREN, i);
    }
};


Hash_partitionsContext.prototype.column_reference_list = function() {
    return this.getTypedRuleContext(Column_reference_listContext,0);
};

Hash_partitionsContext.prototype.RIGHT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.RIGHT_PAREN);
    } else {
        return this.getToken(SQLParser.RIGHT_PAREN, i);
    }
};


Hash_partitionsContext.prototype.individual_hash_partitions = function() {
    return this.getTypedRuleContext(Individual_hash_partitionsContext,0);
};

Hash_partitionsContext.prototype.hash_partitions_by_quantity = function() {
    return this.getTypedRuleContext(Hash_partitions_by_quantityContext,0);
};

Hash_partitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterHash_partitions(this);
	}
};

Hash_partitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitHash_partitions(this);
	}
};

Hash_partitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitHash_partitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Hash_partitionsContext = Hash_partitionsContext;

SQLParser.prototype.hash_partitions = function() {

    var localctx = new Hash_partitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SQLParser.RULE_hash_partitions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this.match(SQLParser.PARTITION);
        this.state = 574;
        this.match(SQLParser.BY);
        this.state = 575;
        this.match(SQLParser.HASH);
        this.state = 576;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 577;
        this.column_reference_list();
        this.state = 578;
        this.match(SQLParser.RIGHT_PAREN);
        this.state = 584;
        switch(this._input.LA(1)) {
        case SQLParser.LEFT_PAREN:
            this.state = 579;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 580;
            this.individual_hash_partitions();
            this.state = 581;
            this.match(SQLParser.RIGHT_PAREN);
            break;
        case SQLParser.PARTITIONS:
            this.state = 583;
            this.hash_partitions_by_quantity();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Individual_hash_partitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_individual_hash_partitions;
    return this;
}

Individual_hash_partitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Individual_hash_partitionsContext.prototype.constructor = Individual_hash_partitionsContext;

Individual_hash_partitionsContext.prototype.individual_hash_partition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Individual_hash_partitionContext);
    } else {
        return this.getTypedRuleContext(Individual_hash_partitionContext,i);
    }
};

Individual_hash_partitionsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Individual_hash_partitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIndividual_hash_partitions(this);
	}
};

Individual_hash_partitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIndividual_hash_partitions(this);
	}
};

Individual_hash_partitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIndividual_hash_partitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Individual_hash_partitionsContext = Individual_hash_partitionsContext;

SQLParser.prototype.individual_hash_partitions = function() {

    var localctx = new Individual_hash_partitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SQLParser.RULE_individual_hash_partitions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 586;
        this.individual_hash_partition();
        this.state = 591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 587;
            this.match(SQLParser.COMMA);
            this.state = 588;
            this.individual_hash_partition();
            this.state = 593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Individual_hash_partitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_individual_hash_partition;
    return this;
}

Individual_hash_partitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Individual_hash_partitionContext.prototype.constructor = Individual_hash_partitionContext;

Individual_hash_partitionContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Individual_hash_partitionContext.prototype.partition_name = function() {
    return this.getTypedRuleContext(Partition_nameContext,0);
};

Individual_hash_partitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIndividual_hash_partition(this);
	}
};

Individual_hash_partitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIndividual_hash_partition(this);
	}
};

Individual_hash_partitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIndividual_hash_partition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Individual_hash_partitionContext = Individual_hash_partitionContext;

SQLParser.prototype.individual_hash_partition = function() {

    var localctx = new Individual_hash_partitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SQLParser.RULE_individual_hash_partition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.match(SQLParser.PARTITION);
        this.state = 595;
        this.partition_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Hash_partitions_by_quantityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_hash_partitions_by_quantity;
    this.quantity = null; // Numeric_value_expressionContext
    return this;
}

Hash_partitions_by_quantityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hash_partitions_by_quantityContext.prototype.constructor = Hash_partitions_by_quantityContext;

Hash_partitions_by_quantityContext.prototype.PARTITIONS = function() {
    return this.getToken(SQLParser.PARTITIONS, 0);
};

Hash_partitions_by_quantityContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

Hash_partitions_by_quantityContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterHash_partitions_by_quantity(this);
	}
};

Hash_partitions_by_quantityContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitHash_partitions_by_quantity(this);
	}
};

Hash_partitions_by_quantityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitHash_partitions_by_quantity(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Hash_partitions_by_quantityContext = Hash_partitions_by_quantityContext;

SQLParser.prototype.hash_partitions_by_quantity = function() {

    var localctx = new Hash_partitions_by_quantityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SQLParser.RULE_hash_partitions_by_quantity);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 597;
        this.match(SQLParser.PARTITIONS);
        this.state = 598;
        localctx.quantity = this.numeric_value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_partitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_list_partitions;
    return this;
}

List_partitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_partitionsContext.prototype.constructor = List_partitionsContext;

List_partitionsContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

List_partitionsContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

List_partitionsContext.prototype.LIST = function() {
    return this.getToken(SQLParser.LIST, 0);
};

List_partitionsContext.prototype.LEFT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.LEFT_PAREN);
    } else {
        return this.getToken(SQLParser.LEFT_PAREN, i);
    }
};


List_partitionsContext.prototype.column_reference_list = function() {
    return this.getTypedRuleContext(Column_reference_listContext,0);
};

List_partitionsContext.prototype.RIGHT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.RIGHT_PAREN);
    } else {
        return this.getToken(SQLParser.RIGHT_PAREN, i);
    }
};


List_partitionsContext.prototype.list_value_clause_list = function() {
    return this.getTypedRuleContext(List_value_clause_listContext,0);
};

List_partitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterList_partitions(this);
	}
};

List_partitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitList_partitions(this);
	}
};

List_partitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitList_partitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.List_partitionsContext = List_partitionsContext;

SQLParser.prototype.list_partitions = function() {

    var localctx = new List_partitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SQLParser.RULE_list_partitions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600;
        this.match(SQLParser.PARTITION);
        this.state = 601;
        this.match(SQLParser.BY);
        this.state = 602;
        this.match(SQLParser.LIST);
        this.state = 603;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 604;
        this.column_reference_list();
        this.state = 605;
        this.match(SQLParser.RIGHT_PAREN);
        this.state = 606;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 607;
        this.list_value_clause_list();
        this.state = 608;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_value_clause_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_list_value_clause_list;
    return this;
}

List_value_clause_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_value_clause_listContext.prototype.constructor = List_value_clause_listContext;

List_value_clause_listContext.prototype.list_value_partition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(List_value_partitionContext);
    } else {
        return this.getTypedRuleContext(List_value_partitionContext,i);
    }
};

List_value_clause_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


List_value_clause_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterList_value_clause_list(this);
	}
};

List_value_clause_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitList_value_clause_list(this);
	}
};

List_value_clause_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitList_value_clause_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.List_value_clause_listContext = List_value_clause_listContext;

SQLParser.prototype.list_value_clause_list = function() {

    var localctx = new List_value_clause_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SQLParser.RULE_list_value_clause_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this.list_value_partition();
        this.state = 615;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 611;
            this.match(SQLParser.COMMA);
            this.state = 612;
            this.list_value_partition();
            this.state = 617;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_value_partitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_list_value_partition;
    return this;
}

List_value_partitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_value_partitionContext.prototype.constructor = List_value_partitionContext;

List_value_partitionContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

List_value_partitionContext.prototype.partition_name = function() {
    return this.getTypedRuleContext(Partition_nameContext,0);
};

List_value_partitionContext.prototype.VALUES = function() {
    return this.getToken(SQLParser.VALUES, 0);
};

List_value_partitionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

List_value_partitionContext.prototype.in_value_list = function() {
    return this.getTypedRuleContext(In_value_listContext,0);
};

List_value_partitionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

List_value_partitionContext.prototype.IN = function() {
    return this.getToken(SQLParser.IN, 0);
};

List_value_partitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterList_value_partition(this);
	}
};

List_value_partitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitList_value_partition(this);
	}
};

List_value_partitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitList_value_partition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.List_value_partitionContext = List_value_partitionContext;

SQLParser.prototype.list_value_partition = function() {

    var localctx = new List_value_partitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SQLParser.RULE_list_value_partition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this.match(SQLParser.PARTITION);
        this.state = 619;
        this.partition_name();
        this.state = 620;
        this.match(SQLParser.VALUES);
        this.state = 622;
        _la = this._input.LA(1);
        if(_la===SQLParser.IN) {
            this.state = 621;
            this.match(SQLParser.IN);
        }

        this.state = 624;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 625;
        this.in_value_list();
        this.state = 626;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_partitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_partitions;
    return this;
}

Column_partitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_partitionsContext.prototype.constructor = Column_partitionsContext;

Column_partitionsContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Column_partitionsContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Column_partitionsContext.prototype.COLUMN = function() {
    return this.getToken(SQLParser.COLUMN, 0);
};

Column_partitionsContext.prototype.table_elements = function() {
    return this.getTypedRuleContext(Table_elementsContext,0);
};

Column_partitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumn_partitions(this);
	}
};

Column_partitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumn_partitions(this);
	}
};

Column_partitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitColumn_partitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Column_partitionsContext = Column_partitionsContext;

SQLParser.prototype.column_partitions = function() {

    var localctx = new Column_partitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SQLParser.RULE_column_partitions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        this.match(SQLParser.PARTITION);
        this.state = 629;
        this.match(SQLParser.BY);
        this.state = 630;
        this.match(SQLParser.COLUMN);
        this.state = 631;
        this.table_elements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partition_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_partition_name;
    return this;
}

Partition_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partition_nameContext.prototype.constructor = Partition_nameContext;

Partition_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Partition_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPartition_name(this);
	}
};

Partition_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPartition_name(this);
	}
};

Partition_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPartition_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Partition_nameContext = Partition_nameContext;

SQLParser.prototype.partition_name = function() {

    var localctx = new Partition_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SQLParser.RULE_partition_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_table_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_drop_table_statement;
    return this;
}

Drop_table_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_table_statementContext.prototype.constructor = Drop_table_statementContext;

Drop_table_statementContext.prototype.DROP = function() {
    return this.getToken(SQLParser.DROP, 0);
};

Drop_table_statementContext.prototype.TABLE = function() {
    return this.getToken(SQLParser.TABLE, 0);
};

Drop_table_statementContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Drop_table_statementContext.prototype.PURGE = function() {
    return this.getToken(SQLParser.PURGE, 0);
};

Drop_table_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDrop_table_statement(this);
	}
};

Drop_table_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDrop_table_statement(this);
	}
};

Drop_table_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDrop_table_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Drop_table_statementContext = Drop_table_statementContext;

SQLParser.prototype.drop_table_statement = function() {

    var localctx = new Drop_table_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SQLParser.RULE_drop_table_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 635;
        this.match(SQLParser.DROP);
        this.state = 636;
        this.match(SQLParser.TABLE);
        this.state = 637;
        this.table_name();
        this.state = 639;
        _la = this._input.LA(1);
        if(_la===SQLParser.PURGE) {
            this.state = 638;
            this.match(SQLParser.PURGE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Identifier = function() {
    return this.getToken(SQLParser.Identifier, 0);
};

IdentifierContext.prototype.nonreserved_keywords = function() {
    return this.getTypedRuleContext(Nonreserved_keywordsContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.IdentifierContext = IdentifierContext;

SQLParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SQLParser.RULE_identifier);
    try {
        this.state = 643;
        switch(this._input.LA(1)) {
        case SQLParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 641;
            this.match(SQLParser.Identifier);
            break;
        case SQLParser.AVG:
        case SQLParser.BETWEEN:
        case SQLParser.BY:
        case SQLParser.CENTURY:
        case SQLParser.CHARACTER:
        case SQLParser.COLLECT:
        case SQLParser.COALESCE:
        case SQLParser.COLUMN:
        case SQLParser.COUNT:
        case SQLParser.CUBE:
        case SQLParser.DAY:
        case SQLParser.DEC:
        case SQLParser.DECADE:
        case SQLParser.DOW:
        case SQLParser.DOY:
        case SQLParser.DROP:
        case SQLParser.EPOCH:
        case SQLParser.EVERY:
        case SQLParser.EXISTS:
        case SQLParser.EXTERNAL:
        case SQLParser.EXTRACT:
        case SQLParser.FILTER:
        case SQLParser.FIRST:
        case SQLParser.FORMAT:
        case SQLParser.FUSION:
        case SQLParser.GROUPING:
        case SQLParser.HASH:
        case SQLParser.INDEX:
        case SQLParser.INSERT:
        case SQLParser.INTERSECTION:
        case SQLParser.ISODOW:
        case SQLParser.ISOYEAR:
        case SQLParser.LAST:
        case SQLParser.LESS:
        case SQLParser.LIST:
        case SQLParser.LOCATION:
        case SQLParser.MAX:
        case SQLParser.MAXVALUE:
        case SQLParser.MICROSECONDS:
        case SQLParser.MILLENNIUM:
        case SQLParser.MILLISECONDS:
        case SQLParser.MIN:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.NATIONAL:
        case SQLParser.NULLIF:
        case SQLParser.OVERWRITE:
        case SQLParser.PARTITION:
        case SQLParser.PARTITIONS:
        case SQLParser.PRECISION:
        case SQLParser.PURGE:
        case SQLParser.QUARTER:
        case SQLParser.RANGE:
        case SQLParser.REGEXP:
        case SQLParser.RLIKE:
        case SQLParser.ROLLUP:
        case SQLParser.SECOND:
        case SQLParser.SET:
        case SQLParser.SIMILAR:
        case SQLParser.STDDEV_POP:
        case SQLParser.STDDEV_SAMP:
        case SQLParser.SUBPARTITION:
        case SQLParser.SUM:
        case SQLParser.TABLESPACE:
        case SQLParser.THAN:
        case SQLParser.TIMEZONE:
        case SQLParser.TIMEZONE_HOUR:
        case SQLParser.TIMEZONE_MINUTE:
        case SQLParser.TRIM:
        case SQLParser.TO:
        case SQLParser.UNKNOWN:
        case SQLParser.VALUES:
        case SQLParser.VAR_SAMP:
        case SQLParser.VAR_POP:
        case SQLParser.VARYING:
        case SQLParser.WEEK:
        case SQLParser.YEAR:
        case SQLParser.ZONE:
        case SQLParser.BOOLEAN:
        case SQLParser.BOOL:
        case SQLParser.BIT:
        case SQLParser.VARBIT:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
        case SQLParser.CHAR:
        case SQLParser.VARCHAR:
        case SQLParser.NCHAR:
        case SQLParser.NVARCHAR:
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMETZ:
        case SQLParser.TIMESTAMP:
        case SQLParser.TIMESTAMPTZ:
        case SQLParser.TEXT:
        case SQLParser.VARBINARY:
        case SQLParser.BLOB:
        case SQLParser.BYTEA:
        case SQLParser.INET4:
            this.enterOuterAlt(localctx, 2);
            this.state = 642;
            this.nonreserved_keywords();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nonreserved_keywordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_nonreserved_keywords;
    return this;
}

Nonreserved_keywordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonreserved_keywordsContext.prototype.constructor = Nonreserved_keywordsContext;

Nonreserved_keywordsContext.prototype.AVG = function() {
    return this.getToken(SQLParser.AVG, 0);
};

Nonreserved_keywordsContext.prototype.BETWEEN = function() {
    return this.getToken(SQLParser.BETWEEN, 0);
};

Nonreserved_keywordsContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Nonreserved_keywordsContext.prototype.CENTURY = function() {
    return this.getToken(SQLParser.CENTURY, 0);
};

Nonreserved_keywordsContext.prototype.CHARACTER = function() {
    return this.getToken(SQLParser.CHARACTER, 0);
};

Nonreserved_keywordsContext.prototype.COALESCE = function() {
    return this.getToken(SQLParser.COALESCE, 0);
};

Nonreserved_keywordsContext.prototype.COLLECT = function() {
    return this.getToken(SQLParser.COLLECT, 0);
};

Nonreserved_keywordsContext.prototype.COLUMN = function() {
    return this.getToken(SQLParser.COLUMN, 0);
};

Nonreserved_keywordsContext.prototype.COUNT = function() {
    return this.getToken(SQLParser.COUNT, 0);
};

Nonreserved_keywordsContext.prototype.CUBE = function() {
    return this.getToken(SQLParser.CUBE, 0);
};

Nonreserved_keywordsContext.prototype.DAY = function() {
    return this.getToken(SQLParser.DAY, 0);
};

Nonreserved_keywordsContext.prototype.DEC = function() {
    return this.getToken(SQLParser.DEC, 0);
};

Nonreserved_keywordsContext.prototype.DECADE = function() {
    return this.getToken(SQLParser.DECADE, 0);
};

Nonreserved_keywordsContext.prototype.DOW = function() {
    return this.getToken(SQLParser.DOW, 0);
};

Nonreserved_keywordsContext.prototype.DOY = function() {
    return this.getToken(SQLParser.DOY, 0);
};

Nonreserved_keywordsContext.prototype.DROP = function() {
    return this.getToken(SQLParser.DROP, 0);
};

Nonreserved_keywordsContext.prototype.EPOCH = function() {
    return this.getToken(SQLParser.EPOCH, 0);
};

Nonreserved_keywordsContext.prototype.EVERY = function() {
    return this.getToken(SQLParser.EVERY, 0);
};

Nonreserved_keywordsContext.prototype.EXISTS = function() {
    return this.getToken(SQLParser.EXISTS, 0);
};

Nonreserved_keywordsContext.prototype.EXTERNAL = function() {
    return this.getToken(SQLParser.EXTERNAL, 0);
};

Nonreserved_keywordsContext.prototype.EXTRACT = function() {
    return this.getToken(SQLParser.EXTRACT, 0);
};

Nonreserved_keywordsContext.prototype.FILTER = function() {
    return this.getToken(SQLParser.FILTER, 0);
};

Nonreserved_keywordsContext.prototype.FIRST = function() {
    return this.getToken(SQLParser.FIRST, 0);
};

Nonreserved_keywordsContext.prototype.FORMAT = function() {
    return this.getToken(SQLParser.FORMAT, 0);
};

Nonreserved_keywordsContext.prototype.FUSION = function() {
    return this.getToken(SQLParser.FUSION, 0);
};

Nonreserved_keywordsContext.prototype.GROUPING = function() {
    return this.getToken(SQLParser.GROUPING, 0);
};

Nonreserved_keywordsContext.prototype.HASH = function() {
    return this.getToken(SQLParser.HASH, 0);
};

Nonreserved_keywordsContext.prototype.INDEX = function() {
    return this.getToken(SQLParser.INDEX, 0);
};

Nonreserved_keywordsContext.prototype.INSERT = function() {
    return this.getToken(SQLParser.INSERT, 0);
};

Nonreserved_keywordsContext.prototype.INTERSECTION = function() {
    return this.getToken(SQLParser.INTERSECTION, 0);
};

Nonreserved_keywordsContext.prototype.ISODOW = function() {
    return this.getToken(SQLParser.ISODOW, 0);
};

Nonreserved_keywordsContext.prototype.ISOYEAR = function() {
    return this.getToken(SQLParser.ISOYEAR, 0);
};

Nonreserved_keywordsContext.prototype.LAST = function() {
    return this.getToken(SQLParser.LAST, 0);
};

Nonreserved_keywordsContext.prototype.LESS = function() {
    return this.getToken(SQLParser.LESS, 0);
};

Nonreserved_keywordsContext.prototype.LIST = function() {
    return this.getToken(SQLParser.LIST, 0);
};

Nonreserved_keywordsContext.prototype.LOCATION = function() {
    return this.getToken(SQLParser.LOCATION, 0);
};

Nonreserved_keywordsContext.prototype.MAX = function() {
    return this.getToken(SQLParser.MAX, 0);
};

Nonreserved_keywordsContext.prototype.MAXVALUE = function() {
    return this.getToken(SQLParser.MAXVALUE, 0);
};

Nonreserved_keywordsContext.prototype.MICROSECONDS = function() {
    return this.getToken(SQLParser.MICROSECONDS, 0);
};

Nonreserved_keywordsContext.prototype.MILLENNIUM = function() {
    return this.getToken(SQLParser.MILLENNIUM, 0);
};

Nonreserved_keywordsContext.prototype.MILLISECONDS = function() {
    return this.getToken(SQLParser.MILLISECONDS, 0);
};

Nonreserved_keywordsContext.prototype.MIN = function() {
    return this.getToken(SQLParser.MIN, 0);
};

Nonreserved_keywordsContext.prototype.MINUTE = function() {
    return this.getToken(SQLParser.MINUTE, 0);
};

Nonreserved_keywordsContext.prototype.MONTH = function() {
    return this.getToken(SQLParser.MONTH, 0);
};

Nonreserved_keywordsContext.prototype.NATIONAL = function() {
    return this.getToken(SQLParser.NATIONAL, 0);
};

Nonreserved_keywordsContext.prototype.NULLIF = function() {
    return this.getToken(SQLParser.NULLIF, 0);
};

Nonreserved_keywordsContext.prototype.OVERWRITE = function() {
    return this.getToken(SQLParser.OVERWRITE, 0);
};

Nonreserved_keywordsContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Nonreserved_keywordsContext.prototype.PARTITIONS = function() {
    return this.getToken(SQLParser.PARTITIONS, 0);
};

Nonreserved_keywordsContext.prototype.PRECISION = function() {
    return this.getToken(SQLParser.PRECISION, 0);
};

Nonreserved_keywordsContext.prototype.PURGE = function() {
    return this.getToken(SQLParser.PURGE, 0);
};

Nonreserved_keywordsContext.prototype.QUARTER = function() {
    return this.getToken(SQLParser.QUARTER, 0);
};

Nonreserved_keywordsContext.prototype.RANGE = function() {
    return this.getToken(SQLParser.RANGE, 0);
};

Nonreserved_keywordsContext.prototype.REGEXP = function() {
    return this.getToken(SQLParser.REGEXP, 0);
};

Nonreserved_keywordsContext.prototype.RLIKE = function() {
    return this.getToken(SQLParser.RLIKE, 0);
};

Nonreserved_keywordsContext.prototype.ROLLUP = function() {
    return this.getToken(SQLParser.ROLLUP, 0);
};

Nonreserved_keywordsContext.prototype.SECOND = function() {
    return this.getToken(SQLParser.SECOND, 0);
};

Nonreserved_keywordsContext.prototype.SET = function() {
    return this.getToken(SQLParser.SET, 0);
};

Nonreserved_keywordsContext.prototype.SIMILAR = function() {
    return this.getToken(SQLParser.SIMILAR, 0);
};

Nonreserved_keywordsContext.prototype.STDDEV_POP = function() {
    return this.getToken(SQLParser.STDDEV_POP, 0);
};

Nonreserved_keywordsContext.prototype.STDDEV_SAMP = function() {
    return this.getToken(SQLParser.STDDEV_SAMP, 0);
};

Nonreserved_keywordsContext.prototype.SUBPARTITION = function() {
    return this.getToken(SQLParser.SUBPARTITION, 0);
};

Nonreserved_keywordsContext.prototype.SUM = function() {
    return this.getToken(SQLParser.SUM, 0);
};

Nonreserved_keywordsContext.prototype.TABLESPACE = function() {
    return this.getToken(SQLParser.TABLESPACE, 0);
};

Nonreserved_keywordsContext.prototype.THAN = function() {
    return this.getToken(SQLParser.THAN, 0);
};

Nonreserved_keywordsContext.prototype.TIMEZONE = function() {
    return this.getToken(SQLParser.TIMEZONE, 0);
};

Nonreserved_keywordsContext.prototype.TIMEZONE_HOUR = function() {
    return this.getToken(SQLParser.TIMEZONE_HOUR, 0);
};

Nonreserved_keywordsContext.prototype.TIMEZONE_MINUTE = function() {
    return this.getToken(SQLParser.TIMEZONE_MINUTE, 0);
};

Nonreserved_keywordsContext.prototype.TRIM = function() {
    return this.getToken(SQLParser.TRIM, 0);
};

Nonreserved_keywordsContext.prototype.TO = function() {
    return this.getToken(SQLParser.TO, 0);
};

Nonreserved_keywordsContext.prototype.UNKNOWN = function() {
    return this.getToken(SQLParser.UNKNOWN, 0);
};

Nonreserved_keywordsContext.prototype.VALUES = function() {
    return this.getToken(SQLParser.VALUES, 0);
};

Nonreserved_keywordsContext.prototype.VAR_POP = function() {
    return this.getToken(SQLParser.VAR_POP, 0);
};

Nonreserved_keywordsContext.prototype.VAR_SAMP = function() {
    return this.getToken(SQLParser.VAR_SAMP, 0);
};

Nonreserved_keywordsContext.prototype.VARYING = function() {
    return this.getToken(SQLParser.VARYING, 0);
};

Nonreserved_keywordsContext.prototype.WEEK = function() {
    return this.getToken(SQLParser.WEEK, 0);
};

Nonreserved_keywordsContext.prototype.YEAR = function() {
    return this.getToken(SQLParser.YEAR, 0);
};

Nonreserved_keywordsContext.prototype.ZONE = function() {
    return this.getToken(SQLParser.ZONE, 0);
};

Nonreserved_keywordsContext.prototype.BIGINT = function() {
    return this.getToken(SQLParser.BIGINT, 0);
};

Nonreserved_keywordsContext.prototype.BIT = function() {
    return this.getToken(SQLParser.BIT, 0);
};

Nonreserved_keywordsContext.prototype.BLOB = function() {
    return this.getToken(SQLParser.BLOB, 0);
};

Nonreserved_keywordsContext.prototype.BOOL = function() {
    return this.getToken(SQLParser.BOOL, 0);
};

Nonreserved_keywordsContext.prototype.BOOLEAN = function() {
    return this.getToken(SQLParser.BOOLEAN, 0);
};

Nonreserved_keywordsContext.prototype.BYTEA = function() {
    return this.getToken(SQLParser.BYTEA, 0);
};

Nonreserved_keywordsContext.prototype.CHAR = function() {
    return this.getToken(SQLParser.CHAR, 0);
};

Nonreserved_keywordsContext.prototype.DATE = function() {
    return this.getToken(SQLParser.DATE, 0);
};

Nonreserved_keywordsContext.prototype.DECIMAL = function() {
    return this.getToken(SQLParser.DECIMAL, 0);
};

Nonreserved_keywordsContext.prototype.DOUBLE = function() {
    return this.getToken(SQLParser.DOUBLE, 0);
};

Nonreserved_keywordsContext.prototype.FLOAT = function() {
    return this.getToken(SQLParser.FLOAT, 0);
};

Nonreserved_keywordsContext.prototype.FLOAT4 = function() {
    return this.getToken(SQLParser.FLOAT4, 0);
};

Nonreserved_keywordsContext.prototype.FLOAT8 = function() {
    return this.getToken(SQLParser.FLOAT8, 0);
};

Nonreserved_keywordsContext.prototype.INET4 = function() {
    return this.getToken(SQLParser.INET4, 0);
};

Nonreserved_keywordsContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

Nonreserved_keywordsContext.prototype.INT1 = function() {
    return this.getToken(SQLParser.INT1, 0);
};

Nonreserved_keywordsContext.prototype.INT2 = function() {
    return this.getToken(SQLParser.INT2, 0);
};

Nonreserved_keywordsContext.prototype.INT4 = function() {
    return this.getToken(SQLParser.INT4, 0);
};

Nonreserved_keywordsContext.prototype.INT8 = function() {
    return this.getToken(SQLParser.INT8, 0);
};

Nonreserved_keywordsContext.prototype.INTEGER = function() {
    return this.getToken(SQLParser.INTEGER, 0);
};

Nonreserved_keywordsContext.prototype.NCHAR = function() {
    return this.getToken(SQLParser.NCHAR, 0);
};

Nonreserved_keywordsContext.prototype.NUMERIC = function() {
    return this.getToken(SQLParser.NUMERIC, 0);
};

Nonreserved_keywordsContext.prototype.NVARCHAR = function() {
    return this.getToken(SQLParser.NVARCHAR, 0);
};

Nonreserved_keywordsContext.prototype.REAL = function() {
    return this.getToken(SQLParser.REAL, 0);
};

Nonreserved_keywordsContext.prototype.SMALLINT = function() {
    return this.getToken(SQLParser.SMALLINT, 0);
};

Nonreserved_keywordsContext.prototype.TEXT = function() {
    return this.getToken(SQLParser.TEXT, 0);
};

Nonreserved_keywordsContext.prototype.TIME = function() {
    return this.getToken(SQLParser.TIME, 0);
};

Nonreserved_keywordsContext.prototype.TIMESTAMP = function() {
    return this.getToken(SQLParser.TIMESTAMP, 0);
};

Nonreserved_keywordsContext.prototype.TIMESTAMPTZ = function() {
    return this.getToken(SQLParser.TIMESTAMPTZ, 0);
};

Nonreserved_keywordsContext.prototype.TIMETZ = function() {
    return this.getToken(SQLParser.TIMETZ, 0);
};

Nonreserved_keywordsContext.prototype.TINYINT = function() {
    return this.getToken(SQLParser.TINYINT, 0);
};

Nonreserved_keywordsContext.prototype.VARBINARY = function() {
    return this.getToken(SQLParser.VARBINARY, 0);
};

Nonreserved_keywordsContext.prototype.VARBIT = function() {
    return this.getToken(SQLParser.VARBIT, 0);
};

Nonreserved_keywordsContext.prototype.VARCHAR = function() {
    return this.getToken(SQLParser.VARCHAR, 0);
};

Nonreserved_keywordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNonreserved_keywords(this);
	}
};

Nonreserved_keywordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNonreserved_keywords(this);
	}
};

Nonreserved_keywordsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNonreserved_keywords(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Nonreserved_keywordsContext = Nonreserved_keywordsContext;

SQLParser.prototype.nonreserved_keywords = function() {

    var localctx = new Nonreserved_keywordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SQLParser.RULE_nonreserved_keywords);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 645;
        _la = this._input.LA(1);
        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (SQLParser.AVG - 54)) | (1 << (SQLParser.BETWEEN - 54)) | (1 << (SQLParser.BY - 54)) | (1 << (SQLParser.CENTURY - 54)) | (1 << (SQLParser.CHARACTER - 54)) | (1 << (SQLParser.COLLECT - 54)) | (1 << (SQLParser.COALESCE - 54)) | (1 << (SQLParser.COLUMN - 54)) | (1 << (SQLParser.COUNT - 54)) | (1 << (SQLParser.CUBE - 54)) | (1 << (SQLParser.DAY - 54)) | (1 << (SQLParser.DEC - 54)) | (1 << (SQLParser.DECADE - 54)) | (1 << (SQLParser.DOW - 54)) | (1 << (SQLParser.DOY - 54)) | (1 << (SQLParser.DROP - 54)) | (1 << (SQLParser.EPOCH - 54)) | (1 << (SQLParser.EVERY - 54)) | (1 << (SQLParser.EXISTS - 54)) | (1 << (SQLParser.EXTERNAL - 54)) | (1 << (SQLParser.EXTRACT - 54)) | (1 << (SQLParser.FILTER - 54)) | (1 << (SQLParser.FIRST - 54)) | (1 << (SQLParser.FORMAT - 54)) | (1 << (SQLParser.FUSION - 54)) | (1 << (SQLParser.GROUPING - 54)) | (1 << (SQLParser.HASH - 54)) | (1 << (SQLParser.INDEX - 54)) | (1 << (SQLParser.INSERT - 54)) | (1 << (SQLParser.INTERSECTION - 54)) | (1 << (SQLParser.ISODOW - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (SQLParser.ISOYEAR - 86)) | (1 << (SQLParser.LAST - 86)) | (1 << (SQLParser.LESS - 86)) | (1 << (SQLParser.LIST - 86)) | (1 << (SQLParser.LOCATION - 86)) | (1 << (SQLParser.MAX - 86)) | (1 << (SQLParser.MAXVALUE - 86)) | (1 << (SQLParser.MICROSECONDS - 86)) | (1 << (SQLParser.MILLENNIUM - 86)) | (1 << (SQLParser.MILLISECONDS - 86)) | (1 << (SQLParser.MIN - 86)) | (1 << (SQLParser.MINUTE - 86)) | (1 << (SQLParser.MONTH - 86)) | (1 << (SQLParser.NATIONAL - 86)) | (1 << (SQLParser.NULLIF - 86)) | (1 << (SQLParser.OVERWRITE - 86)) | (1 << (SQLParser.PARTITION - 86)) | (1 << (SQLParser.PARTITIONS - 86)) | (1 << (SQLParser.PRECISION - 86)) | (1 << (SQLParser.PURGE - 86)) | (1 << (SQLParser.QUARTER - 86)) | (1 << (SQLParser.RANGE - 86)) | (1 << (SQLParser.REGEXP - 86)) | (1 << (SQLParser.RLIKE - 86)) | (1 << (SQLParser.ROLLUP - 86)) | (1 << (SQLParser.SECOND - 86)) | (1 << (SQLParser.SET - 86)) | (1 << (SQLParser.SIMILAR - 86)) | (1 << (SQLParser.STDDEV_POP - 86)) | (1 << (SQLParser.STDDEV_SAMP - 86)) | (1 << (SQLParser.SUBPARTITION - 86)) | (1 << (SQLParser.SUM - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (SQLParser.TABLESPACE - 118)) | (1 << (SQLParser.THAN - 118)) | (1 << (SQLParser.TIMEZONE - 118)) | (1 << (SQLParser.TIMEZONE_HOUR - 118)) | (1 << (SQLParser.TIMEZONE_MINUTE - 118)) | (1 << (SQLParser.TRIM - 118)) | (1 << (SQLParser.TO - 118)) | (1 << (SQLParser.UNKNOWN - 118)) | (1 << (SQLParser.VALUES - 118)) | (1 << (SQLParser.VAR_SAMP - 118)) | (1 << (SQLParser.VAR_POP - 118)) | (1 << (SQLParser.VARYING - 118)) | (1 << (SQLParser.WEEK - 118)) | (1 << (SQLParser.YEAR - 118)) | (1 << (SQLParser.ZONE - 118)) | (1 << (SQLParser.BOOLEAN - 118)) | (1 << (SQLParser.BOOL - 118)) | (1 << (SQLParser.BIT - 118)) | (1 << (SQLParser.VARBIT - 118)) | (1 << (SQLParser.INT1 - 118)) | (1 << (SQLParser.INT2 - 118)) | (1 << (SQLParser.INT4 - 118)) | (1 << (SQLParser.INT8 - 118)) | (1 << (SQLParser.TINYINT - 118)) | (1 << (SQLParser.SMALLINT - 118)) | (1 << (SQLParser.INT - 118)) | (1 << (SQLParser.INTEGER - 118)) | (1 << (SQLParser.BIGINT - 118)) | (1 << (SQLParser.FLOAT4 - 118)) | (1 << (SQLParser.FLOAT8 - 118)) | (1 << (SQLParser.REAL - 118)) | (1 << (SQLParser.FLOAT - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (SQLParser.DOUBLE - 150)) | (1 << (SQLParser.NUMERIC - 150)) | (1 << (SQLParser.DECIMAL - 150)) | (1 << (SQLParser.CHAR - 150)) | (1 << (SQLParser.VARCHAR - 150)) | (1 << (SQLParser.NCHAR - 150)) | (1 << (SQLParser.NVARCHAR - 150)) | (1 << (SQLParser.DATE - 150)) | (1 << (SQLParser.TIME - 150)) | (1 << (SQLParser.TIMETZ - 150)) | (1 << (SQLParser.TIMESTAMP - 150)) | (1 << (SQLParser.TIMESTAMPTZ - 150)) | (1 << (SQLParser.TEXT - 150)) | (1 << (SQLParser.VARBINARY - 150)) | (1 << (SQLParser.BLOB - 150)) | (1 << (SQLParser.BYTEA - 150)) | (1 << (SQLParser.INET4 - 150)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unsigned_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_unsigned_literal;
    return this;
}

Unsigned_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unsigned_literalContext.prototype.constructor = Unsigned_literalContext;

Unsigned_literalContext.prototype.unsigned_numeric_literal = function() {
    return this.getTypedRuleContext(Unsigned_numeric_literalContext,0);
};

Unsigned_literalContext.prototype.general_literal = function() {
    return this.getTypedRuleContext(General_literalContext,0);
};

Unsigned_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUnsigned_literal(this);
	}
};

Unsigned_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUnsigned_literal(this);
	}
};

Unsigned_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitUnsigned_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Unsigned_literalContext = Unsigned_literalContext;

SQLParser.prototype.unsigned_literal = function() {

    var localctx = new Unsigned_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SQLParser.RULE_unsigned_literal);
    try {
        this.state = 649;
        switch(this._input.LA(1)) {
        case SQLParser.NUMBER:
        case SQLParser.REAL_NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 647;
            this.unsigned_numeric_literal();
            break;
        case SQLParser.FALSE:
        case SQLParser.TRUE:
        case SQLParser.UNKNOWN:
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMESTAMP:
        case SQLParser.Character_String_Literal:
            this.enterOuterAlt(localctx, 2);
            this.state = 648;
            this.general_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_general_literal;
    return this;
}

General_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_literalContext.prototype.constructor = General_literalContext;

General_literalContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

General_literalContext.prototype.datetime_literal = function() {
    return this.getTypedRuleContext(Datetime_literalContext,0);
};

General_literalContext.prototype.boolean_literal = function() {
    return this.getTypedRuleContext(Boolean_literalContext,0);
};

General_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGeneral_literal(this);
	}
};

General_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGeneral_literal(this);
	}
};

General_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGeneral_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.General_literalContext = General_literalContext;

SQLParser.prototype.general_literal = function() {

    var localctx = new General_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SQLParser.RULE_general_literal);
    try {
        this.state = 654;
        switch(this._input.LA(1)) {
        case SQLParser.Character_String_Literal:
            this.enterOuterAlt(localctx, 1);
            this.state = 651;
            this.match(SQLParser.Character_String_Literal);
            break;
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 2);
            this.state = 652;
            this.datetime_literal();
            break;
        case SQLParser.FALSE:
        case SQLParser.TRUE:
        case SQLParser.UNKNOWN:
            this.enterOuterAlt(localctx, 3);
            this.state = 653;
            this.boolean_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Datetime_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_datetime_literal;
    return this;
}

Datetime_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Datetime_literalContext.prototype.constructor = Datetime_literalContext;

Datetime_literalContext.prototype.timestamp_literal = function() {
    return this.getTypedRuleContext(Timestamp_literalContext,0);
};

Datetime_literalContext.prototype.time_literal = function() {
    return this.getTypedRuleContext(Time_literalContext,0);
};

Datetime_literalContext.prototype.date_literal = function() {
    return this.getTypedRuleContext(Date_literalContext,0);
};

Datetime_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDatetime_literal(this);
	}
};

Datetime_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDatetime_literal(this);
	}
};

Datetime_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDatetime_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Datetime_literalContext = Datetime_literalContext;

SQLParser.prototype.datetime_literal = function() {

    var localctx = new Datetime_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SQLParser.RULE_datetime_literal);
    try {
        this.state = 659;
        switch(this._input.LA(1)) {
        case SQLParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 1);
            this.state = 656;
            this.timestamp_literal();
            break;
        case SQLParser.TIME:
            this.enterOuterAlt(localctx, 2);
            this.state = 657;
            this.time_literal();
            break;
        case SQLParser.DATE:
            this.enterOuterAlt(localctx, 3);
            this.state = 658;
            this.date_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Time_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_time_literal;
    this.time_string = null; // Token
    return this;
}

Time_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Time_literalContext.prototype.constructor = Time_literalContext;

Time_literalContext.prototype.TIME = function() {
    return this.getToken(SQLParser.TIME, 0);
};

Time_literalContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Time_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTime_literal(this);
	}
};

Time_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTime_literal(this);
	}
};

Time_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTime_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Time_literalContext = Time_literalContext;

SQLParser.prototype.time_literal = function() {

    var localctx = new Time_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SQLParser.RULE_time_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this.match(SQLParser.TIME);
        this.state = 662;
        localctx.time_string = this.match(SQLParser.Character_String_Literal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Timestamp_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_timestamp_literal;
    this.timestamp_string = null; // Token
    return this;
}

Timestamp_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timestamp_literalContext.prototype.constructor = Timestamp_literalContext;

Timestamp_literalContext.prototype.TIMESTAMP = function() {
    return this.getToken(SQLParser.TIMESTAMP, 0);
};

Timestamp_literalContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Timestamp_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTimestamp_literal(this);
	}
};

Timestamp_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTimestamp_literal(this);
	}
};

Timestamp_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTimestamp_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Timestamp_literalContext = Timestamp_literalContext;

SQLParser.prototype.timestamp_literal = function() {

    var localctx = new Timestamp_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SQLParser.RULE_timestamp_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 664;
        this.match(SQLParser.TIMESTAMP);
        this.state = 665;
        localctx.timestamp_string = this.match(SQLParser.Character_String_Literal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Date_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_date_literal;
    this.date_string = null; // Token
    return this;
}

Date_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Date_literalContext.prototype.constructor = Date_literalContext;

Date_literalContext.prototype.DATE = function() {
    return this.getToken(SQLParser.DATE, 0);
};

Date_literalContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Date_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDate_literal(this);
	}
};

Date_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDate_literal(this);
	}
};

Date_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDate_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Date_literalContext = Date_literalContext;

SQLParser.prototype.date_literal = function() {

    var localctx = new Date_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SQLParser.RULE_date_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 667;
        this.match(SQLParser.DATE);
        this.state = 668;
        localctx.date_string = this.match(SQLParser.Character_String_Literal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_literal;
    return this;
}

Boolean_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_literalContext.prototype.constructor = Boolean_literalContext;

Boolean_literalContext.prototype.TRUE = function() {
    return this.getToken(SQLParser.TRUE, 0);
};

Boolean_literalContext.prototype.FALSE = function() {
    return this.getToken(SQLParser.FALSE, 0);
};

Boolean_literalContext.prototype.UNKNOWN = function() {
    return this.getToken(SQLParser.UNKNOWN, 0);
};

Boolean_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_literal(this);
	}
};

Boolean_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_literal(this);
	}
};

Boolean_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_literalContext = Boolean_literalContext;

SQLParser.prototype.boolean_literal = function() {

    var localctx = new Boolean_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SQLParser.RULE_boolean_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.FALSE || _la===SQLParser.TRUE || _la===SQLParser.UNKNOWN)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_data_type;
    return this;
}

Data_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_typeContext.prototype.constructor = Data_typeContext;

Data_typeContext.prototype.predefined_type = function() {
    return this.getTypedRuleContext(Predefined_typeContext,0);
};

Data_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterData_type(this);
	}
};

Data_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitData_type(this);
	}
};

Data_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitData_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Data_typeContext = Data_typeContext;

SQLParser.prototype.data_type = function() {

    var localctx = new Data_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SQLParser.RULE_data_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 672;
        this.predefined_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Predefined_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_predefined_type;
    return this;
}

Predefined_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Predefined_typeContext.prototype.constructor = Predefined_typeContext;

Predefined_typeContext.prototype.character_string_type = function() {
    return this.getTypedRuleContext(Character_string_typeContext,0);
};

Predefined_typeContext.prototype.national_character_string_type = function() {
    return this.getTypedRuleContext(National_character_string_typeContext,0);
};

Predefined_typeContext.prototype.binary_large_object_string_type = function() {
    return this.getTypedRuleContext(Binary_large_object_string_typeContext,0);
};

Predefined_typeContext.prototype.numeric_type = function() {
    return this.getTypedRuleContext(Numeric_typeContext,0);
};

Predefined_typeContext.prototype.boolean_type = function() {
    return this.getTypedRuleContext(Boolean_typeContext,0);
};

Predefined_typeContext.prototype.datetime_type = function() {
    return this.getTypedRuleContext(Datetime_typeContext,0);
};

Predefined_typeContext.prototype.bit_type = function() {
    return this.getTypedRuleContext(Bit_typeContext,0);
};

Predefined_typeContext.prototype.binary_type = function() {
    return this.getTypedRuleContext(Binary_typeContext,0);
};

Predefined_typeContext.prototype.network_type = function() {
    return this.getTypedRuleContext(Network_typeContext,0);
};

Predefined_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPredefined_type(this);
	}
};

Predefined_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPredefined_type(this);
	}
};

Predefined_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPredefined_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Predefined_typeContext = Predefined_typeContext;

SQLParser.prototype.predefined_type = function() {

    var localctx = new Predefined_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SQLParser.RULE_predefined_type);
    try {
        this.state = 683;
        switch(this._input.LA(1)) {
        case SQLParser.CHARACTER:
        case SQLParser.CHAR:
        case SQLParser.VARCHAR:
        case SQLParser.TEXT:
            this.enterOuterAlt(localctx, 1);
            this.state = 674;
            this.character_string_type();
            break;
        case SQLParser.NATIONAL:
        case SQLParser.NCHAR:
        case SQLParser.NVARCHAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 675;
            this.national_character_string_type();
            break;
        case SQLParser.BLOB:
        case SQLParser.BYTEA:
            this.enterOuterAlt(localctx, 3);
            this.state = 676;
            this.binary_large_object_string_type();
            break;
        case SQLParser.DEC:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 677;
            this.numeric_type();
            break;
        case SQLParser.BOOLEAN:
        case SQLParser.BOOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 678;
            this.boolean_type();
            break;
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMETZ:
        case SQLParser.TIMESTAMP:
        case SQLParser.TIMESTAMPTZ:
            this.enterOuterAlt(localctx, 6);
            this.state = 679;
            this.datetime_type();
            break;
        case SQLParser.BIT:
        case SQLParser.VARBIT:
            this.enterOuterAlt(localctx, 7);
            this.state = 680;
            this.bit_type();
            break;
        case SQLParser.BINARY:
        case SQLParser.VARBINARY:
            this.enterOuterAlt(localctx, 8);
            this.state = 681;
            this.binary_type();
            break;
        case SQLParser.INET4:
            this.enterOuterAlt(localctx, 9);
            this.state = 682;
            this.network_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Network_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_network_type;
    return this;
}

Network_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Network_typeContext.prototype.constructor = Network_typeContext;

Network_typeContext.prototype.INET4 = function() {
    return this.getToken(SQLParser.INET4, 0);
};

Network_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNetwork_type(this);
	}
};

Network_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNetwork_type(this);
	}
};

Network_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNetwork_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Network_typeContext = Network_typeContext;

SQLParser.prototype.network_type = function() {

    var localctx = new Network_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SQLParser.RULE_network_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this.match(SQLParser.INET4);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Character_string_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_character_string_type;
    return this;
}

Character_string_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Character_string_typeContext.prototype.constructor = Character_string_typeContext;

Character_string_typeContext.prototype.CHARACTER = function() {
    return this.getToken(SQLParser.CHARACTER, 0);
};

Character_string_typeContext.prototype.type_length = function() {
    return this.getTypedRuleContext(Type_lengthContext,0);
};

Character_string_typeContext.prototype.CHAR = function() {
    return this.getToken(SQLParser.CHAR, 0);
};

Character_string_typeContext.prototype.VARYING = function() {
    return this.getToken(SQLParser.VARYING, 0);
};

Character_string_typeContext.prototype.VARCHAR = function() {
    return this.getToken(SQLParser.VARCHAR, 0);
};

Character_string_typeContext.prototype.TEXT = function() {
    return this.getToken(SQLParser.TEXT, 0);
};

Character_string_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCharacter_string_type(this);
	}
};

Character_string_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCharacter_string_type(this);
	}
};

Character_string_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCharacter_string_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Character_string_typeContext = Character_string_typeContext;

SQLParser.prototype.character_string_type = function() {

    var localctx = new Character_string_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SQLParser.RULE_character_string_type);
    var _la = 0; // Token type
    try {
        this.state = 710;
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 687;
            this.match(SQLParser.CHARACTER);
            this.state = 689;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 688;
                this.type_length();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 691;
            this.match(SQLParser.CHAR);
            this.state = 693;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 692;
                this.type_length();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 695;
            this.match(SQLParser.CHARACTER);
            this.state = 696;
            this.match(SQLParser.VARYING);
            this.state = 698;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 697;
                this.type_length();
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 700;
            this.match(SQLParser.CHAR);
            this.state = 701;
            this.match(SQLParser.VARYING);
            this.state = 703;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 702;
                this.type_length();
            }

            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 705;
            this.match(SQLParser.VARCHAR);
            this.state = 707;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 706;
                this.type_length();
            }

            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 709;
            this.match(SQLParser.TEXT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_lengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_type_length;
    return this;
}

Type_lengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_lengthContext.prototype.constructor = Type_lengthContext;

Type_lengthContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Type_lengthContext.prototype.NUMBER = function() {
    return this.getToken(SQLParser.NUMBER, 0);
};

Type_lengthContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Type_lengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterType_length(this);
	}
};

Type_lengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitType_length(this);
	}
};

Type_lengthContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitType_length(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Type_lengthContext = Type_lengthContext;

SQLParser.prototype.type_length = function() {

    var localctx = new Type_lengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SQLParser.RULE_type_length);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 712;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 713;
        this.match(SQLParser.NUMBER);
        this.state = 714;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function National_character_string_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_national_character_string_type;
    return this;
}

National_character_string_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
National_character_string_typeContext.prototype.constructor = National_character_string_typeContext;

National_character_string_typeContext.prototype.NATIONAL = function() {
    return this.getToken(SQLParser.NATIONAL, 0);
};

National_character_string_typeContext.prototype.CHARACTER = function() {
    return this.getToken(SQLParser.CHARACTER, 0);
};

National_character_string_typeContext.prototype.type_length = function() {
    return this.getTypedRuleContext(Type_lengthContext,0);
};

National_character_string_typeContext.prototype.CHAR = function() {
    return this.getToken(SQLParser.CHAR, 0);
};

National_character_string_typeContext.prototype.NCHAR = function() {
    return this.getToken(SQLParser.NCHAR, 0);
};

National_character_string_typeContext.prototype.VARYING = function() {
    return this.getToken(SQLParser.VARYING, 0);
};

National_character_string_typeContext.prototype.NVARCHAR = function() {
    return this.getToken(SQLParser.NVARCHAR, 0);
};

National_character_string_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNational_character_string_type(this);
	}
};

National_character_string_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNational_character_string_type(this);
	}
};

National_character_string_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNational_character_string_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.National_character_string_typeContext = National_character_string_typeContext;

SQLParser.prototype.national_character_string_type = function() {

    var localctx = new National_character_string_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SQLParser.RULE_national_character_string_type);
    var _la = 0; // Token type
    try {
        this.state = 751;
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 716;
            this.match(SQLParser.NATIONAL);
            this.state = 717;
            this.match(SQLParser.CHARACTER);
            this.state = 719;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 718;
                this.type_length();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 721;
            this.match(SQLParser.NATIONAL);
            this.state = 722;
            this.match(SQLParser.CHAR);
            this.state = 724;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 723;
                this.type_length();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 726;
            this.match(SQLParser.NCHAR);
            this.state = 728;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 727;
                this.type_length();
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 730;
            this.match(SQLParser.NATIONAL);
            this.state = 731;
            this.match(SQLParser.CHARACTER);
            this.state = 732;
            this.match(SQLParser.VARYING);
            this.state = 734;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 733;
                this.type_length();
            }

            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 736;
            this.match(SQLParser.NATIONAL);
            this.state = 737;
            this.match(SQLParser.CHAR);
            this.state = 738;
            this.match(SQLParser.VARYING);
            this.state = 740;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 739;
                this.type_length();
            }

            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 742;
            this.match(SQLParser.NCHAR);
            this.state = 743;
            this.match(SQLParser.VARYING);
            this.state = 745;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 744;
                this.type_length();
            }

            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 747;
            this.match(SQLParser.NVARCHAR);
            this.state = 749;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 748;
                this.type_length();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Binary_large_object_string_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_binary_large_object_string_type;
    return this;
}

Binary_large_object_string_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_large_object_string_typeContext.prototype.constructor = Binary_large_object_string_typeContext;

Binary_large_object_string_typeContext.prototype.BLOB = function() {
    return this.getToken(SQLParser.BLOB, 0);
};

Binary_large_object_string_typeContext.prototype.type_length = function() {
    return this.getTypedRuleContext(Type_lengthContext,0);
};

Binary_large_object_string_typeContext.prototype.BYTEA = function() {
    return this.getToken(SQLParser.BYTEA, 0);
};

Binary_large_object_string_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBinary_large_object_string_type(this);
	}
};

Binary_large_object_string_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBinary_large_object_string_type(this);
	}
};

Binary_large_object_string_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBinary_large_object_string_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Binary_large_object_string_typeContext = Binary_large_object_string_typeContext;

SQLParser.prototype.binary_large_object_string_type = function() {

    var localctx = new Binary_large_object_string_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SQLParser.RULE_binary_large_object_string_type);
    var _la = 0; // Token type
    try {
        this.state = 761;
        switch(this._input.LA(1)) {
        case SQLParser.BLOB:
            this.enterOuterAlt(localctx, 1);
            this.state = 753;
            this.match(SQLParser.BLOB);
            this.state = 755;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 754;
                this.type_length();
            }

            break;
        case SQLParser.BYTEA:
            this.enterOuterAlt(localctx, 2);
            this.state = 757;
            this.match(SQLParser.BYTEA);
            this.state = 759;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 758;
                this.type_length();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_numeric_type;
    return this;
}

Numeric_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_typeContext.prototype.constructor = Numeric_typeContext;

Numeric_typeContext.prototype.exact_numeric_type = function() {
    return this.getTypedRuleContext(Exact_numeric_typeContext,0);
};

Numeric_typeContext.prototype.approximate_numeric_type = function() {
    return this.getTypedRuleContext(Approximate_numeric_typeContext,0);
};

Numeric_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNumeric_type(this);
	}
};

Numeric_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNumeric_type(this);
	}
};

Numeric_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNumeric_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Numeric_typeContext = Numeric_typeContext;

SQLParser.prototype.numeric_type = function() {

    var localctx = new Numeric_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SQLParser.RULE_numeric_type);
    try {
        this.state = 765;
        switch(this._input.LA(1)) {
        case SQLParser.DEC:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 763;
            this.exact_numeric_type();
            break;
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 764;
            this.approximate_numeric_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exact_numeric_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_exact_numeric_type;
    return this;
}

Exact_numeric_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exact_numeric_typeContext.prototype.constructor = Exact_numeric_typeContext;

Exact_numeric_typeContext.prototype.NUMERIC = function() {
    return this.getToken(SQLParser.NUMERIC, 0);
};

Exact_numeric_typeContext.prototype.precision_param = function() {
    return this.getTypedRuleContext(Precision_paramContext,0);
};

Exact_numeric_typeContext.prototype.DECIMAL = function() {
    return this.getToken(SQLParser.DECIMAL, 0);
};

Exact_numeric_typeContext.prototype.DEC = function() {
    return this.getToken(SQLParser.DEC, 0);
};

Exact_numeric_typeContext.prototype.INT1 = function() {
    return this.getToken(SQLParser.INT1, 0);
};

Exact_numeric_typeContext.prototype.TINYINT = function() {
    return this.getToken(SQLParser.TINYINT, 0);
};

Exact_numeric_typeContext.prototype.INT2 = function() {
    return this.getToken(SQLParser.INT2, 0);
};

Exact_numeric_typeContext.prototype.SMALLINT = function() {
    return this.getToken(SQLParser.SMALLINT, 0);
};

Exact_numeric_typeContext.prototype.INT4 = function() {
    return this.getToken(SQLParser.INT4, 0);
};

Exact_numeric_typeContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

Exact_numeric_typeContext.prototype.INTEGER = function() {
    return this.getToken(SQLParser.INTEGER, 0);
};

Exact_numeric_typeContext.prototype.INT8 = function() {
    return this.getToken(SQLParser.INT8, 0);
};

Exact_numeric_typeContext.prototype.BIGINT = function() {
    return this.getToken(SQLParser.BIGINT, 0);
};

Exact_numeric_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExact_numeric_type(this);
	}
};

Exact_numeric_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExact_numeric_type(this);
	}
};

Exact_numeric_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExact_numeric_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Exact_numeric_typeContext = Exact_numeric_typeContext;

SQLParser.prototype.exact_numeric_type = function() {

    var localctx = new Exact_numeric_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SQLParser.RULE_exact_numeric_type);
    var _la = 0; // Token type
    try {
        this.state = 788;
        switch(this._input.LA(1)) {
        case SQLParser.NUMERIC:
            this.enterOuterAlt(localctx, 1);
            this.state = 767;
            this.match(SQLParser.NUMERIC);
            this.state = 769;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 768;
                this.precision_param();
            }

            break;
        case SQLParser.DECIMAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 771;
            this.match(SQLParser.DECIMAL);
            this.state = 773;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 772;
                this.precision_param();
            }

            break;
        case SQLParser.DEC:
            this.enterOuterAlt(localctx, 3);
            this.state = 775;
            this.match(SQLParser.DEC);
            this.state = 777;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 776;
                this.precision_param();
            }

            break;
        case SQLParser.INT1:
            this.enterOuterAlt(localctx, 4);
            this.state = 779;
            this.match(SQLParser.INT1);
            break;
        case SQLParser.TINYINT:
            this.enterOuterAlt(localctx, 5);
            this.state = 780;
            this.match(SQLParser.TINYINT);
            break;
        case SQLParser.INT2:
            this.enterOuterAlt(localctx, 6);
            this.state = 781;
            this.match(SQLParser.INT2);
            break;
        case SQLParser.SMALLINT:
            this.enterOuterAlt(localctx, 7);
            this.state = 782;
            this.match(SQLParser.SMALLINT);
            break;
        case SQLParser.INT4:
            this.enterOuterAlt(localctx, 8);
            this.state = 783;
            this.match(SQLParser.INT4);
            break;
        case SQLParser.INT:
            this.enterOuterAlt(localctx, 9);
            this.state = 784;
            this.match(SQLParser.INT);
            break;
        case SQLParser.INTEGER:
            this.enterOuterAlt(localctx, 10);
            this.state = 785;
            this.match(SQLParser.INTEGER);
            break;
        case SQLParser.INT8:
            this.enterOuterAlt(localctx, 11);
            this.state = 786;
            this.match(SQLParser.INT8);
            break;
        case SQLParser.BIGINT:
            this.enterOuterAlt(localctx, 12);
            this.state = 787;
            this.match(SQLParser.BIGINT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Approximate_numeric_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_approximate_numeric_type;
    return this;
}

Approximate_numeric_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Approximate_numeric_typeContext.prototype.constructor = Approximate_numeric_typeContext;

Approximate_numeric_typeContext.prototype.FLOAT = function() {
    return this.getToken(SQLParser.FLOAT, 0);
};

Approximate_numeric_typeContext.prototype.precision_param = function() {
    return this.getTypedRuleContext(Precision_paramContext,0);
};

Approximate_numeric_typeContext.prototype.FLOAT4 = function() {
    return this.getToken(SQLParser.FLOAT4, 0);
};

Approximate_numeric_typeContext.prototype.REAL = function() {
    return this.getToken(SQLParser.REAL, 0);
};

Approximate_numeric_typeContext.prototype.FLOAT8 = function() {
    return this.getToken(SQLParser.FLOAT8, 0);
};

Approximate_numeric_typeContext.prototype.DOUBLE = function() {
    return this.getToken(SQLParser.DOUBLE, 0);
};

Approximate_numeric_typeContext.prototype.PRECISION = function() {
    return this.getToken(SQLParser.PRECISION, 0);
};

Approximate_numeric_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterApproximate_numeric_type(this);
	}
};

Approximate_numeric_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitApproximate_numeric_type(this);
	}
};

Approximate_numeric_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitApproximate_numeric_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Approximate_numeric_typeContext = Approximate_numeric_typeContext;

SQLParser.prototype.approximate_numeric_type = function() {

    var localctx = new Approximate_numeric_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SQLParser.RULE_approximate_numeric_type);
    var _la = 0; // Token type
    try {
        this.state = 800;
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 790;
            this.match(SQLParser.FLOAT);
            this.state = 792;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 791;
                this.precision_param();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 794;
            this.match(SQLParser.FLOAT4);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 795;
            this.match(SQLParser.REAL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 796;
            this.match(SQLParser.FLOAT8);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 797;
            this.match(SQLParser.DOUBLE);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 798;
            this.match(SQLParser.DOUBLE);
            this.state = 799;
            this.match(SQLParser.PRECISION);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Precision_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_precision_param;
    this.precision = null; // Token
    this.scale = null; // Token
    return this;
}

Precision_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precision_paramContext.prototype.constructor = Precision_paramContext;

Precision_paramContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Precision_paramContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Precision_paramContext.prototype.NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.NUMBER);
    } else {
        return this.getToken(SQLParser.NUMBER, i);
    }
};


Precision_paramContext.prototype.COMMA = function() {
    return this.getToken(SQLParser.COMMA, 0);
};

Precision_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPrecision_param(this);
	}
};

Precision_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPrecision_param(this);
	}
};

Precision_paramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPrecision_param(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Precision_paramContext = Precision_paramContext;

SQLParser.prototype.precision_param = function() {

    var localctx = new Precision_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SQLParser.RULE_precision_param);
    try {
        this.state = 810;
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 802;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 803;
            localctx.precision = this.match(SQLParser.NUMBER);
            this.state = 804;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 805;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 806;
            localctx.precision = this.match(SQLParser.NUMBER);
            this.state = 807;
            this.match(SQLParser.COMMA);
            this.state = 808;
            localctx.scale = this.match(SQLParser.NUMBER);
            this.state = 809;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_type;
    return this;
}

Boolean_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_typeContext.prototype.constructor = Boolean_typeContext;

Boolean_typeContext.prototype.BOOLEAN = function() {
    return this.getToken(SQLParser.BOOLEAN, 0);
};

Boolean_typeContext.prototype.BOOL = function() {
    return this.getToken(SQLParser.BOOL, 0);
};

Boolean_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_type(this);
	}
};

Boolean_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_type(this);
	}
};

Boolean_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_typeContext = Boolean_typeContext;

SQLParser.prototype.boolean_type = function() {

    var localctx = new Boolean_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SQLParser.RULE_boolean_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.BOOLEAN || _la===SQLParser.BOOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Datetime_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_datetime_type;
    return this;
}

Datetime_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Datetime_typeContext.prototype.constructor = Datetime_typeContext;

Datetime_typeContext.prototype.DATE = function() {
    return this.getToken(SQLParser.DATE, 0);
};

Datetime_typeContext.prototype.TIME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.TIME);
    } else {
        return this.getToken(SQLParser.TIME, i);
    }
};


Datetime_typeContext.prototype.WITH = function() {
    return this.getToken(SQLParser.WITH, 0);
};

Datetime_typeContext.prototype.ZONE = function() {
    return this.getToken(SQLParser.ZONE, 0);
};

Datetime_typeContext.prototype.TIMETZ = function() {
    return this.getToken(SQLParser.TIMETZ, 0);
};

Datetime_typeContext.prototype.TIMESTAMP = function() {
    return this.getToken(SQLParser.TIMESTAMP, 0);
};

Datetime_typeContext.prototype.TIMESTAMPTZ = function() {
    return this.getToken(SQLParser.TIMESTAMPTZ, 0);
};

Datetime_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDatetime_type(this);
	}
};

Datetime_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDatetime_type(this);
	}
};

Datetime_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDatetime_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Datetime_typeContext = Datetime_typeContext;

SQLParser.prototype.datetime_type = function() {

    var localctx = new Datetime_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SQLParser.RULE_datetime_type);
    try {
        this.state = 827;
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 814;
            this.match(SQLParser.DATE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 815;
            this.match(SQLParser.TIME);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 816;
            this.match(SQLParser.TIME);
            this.state = 817;
            this.match(SQLParser.WITH);
            this.state = 818;
            this.match(SQLParser.TIME);
            this.state = 819;
            this.match(SQLParser.ZONE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 820;
            this.match(SQLParser.TIMETZ);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 821;
            this.match(SQLParser.TIMESTAMP);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 822;
            this.match(SQLParser.TIMESTAMP);
            this.state = 823;
            this.match(SQLParser.WITH);
            this.state = 824;
            this.match(SQLParser.TIME);
            this.state = 825;
            this.match(SQLParser.ZONE);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 826;
            this.match(SQLParser.TIMESTAMPTZ);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bit_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_bit_type;
    return this;
}

Bit_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bit_typeContext.prototype.constructor = Bit_typeContext;

Bit_typeContext.prototype.BIT = function() {
    return this.getToken(SQLParser.BIT, 0);
};

Bit_typeContext.prototype.type_length = function() {
    return this.getTypedRuleContext(Type_lengthContext,0);
};

Bit_typeContext.prototype.VARBIT = function() {
    return this.getToken(SQLParser.VARBIT, 0);
};

Bit_typeContext.prototype.VARYING = function() {
    return this.getToken(SQLParser.VARYING, 0);
};

Bit_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBit_type(this);
	}
};

Bit_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBit_type(this);
	}
};

Bit_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBit_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Bit_typeContext = Bit_typeContext;

SQLParser.prototype.bit_type = function() {

    var localctx = new Bit_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SQLParser.RULE_bit_type);
    var _la = 0; // Token type
    try {
        this.state = 842;
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 829;
            this.match(SQLParser.BIT);
            this.state = 831;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 830;
                this.type_length();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 833;
            this.match(SQLParser.VARBIT);
            this.state = 835;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 834;
                this.type_length();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 837;
            this.match(SQLParser.BIT);
            this.state = 838;
            this.match(SQLParser.VARYING);
            this.state = 840;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 839;
                this.type_length();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Binary_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_binary_type;
    return this;
}

Binary_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_typeContext.prototype.constructor = Binary_typeContext;

Binary_typeContext.prototype.BINARY = function() {
    return this.getToken(SQLParser.BINARY, 0);
};

Binary_typeContext.prototype.type_length = function() {
    return this.getTypedRuleContext(Type_lengthContext,0);
};

Binary_typeContext.prototype.VARYING = function() {
    return this.getToken(SQLParser.VARYING, 0);
};

Binary_typeContext.prototype.VARBINARY = function() {
    return this.getToken(SQLParser.VARBINARY, 0);
};

Binary_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBinary_type(this);
	}
};

Binary_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBinary_type(this);
	}
};

Binary_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBinary_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Binary_typeContext = Binary_typeContext;

SQLParser.prototype.binary_type = function() {

    var localctx = new Binary_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SQLParser.RULE_binary_type);
    var _la = 0; // Token type
    try {
        this.state = 857;
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 844;
            this.match(SQLParser.BINARY);
            this.state = 846;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 845;
                this.type_length();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 848;
            this.match(SQLParser.BINARY);
            this.state = 849;
            this.match(SQLParser.VARYING);
            this.state = 851;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 850;
                this.type_length();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 853;
            this.match(SQLParser.VARBINARY);
            this.state = 855;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 854;
                this.type_length();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_expression_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_value_expression_primary;
    return this;
}

Value_expression_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_expression_primaryContext.prototype.constructor = Value_expression_primaryContext;

Value_expression_primaryContext.prototype.parenthesized_value_expression = function() {
    return this.getTypedRuleContext(Parenthesized_value_expressionContext,0);
};

Value_expression_primaryContext.prototype.nonparenthesized_value_expression_primary = function() {
    return this.getTypedRuleContext(Nonparenthesized_value_expression_primaryContext,0);
};

Value_expression_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterValue_expression_primary(this);
	}
};

Value_expression_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitValue_expression_primary(this);
	}
};

Value_expression_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitValue_expression_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Value_expression_primaryContext = Value_expression_primaryContext;

SQLParser.prototype.value_expression_primary = function() {

    var localctx = new Value_expression_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SQLParser.RULE_value_expression_primary);
    try {
        this.state = 861;
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 859;
            this.parenthesized_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 860;
            this.nonparenthesized_value_expression_primary();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parenthesized_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_parenthesized_value_expression;
    return this;
}

Parenthesized_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesized_value_expressionContext.prototype.constructor = Parenthesized_value_expressionContext;

Parenthesized_value_expressionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Parenthesized_value_expressionContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

Parenthesized_value_expressionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Parenthesized_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterParenthesized_value_expression(this);
	}
};

Parenthesized_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitParenthesized_value_expression(this);
	}
};

Parenthesized_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitParenthesized_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Parenthesized_value_expressionContext = Parenthesized_value_expressionContext;

SQLParser.prototype.parenthesized_value_expression = function() {

    var localctx = new Parenthesized_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SQLParser.RULE_parenthesized_value_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 863;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 864;
        this.value_expression();
        this.state = 865;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nonparenthesized_value_expression_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_nonparenthesized_value_expression_primary;
    return this;
}

Nonparenthesized_value_expression_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonparenthesized_value_expression_primaryContext.prototype.constructor = Nonparenthesized_value_expression_primaryContext;

Nonparenthesized_value_expression_primaryContext.prototype.unsigned_value_specification = function() {
    return this.getTypedRuleContext(Unsigned_value_specificationContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.column_reference = function() {
    return this.getTypedRuleContext(Column_referenceContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.set_function_specification = function() {
    return this.getTypedRuleContext(Set_function_specificationContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.scalar_subquery = function() {
    return this.getTypedRuleContext(Scalar_subqueryContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.case_expression = function() {
    return this.getTypedRuleContext(Case_expressionContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.cast_specification = function() {
    return this.getTypedRuleContext(Cast_specificationContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.routine_invocation = function() {
    return this.getTypedRuleContext(Routine_invocationContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNonparenthesized_value_expression_primary(this);
	}
};

Nonparenthesized_value_expression_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNonparenthesized_value_expression_primary(this);
	}
};

Nonparenthesized_value_expression_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNonparenthesized_value_expression_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Nonparenthesized_value_expression_primaryContext = Nonparenthesized_value_expression_primaryContext;

SQLParser.prototype.nonparenthesized_value_expression_primary = function() {

    var localctx = new Nonparenthesized_value_expression_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SQLParser.RULE_nonparenthesized_value_expression_primary);
    try {
        this.state = 874;
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 867;
            this.unsigned_value_specification();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 868;
            this.column_reference();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 869;
            this.set_function_specification();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 870;
            this.scalar_subquery();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 871;
            this.case_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 872;
            this.cast_specification();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 873;
            this.routine_invocation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unsigned_value_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_unsigned_value_specification;
    return this;
}

Unsigned_value_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unsigned_value_specificationContext.prototype.constructor = Unsigned_value_specificationContext;

Unsigned_value_specificationContext.prototype.unsigned_literal = function() {
    return this.getTypedRuleContext(Unsigned_literalContext,0);
};

Unsigned_value_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUnsigned_value_specification(this);
	}
};

Unsigned_value_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUnsigned_value_specification(this);
	}
};

Unsigned_value_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitUnsigned_value_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Unsigned_value_specificationContext = Unsigned_value_specificationContext;

SQLParser.prototype.unsigned_value_specification = function() {

    var localctx = new Unsigned_value_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SQLParser.RULE_unsigned_value_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.unsigned_literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unsigned_numeric_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_unsigned_numeric_literal;
    return this;
}

Unsigned_numeric_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unsigned_numeric_literalContext.prototype.constructor = Unsigned_numeric_literalContext;

Unsigned_numeric_literalContext.prototype.NUMBER = function() {
    return this.getToken(SQLParser.NUMBER, 0);
};

Unsigned_numeric_literalContext.prototype.REAL_NUMBER = function() {
    return this.getToken(SQLParser.REAL_NUMBER, 0);
};

Unsigned_numeric_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUnsigned_numeric_literal(this);
	}
};

Unsigned_numeric_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUnsigned_numeric_literal(this);
	}
};

Unsigned_numeric_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitUnsigned_numeric_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Unsigned_numeric_literalContext = Unsigned_numeric_literalContext;

SQLParser.prototype.unsigned_numeric_literal = function() {

    var localctx = new Unsigned_numeric_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SQLParser.RULE_unsigned_numeric_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 878;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.NUMBER || _la===SQLParser.REAL_NUMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Signed_numerical_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_signed_numerical_literal;
    return this;
}

Signed_numerical_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signed_numerical_literalContext.prototype.constructor = Signed_numerical_literalContext;

Signed_numerical_literalContext.prototype.unsigned_numeric_literal = function() {
    return this.getTypedRuleContext(Unsigned_numeric_literalContext,0);
};

Signed_numerical_literalContext.prototype.sign = function() {
    return this.getTypedRuleContext(SignContext,0);
};

Signed_numerical_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSigned_numerical_literal(this);
	}
};

Signed_numerical_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSigned_numerical_literal(this);
	}
};

Signed_numerical_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSigned_numerical_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Signed_numerical_literalContext = Signed_numerical_literalContext;

SQLParser.prototype.signed_numerical_literal = function() {

    var localctx = new Signed_numerical_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SQLParser.RULE_signed_numerical_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 881;
        _la = this._input.LA(1);
        if(_la===SQLParser.PLUS || _la===SQLParser.MINUS) {
            this.state = 880;
            this.sign();
        }

        this.state = 883;
        this.unsigned_numeric_literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_function_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_set_function_specification;
    return this;
}

Set_function_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_function_specificationContext.prototype.constructor = Set_function_specificationContext;

Set_function_specificationContext.prototype.aggregate_function = function() {
    return this.getTypedRuleContext(Aggregate_functionContext,0);
};

Set_function_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSet_function_specification(this);
	}
};

Set_function_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSet_function_specification(this);
	}
};

Set_function_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSet_function_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Set_function_specificationContext = Set_function_specificationContext;

SQLParser.prototype.set_function_specification = function() {

    var localctx = new Set_function_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SQLParser.RULE_set_function_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 885;
        this.aggregate_function();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Aggregate_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_aggregate_function;
    return this;
}

Aggregate_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_functionContext.prototype.constructor = Aggregate_functionContext;

Aggregate_functionContext.prototype.COUNT = function() {
    return this.getToken(SQLParser.COUNT, 0);
};

Aggregate_functionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Aggregate_functionContext.prototype.MULTIPLY = function() {
    return this.getToken(SQLParser.MULTIPLY, 0);
};

Aggregate_functionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Aggregate_functionContext.prototype.general_set_function = function() {
    return this.getTypedRuleContext(General_set_functionContext,0);
};

Aggregate_functionContext.prototype.filter_clause = function() {
    return this.getTypedRuleContext(Filter_clauseContext,0);
};

Aggregate_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterAggregate_function(this);
	}
};

Aggregate_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitAggregate_function(this);
	}
};

Aggregate_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitAggregate_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Aggregate_functionContext = Aggregate_functionContext;

SQLParser.prototype.aggregate_function = function() {

    var localctx = new Aggregate_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SQLParser.RULE_aggregate_function);
    try {
        this.state = 895;
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 887;
            this.match(SQLParser.COUNT);
            this.state = 888;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 889;
            this.match(SQLParser.MULTIPLY);
            this.state = 890;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 891;
            this.general_set_function();
            this.state = 893;
            var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
            if(la_===1) {
                this.state = 892;
                this.filter_clause();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_set_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_general_set_function;
    return this;
}

General_set_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_set_functionContext.prototype.constructor = General_set_functionContext;

General_set_functionContext.prototype.set_function_type = function() {
    return this.getTypedRuleContext(Set_function_typeContext,0);
};

General_set_functionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

General_set_functionContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

General_set_functionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

General_set_functionContext.prototype.set_qualifier = function() {
    return this.getTypedRuleContext(Set_qualifierContext,0);
};

General_set_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGeneral_set_function(this);
	}
};

General_set_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGeneral_set_function(this);
	}
};

General_set_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGeneral_set_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.General_set_functionContext = General_set_functionContext;

SQLParser.prototype.general_set_function = function() {

    var localctx = new General_set_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SQLParser.RULE_general_set_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 897;
        this.set_function_type();
        this.state = 898;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 900;
        _la = this._input.LA(1);
        if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
            this.state = 899;
            this.set_qualifier();
        }

        this.state = 902;
        this.value_expression();
        this.state = 903;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_function_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_set_function_type;
    return this;
}

Set_function_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_function_typeContext.prototype.constructor = Set_function_typeContext;

Set_function_typeContext.prototype.AVG = function() {
    return this.getToken(SQLParser.AVG, 0);
};

Set_function_typeContext.prototype.MAX = function() {
    return this.getToken(SQLParser.MAX, 0);
};

Set_function_typeContext.prototype.MIN = function() {
    return this.getToken(SQLParser.MIN, 0);
};

Set_function_typeContext.prototype.SUM = function() {
    return this.getToken(SQLParser.SUM, 0);
};

Set_function_typeContext.prototype.EVERY = function() {
    return this.getToken(SQLParser.EVERY, 0);
};

Set_function_typeContext.prototype.ANY = function() {
    return this.getToken(SQLParser.ANY, 0);
};

Set_function_typeContext.prototype.SOME = function() {
    return this.getToken(SQLParser.SOME, 0);
};

Set_function_typeContext.prototype.COUNT = function() {
    return this.getToken(SQLParser.COUNT, 0);
};

Set_function_typeContext.prototype.STDDEV_POP = function() {
    return this.getToken(SQLParser.STDDEV_POP, 0);
};

Set_function_typeContext.prototype.STDDEV_SAMP = function() {
    return this.getToken(SQLParser.STDDEV_SAMP, 0);
};

Set_function_typeContext.prototype.VAR_SAMP = function() {
    return this.getToken(SQLParser.VAR_SAMP, 0);
};

Set_function_typeContext.prototype.VAR_POP = function() {
    return this.getToken(SQLParser.VAR_POP, 0);
};

Set_function_typeContext.prototype.COLLECT = function() {
    return this.getToken(SQLParser.COLLECT, 0);
};

Set_function_typeContext.prototype.FUSION = function() {
    return this.getToken(SQLParser.FUSION, 0);
};

Set_function_typeContext.prototype.INTERSECTION = function() {
    return this.getToken(SQLParser.INTERSECTION, 0);
};

Set_function_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSet_function_type(this);
	}
};

Set_function_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSet_function_type(this);
	}
};

Set_function_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSet_function_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Set_function_typeContext = Set_function_typeContext;

SQLParser.prototype.set_function_type = function() {

    var localctx = new Set_function_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SQLParser.RULE_set_function_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 905;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.ANY || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (SQLParser.SOME - 42)) | (1 << (SQLParser.AVG - 42)) | (1 << (SQLParser.COLLECT - 42)) | (1 << (SQLParser.COUNT - 42)) | (1 << (SQLParser.EVERY - 42)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (SQLParser.FUSION - 78)) | (1 << (SQLParser.INTERSECTION - 78)) | (1 << (SQLParser.MAX - 78)) | (1 << (SQLParser.MIN - 78)))) !== 0) || ((((_la - 114)) & ~0x1f) == 0 && ((1 << (_la - 114)) & ((1 << (SQLParser.STDDEV_POP - 114)) | (1 << (SQLParser.STDDEV_SAMP - 114)) | (1 << (SQLParser.SUM - 114)) | (1 << (SQLParser.VAR_SAMP - 114)) | (1 << (SQLParser.VAR_POP - 114)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Filter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_filter_clause;
    return this;
}

Filter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Filter_clauseContext.prototype.constructor = Filter_clauseContext;

Filter_clauseContext.prototype.FILTER = function() {
    return this.getToken(SQLParser.FILTER, 0);
};

Filter_clauseContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Filter_clauseContext.prototype.WHERE = function() {
    return this.getToken(SQLParser.WHERE, 0);
};

Filter_clauseContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Filter_clauseContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Filter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFilter_clause(this);
	}
};

Filter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFilter_clause(this);
	}
};

Filter_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitFilter_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Filter_clauseContext = Filter_clauseContext;

SQLParser.prototype.filter_clause = function() {

    var localctx = new Filter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SQLParser.RULE_filter_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.match(SQLParser.FILTER);
        this.state = 908;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 909;
        this.match(SQLParser.WHERE);
        this.state = 910;
        this.search_condition();
        this.state = 911;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_operationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_grouping_operation;
    return this;
}

Grouping_operationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_operationContext.prototype.constructor = Grouping_operationContext;

Grouping_operationContext.prototype.GROUPING = function() {
    return this.getToken(SQLParser.GROUPING, 0);
};

Grouping_operationContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Grouping_operationContext.prototype.column_reference_list = function() {
    return this.getTypedRuleContext(Column_reference_listContext,0);
};

Grouping_operationContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Grouping_operationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGrouping_operation(this);
	}
};

Grouping_operationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGrouping_operation(this);
	}
};

Grouping_operationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGrouping_operation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Grouping_operationContext = Grouping_operationContext;

SQLParser.prototype.grouping_operation = function() {

    var localctx = new Grouping_operationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SQLParser.RULE_grouping_operation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 913;
        this.match(SQLParser.GROUPING);
        this.state = 914;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 915;
        this.column_reference_list();
        this.state = 916;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_case_expression;
    return this;
}

Case_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_expressionContext.prototype.constructor = Case_expressionContext;

Case_expressionContext.prototype.case_specification = function() {
    return this.getTypedRuleContext(Case_specificationContext,0);
};

Case_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCase_expression(this);
	}
};

Case_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCase_expression(this);
	}
};

Case_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCase_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Case_expressionContext = Case_expressionContext;

SQLParser.prototype.case_expression = function() {

    var localctx = new Case_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SQLParser.RULE_case_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        this.case_specification();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_abbreviationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_case_abbreviation;
    return this;
}

Case_abbreviationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_abbreviationContext.prototype.constructor = Case_abbreviationContext;

Case_abbreviationContext.prototype.NULLIF = function() {
    return this.getToken(SQLParser.NULLIF, 0);
};

Case_abbreviationContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Case_abbreviationContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

Case_abbreviationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Case_abbreviationContext.prototype.boolean_value_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Boolean_value_expressionContext);
    } else {
        return this.getTypedRuleContext(Boolean_value_expressionContext,i);
    }
};

Case_abbreviationContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Case_abbreviationContext.prototype.COALESCE = function() {
    return this.getToken(SQLParser.COALESCE, 0);
};

Case_abbreviationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCase_abbreviation(this);
	}
};

Case_abbreviationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCase_abbreviation(this);
	}
};

Case_abbreviationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCase_abbreviation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Case_abbreviationContext = Case_abbreviationContext;

SQLParser.prototype.case_abbreviation = function() {

    var localctx = new Case_abbreviationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SQLParser.RULE_case_abbreviation);
    var _la = 0; // Token type
    try {
        this.state = 938;
        switch(this._input.LA(1)) {
        case SQLParser.NULLIF:
            this.enterOuterAlt(localctx, 1);
            this.state = 920;
            this.match(SQLParser.NULLIF);
            this.state = 921;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 922;
            this.numeric_value_expression();
            this.state = 923;
            this.match(SQLParser.COMMA);
            this.state = 924;
            this.boolean_value_expression();
            this.state = 925;
            this.match(SQLParser.RIGHT_PAREN);
            break;
        case SQLParser.COALESCE:
            this.enterOuterAlt(localctx, 2);
            this.state = 927;
            this.match(SQLParser.COALESCE);
            this.state = 928;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 929;
            this.numeric_value_expression();
            this.state = 932; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 930;
                this.match(SQLParser.COMMA);
                this.state = 931;
                this.boolean_value_expression();
                this.state = 934; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SQLParser.COMMA);
            this.state = 936;
            this.match(SQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_case_specification;
    return this;
}

Case_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_specificationContext.prototype.constructor = Case_specificationContext;

Case_specificationContext.prototype.simple_case = function() {
    return this.getTypedRuleContext(Simple_caseContext,0);
};

Case_specificationContext.prototype.searched_case = function() {
    return this.getTypedRuleContext(Searched_caseContext,0);
};

Case_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCase_specification(this);
	}
};

Case_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCase_specification(this);
	}
};

Case_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCase_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Case_specificationContext = Case_specificationContext;

SQLParser.prototype.case_specification = function() {

    var localctx = new Case_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SQLParser.RULE_case_specification);
    try {
        this.state = 942;
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 940;
            this.simple_case();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 941;
            this.searched_case();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_caseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_simple_case;
    return this;
}

Simple_caseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_caseContext.prototype.constructor = Simple_caseContext;

Simple_caseContext.prototype.CASE = function() {
    return this.getToken(SQLParser.CASE, 0);
};

Simple_caseContext.prototype.boolean_value_expression = function() {
    return this.getTypedRuleContext(Boolean_value_expressionContext,0);
};

Simple_caseContext.prototype.END = function() {
    return this.getToken(SQLParser.END, 0);
};

Simple_caseContext.prototype.simple_when_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_when_clauseContext);
    } else {
        return this.getTypedRuleContext(Simple_when_clauseContext,i);
    }
};

Simple_caseContext.prototype.else_clause = function() {
    return this.getTypedRuleContext(Else_clauseContext,0);
};

Simple_caseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSimple_case(this);
	}
};

Simple_caseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSimple_case(this);
	}
};

Simple_caseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSimple_case(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Simple_caseContext = Simple_caseContext;

SQLParser.prototype.simple_case = function() {

    var localctx = new Simple_caseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SQLParser.RULE_simple_case);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 944;
        this.match(SQLParser.CASE);
        this.state = 945;
        this.boolean_value_expression();
        this.state = 947; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 946;
            this.simple_when_clause();
            this.state = 949; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SQLParser.WHEN);
        this.state = 952;
        _la = this._input.LA(1);
        if(_la===SQLParser.ELSE) {
            this.state = 951;
            this.else_clause();
        }

        this.state = 954;
        this.match(SQLParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Searched_caseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_searched_case;
    return this;
}

Searched_caseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Searched_caseContext.prototype.constructor = Searched_caseContext;

Searched_caseContext.prototype.CASE = function() {
    return this.getToken(SQLParser.CASE, 0);
};

Searched_caseContext.prototype.END = function() {
    return this.getToken(SQLParser.END, 0);
};

Searched_caseContext.prototype.searched_when_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Searched_when_clauseContext);
    } else {
        return this.getTypedRuleContext(Searched_when_clauseContext,i);
    }
};

Searched_caseContext.prototype.else_clause = function() {
    return this.getTypedRuleContext(Else_clauseContext,0);
};

Searched_caseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSearched_case(this);
	}
};

Searched_caseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSearched_case(this);
	}
};

Searched_caseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSearched_case(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Searched_caseContext = Searched_caseContext;

SQLParser.prototype.searched_case = function() {

    var localctx = new Searched_caseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SQLParser.RULE_searched_case);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 956;
        this.match(SQLParser.CASE);
        this.state = 958; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 957;
            this.searched_when_clause();
            this.state = 960; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SQLParser.WHEN);
        this.state = 963;
        _la = this._input.LA(1);
        if(_la===SQLParser.ELSE) {
            this.state = 962;
            this.else_clause();
        }

        this.state = 965;
        this.match(SQLParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_when_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_simple_when_clause;
    return this;
}

Simple_when_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_when_clauseContext.prototype.constructor = Simple_when_clauseContext;

Simple_when_clauseContext.prototype.WHEN = function() {
    return this.getToken(SQLParser.WHEN, 0);
};

Simple_when_clauseContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Simple_when_clauseContext.prototype.THEN = function() {
    return this.getToken(SQLParser.THEN, 0);
};

Simple_when_clauseContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

Simple_when_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSimple_when_clause(this);
	}
};

Simple_when_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSimple_when_clause(this);
	}
};

Simple_when_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSimple_when_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Simple_when_clauseContext = Simple_when_clauseContext;

SQLParser.prototype.simple_when_clause = function() {

    var localctx = new Simple_when_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SQLParser.RULE_simple_when_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this.match(SQLParser.WHEN);
        this.state = 968;
        this.search_condition();
        this.state = 969;
        this.match(SQLParser.THEN);
        this.state = 970;
        this.result();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Searched_when_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_searched_when_clause;
    this.c = null; // Search_conditionContext
    this.r = null; // ResultContext
    return this;
}

Searched_when_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Searched_when_clauseContext.prototype.constructor = Searched_when_clauseContext;

Searched_when_clauseContext.prototype.WHEN = function() {
    return this.getToken(SQLParser.WHEN, 0);
};

Searched_when_clauseContext.prototype.THEN = function() {
    return this.getToken(SQLParser.THEN, 0);
};

Searched_when_clauseContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Searched_when_clauseContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

Searched_when_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSearched_when_clause(this);
	}
};

Searched_when_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSearched_when_clause(this);
	}
};

Searched_when_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSearched_when_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Searched_when_clauseContext = Searched_when_clauseContext;

SQLParser.prototype.searched_when_clause = function() {

    var localctx = new Searched_when_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SQLParser.RULE_searched_when_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 972;
        this.match(SQLParser.WHEN);
        this.state = 973;
        localctx.c = this.search_condition();
        this.state = 974;
        this.match(SQLParser.THEN);
        this.state = 975;
        localctx.r = this.result();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_else_clause;
    this.r = null; // ResultContext
    return this;
}

Else_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_clauseContext.prototype.constructor = Else_clauseContext;

Else_clauseContext.prototype.ELSE = function() {
    return this.getToken(SQLParser.ELSE, 0);
};

Else_clauseContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

Else_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterElse_clause(this);
	}
};

Else_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitElse_clause(this);
	}
};

Else_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitElse_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Else_clauseContext = Else_clauseContext;

SQLParser.prototype.else_clause = function() {

    var localctx = new Else_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SQLParser.RULE_else_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 977;
        this.match(SQLParser.ELSE);
        this.state = 978;
        localctx.r = this.result();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_result;
    return this;
}

ResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResultContext.prototype.constructor = ResultContext;

ResultContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

ResultContext.prototype.NULL = function() {
    return this.getToken(SQLParser.NULL, 0);
};

ResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterResult(this);
	}
};

ResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitResult(this);
	}
};

ResultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitResult(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.ResultContext = ResultContext;

SQLParser.prototype.result = function() {

    var localctx = new ResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SQLParser.RULE_result);
    try {
        this.state = 982;
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 980;
            this.value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 981;
            this.match(SQLParser.NULL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cast_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cast_specification;
    return this;
}

Cast_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cast_specificationContext.prototype.constructor = Cast_specificationContext;

Cast_specificationContext.prototype.CAST = function() {
    return this.getToken(SQLParser.CAST, 0);
};

Cast_specificationContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Cast_specificationContext.prototype.cast_operand = function() {
    return this.getTypedRuleContext(Cast_operandContext,0);
};

Cast_specificationContext.prototype.AS = function() {
    return this.getToken(SQLParser.AS, 0);
};

Cast_specificationContext.prototype.cast_target = function() {
    return this.getTypedRuleContext(Cast_targetContext,0);
};

Cast_specificationContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Cast_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCast_specification(this);
	}
};

Cast_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCast_specification(this);
	}
};

Cast_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCast_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Cast_specificationContext = Cast_specificationContext;

SQLParser.prototype.cast_specification = function() {

    var localctx = new Cast_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SQLParser.RULE_cast_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 984;
        this.match(SQLParser.CAST);
        this.state = 985;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 986;
        this.cast_operand();
        this.state = 987;
        this.match(SQLParser.AS);
        this.state = 988;
        this.cast_target();
        this.state = 989;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cast_operandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cast_operand;
    return this;
}

Cast_operandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cast_operandContext.prototype.constructor = Cast_operandContext;

Cast_operandContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

Cast_operandContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCast_operand(this);
	}
};

Cast_operandContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCast_operand(this);
	}
};

Cast_operandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCast_operand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Cast_operandContext = Cast_operandContext;

SQLParser.prototype.cast_operand = function() {

    var localctx = new Cast_operandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SQLParser.RULE_cast_operand);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 991;
        this.value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cast_targetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cast_target;
    return this;
}

Cast_targetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cast_targetContext.prototype.constructor = Cast_targetContext;

Cast_targetContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Cast_targetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCast_target(this);
	}
};

Cast_targetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCast_target(this);
	}
};

Cast_targetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCast_target(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Cast_targetContext = Cast_targetContext;

SQLParser.prototype.cast_target = function() {

    var localctx = new Cast_targetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SQLParser.RULE_cast_target);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 993;
        this.data_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_value_expression;
    return this;
}

Value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_expressionContext.prototype.constructor = Value_expressionContext;

Value_expressionContext.prototype.common_value_expression = function() {
    return this.getTypedRuleContext(Common_value_expressionContext,0);
};

Value_expressionContext.prototype.row_value_expression = function() {
    return this.getTypedRuleContext(Row_value_expressionContext,0);
};

Value_expressionContext.prototype.boolean_value_expression = function() {
    return this.getTypedRuleContext(Boolean_value_expressionContext,0);
};

Value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterValue_expression(this);
	}
};

Value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitValue_expression(this);
	}
};

Value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitValue_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Value_expressionContext = Value_expressionContext;

SQLParser.prototype.value_expression = function() {

    var localctx = new Value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SQLParser.RULE_value_expression);
    try {
        this.state = 998;
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 995;
            this.common_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 996;
            this.row_value_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 997;
            this.boolean_value_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Common_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_common_value_expression;
    return this;
}

Common_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Common_value_expressionContext.prototype.constructor = Common_value_expressionContext;

Common_value_expressionContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

Common_value_expressionContext.prototype.string_value_expression = function() {
    return this.getTypedRuleContext(String_value_expressionContext,0);
};

Common_value_expressionContext.prototype.NULL = function() {
    return this.getToken(SQLParser.NULL, 0);
};

Common_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCommon_value_expression(this);
	}
};

Common_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCommon_value_expression(this);
	}
};

Common_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCommon_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Common_value_expressionContext = Common_value_expressionContext;

SQLParser.prototype.common_value_expression = function() {

    var localctx = new Common_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SQLParser.RULE_common_value_expression);
    try {
        this.state = 1003;
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1000;
            this.numeric_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1001;
            this.string_value_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1002;
            this.match(SQLParser.NULL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_numeric_value_expression;
    this.left = null; // TermContext
    this.right = null; // TermContext
    return this;
}

Numeric_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_value_expressionContext.prototype.constructor = Numeric_value_expressionContext;

Numeric_value_expressionContext.prototype.term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermContext);
    } else {
        return this.getTypedRuleContext(TermContext,i);
    }
};

Numeric_value_expressionContext.prototype.PLUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.PLUS);
    } else {
        return this.getToken(SQLParser.PLUS, i);
    }
};


Numeric_value_expressionContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.MINUS);
    } else {
        return this.getToken(SQLParser.MINUS, i);
    }
};


Numeric_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNumeric_value_expression(this);
	}
};

Numeric_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNumeric_value_expression(this);
	}
};

Numeric_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNumeric_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Numeric_value_expressionContext = Numeric_value_expressionContext;

SQLParser.prototype.numeric_value_expression = function() {

    var localctx = new Numeric_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SQLParser.RULE_numeric_value_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1005;
        localctx.left = this.term();
        this.state = 1010;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.PLUS || _la===SQLParser.MINUS) {
            this.state = 1006;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.PLUS || _la===SQLParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1007;
            localctx.right = this.term();
            this.state = 1012;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_term;
    this.left = null; // FactorContext
    this.right = null; // FactorContext
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.factor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FactorContext);
    } else {
        return this.getTypedRuleContext(FactorContext,i);
    }
};

TermContext.prototype.MULTIPLY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.MULTIPLY);
    } else {
        return this.getToken(SQLParser.MULTIPLY, i);
    }
};


TermContext.prototype.DIVIDE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.DIVIDE);
    } else {
        return this.getToken(SQLParser.DIVIDE, i);
    }
};


TermContext.prototype.MODULAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.MODULAR);
    } else {
        return this.getToken(SQLParser.MODULAR, i);
    }
};


TermContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTerm(this);
	}
};

TermContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTerm(this);
	}
};

TermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.TermContext = TermContext;

SQLParser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SQLParser.RULE_term);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1013;
        localctx.left = this.factor();
        this.state = 1018;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 188)) & ~0x1f) == 0 && ((1 << (_la - 188)) & ((1 << (SQLParser.MULTIPLY - 188)) | (1 << (SQLParser.DIVIDE - 188)) | (1 << (SQLParser.MODULAR - 188)))) !== 0)) {
            this.state = 1014;
            _la = this._input.LA(1);
            if(!(((((_la - 188)) & ~0x1f) == 0 && ((1 << (_la - 188)) & ((1 << (SQLParser.MULTIPLY - 188)) | (1 << (SQLParser.DIVIDE - 188)) | (1 << (SQLParser.MODULAR - 188)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1015;
            localctx.right = this.factor();
            this.state = 1020;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_factor;
    return this;
}

FactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FactorContext.prototype.constructor = FactorContext;

FactorContext.prototype.numeric_primary = function() {
    return this.getTypedRuleContext(Numeric_primaryContext,0);
};

FactorContext.prototype.sign = function() {
    return this.getTypedRuleContext(SignContext,0);
};

FactorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFactor(this);
	}
};

FactorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFactor(this);
	}
};

FactorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitFactor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.FactorContext = FactorContext;

SQLParser.prototype.factor = function() {

    var localctx = new FactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SQLParser.RULE_factor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1022;
        _la = this._input.LA(1);
        if(_la===SQLParser.PLUS || _la===SQLParser.MINUS) {
            this.state = 1021;
            this.sign();
        }

        this.state = 1024;
        this.numeric_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_array;
    return this;
}

ArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayContext.prototype.constructor = ArrayContext;

ArrayContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

ArrayContext.prototype.numeric_value_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Numeric_value_expressionContext);
    } else {
        return this.getTypedRuleContext(Numeric_value_expressionContext,i);
    }
};

ArrayContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

ArrayContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


ArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterArray(this);
	}
};

ArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitArray(this);
	}
};

ArrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitArray(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.ArrayContext = ArrayContext;

SQLParser.prototype.array = function() {

    var localctx = new ArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SQLParser.RULE_array);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1026;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1027;
        this.numeric_value_expression();
        this.state = 1032;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1028;
            this.match(SQLParser.COMMA);
            this.state = 1029;
            this.numeric_value_expression();
            this.state = 1034;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1035;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_numeric_primary;
    return this;
}

Numeric_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_primaryContext.prototype.constructor = Numeric_primaryContext;

Numeric_primaryContext.prototype.value_expression_primary = function() {
    return this.getTypedRuleContext(Value_expression_primaryContext,0);
};

Numeric_primaryContext.prototype.CAST_EXPRESSION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.CAST_EXPRESSION);
    } else {
        return this.getToken(SQLParser.CAST_EXPRESSION, i);
    }
};


Numeric_primaryContext.prototype.cast_target = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cast_targetContext);
    } else {
        return this.getTypedRuleContext(Cast_targetContext,i);
    }
};

Numeric_primaryContext.prototype.numeric_value_function = function() {
    return this.getTypedRuleContext(Numeric_value_functionContext,0);
};

Numeric_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNumeric_primary(this);
	}
};

Numeric_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNumeric_primary(this);
	}
};

Numeric_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNumeric_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Numeric_primaryContext = Numeric_primaryContext;

SQLParser.prototype.numeric_primary = function() {

    var localctx = new Numeric_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SQLParser.RULE_numeric_primary);
    var _la = 0; // Token type
    try {
        this.state = 1046;
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1037;
            this.value_expression_primary();
            this.state = 1042;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.CAST_EXPRESSION) {
                this.state = 1038;
                this.match(SQLParser.CAST_EXPRESSION);
                this.state = 1039;
                this.cast_target();
                this.state = 1044;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1045;
            this.numeric_value_function();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sign;
    return this;
}

SignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignContext.prototype.constructor = SignContext;

SignContext.prototype.PLUS = function() {
    return this.getToken(SQLParser.PLUS, 0);
};

SignContext.prototype.MINUS = function() {
    return this.getToken(SQLParser.MINUS, 0);
};

SignContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSign(this);
	}
};

SignContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSign(this);
	}
};

SignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.SignContext = SignContext;

SQLParser.prototype.sign = function() {

    var localctx = new SignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SQLParser.RULE_sign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1048;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.PLUS || _la===SQLParser.MINUS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_value_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_numeric_value_function;
    return this;
}

Numeric_value_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_value_functionContext.prototype.constructor = Numeric_value_functionContext;

Numeric_value_functionContext.prototype.extract_expression = function() {
    return this.getTypedRuleContext(Extract_expressionContext,0);
};

Numeric_value_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNumeric_value_function(this);
	}
};

Numeric_value_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNumeric_value_function(this);
	}
};

Numeric_value_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNumeric_value_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Numeric_value_functionContext = Numeric_value_functionContext;

SQLParser.prototype.numeric_value_function = function() {

    var localctx = new Numeric_value_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SQLParser.RULE_numeric_value_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1050;
        this.extract_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extract_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_extract_expression;
    this.extract_field_string = null; // Extract_fieldContext
    return this;
}

Extract_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extract_expressionContext.prototype.constructor = Extract_expressionContext;

Extract_expressionContext.prototype.EXTRACT = function() {
    return this.getToken(SQLParser.EXTRACT, 0);
};

Extract_expressionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Extract_expressionContext.prototype.FROM = function() {
    return this.getToken(SQLParser.FROM, 0);
};

Extract_expressionContext.prototype.extract_source = function() {
    return this.getTypedRuleContext(Extract_sourceContext,0);
};

Extract_expressionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Extract_expressionContext.prototype.extract_field = function() {
    return this.getTypedRuleContext(Extract_fieldContext,0);
};

Extract_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExtract_expression(this);
	}
};

Extract_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExtract_expression(this);
	}
};

Extract_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExtract_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Extract_expressionContext = Extract_expressionContext;

SQLParser.prototype.extract_expression = function() {

    var localctx = new Extract_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SQLParser.RULE_extract_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1052;
        this.match(SQLParser.EXTRACT);
        this.state = 1053;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1054;
        localctx.extract_field_string = this.extract_field();
        this.state = 1055;
        this.match(SQLParser.FROM);
        this.state = 1056;
        this.extract_source();
        this.state = 1057;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extract_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_extract_field;
    return this;
}

Extract_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extract_fieldContext.prototype.constructor = Extract_fieldContext;

Extract_fieldContext.prototype.primary_datetime_field = function() {
    return this.getTypedRuleContext(Primary_datetime_fieldContext,0);
};

Extract_fieldContext.prototype.time_zone_field = function() {
    return this.getTypedRuleContext(Time_zone_fieldContext,0);
};

Extract_fieldContext.prototype.extended_datetime_field = function() {
    return this.getTypedRuleContext(Extended_datetime_fieldContext,0);
};

Extract_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExtract_field(this);
	}
};

Extract_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExtract_field(this);
	}
};

Extract_fieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExtract_field(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Extract_fieldContext = Extract_fieldContext;

SQLParser.prototype.extract_field = function() {

    var localctx = new Extract_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SQLParser.RULE_extract_field);
    try {
        this.state = 1062;
        switch(this._input.LA(1)) {
        case SQLParser.DAY:
        case SQLParser.HOUR:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.SECOND:
        case SQLParser.YEAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 1059;
            this.primary_datetime_field();
            break;
        case SQLParser.TIMEZONE:
        case SQLParser.TIMEZONE_HOUR:
        case SQLParser.TIMEZONE_MINUTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1060;
            this.time_zone_field();
            break;
        case SQLParser.CENTURY:
        case SQLParser.DECADE:
        case SQLParser.DOW:
        case SQLParser.DOY:
        case SQLParser.EPOCH:
        case SQLParser.ISODOW:
        case SQLParser.ISOYEAR:
        case SQLParser.MICROSECONDS:
        case SQLParser.MILLENNIUM:
        case SQLParser.MILLISECONDS:
        case SQLParser.QUARTER:
        case SQLParser.WEEK:
            this.enterOuterAlt(localctx, 3);
            this.state = 1061;
            this.extended_datetime_field();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Time_zone_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_time_zone_field;
    return this;
}

Time_zone_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Time_zone_fieldContext.prototype.constructor = Time_zone_fieldContext;

Time_zone_fieldContext.prototype.TIMEZONE = function() {
    return this.getToken(SQLParser.TIMEZONE, 0);
};

Time_zone_fieldContext.prototype.TIMEZONE_HOUR = function() {
    return this.getToken(SQLParser.TIMEZONE_HOUR, 0);
};

Time_zone_fieldContext.prototype.TIMEZONE_MINUTE = function() {
    return this.getToken(SQLParser.TIMEZONE_MINUTE, 0);
};

Time_zone_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTime_zone_field(this);
	}
};

Time_zone_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTime_zone_field(this);
	}
};

Time_zone_fieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTime_zone_field(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Time_zone_fieldContext = Time_zone_fieldContext;

SQLParser.prototype.time_zone_field = function() {

    var localctx = new Time_zone_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SQLParser.RULE_time_zone_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1064;
        _la = this._input.LA(1);
        if(!(((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (SQLParser.TIMEZONE - 120)) | (1 << (SQLParser.TIMEZONE_HOUR - 120)) | (1 << (SQLParser.TIMEZONE_MINUTE - 120)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extract_sourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_extract_source;
    return this;
}

Extract_sourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extract_sourceContext.prototype.constructor = Extract_sourceContext;

Extract_sourceContext.prototype.column_reference = function() {
    return this.getTypedRuleContext(Column_referenceContext,0);
};

Extract_sourceContext.prototype.datetime_literal = function() {
    return this.getTypedRuleContext(Datetime_literalContext,0);
};

Extract_sourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExtract_source(this);
	}
};

Extract_sourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExtract_source(this);
	}
};

Extract_sourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExtract_source(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Extract_sourceContext = Extract_sourceContext;

SQLParser.prototype.extract_source = function() {

    var localctx = new Extract_sourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, SQLParser.RULE_extract_source);
    try {
        this.state = 1068;
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1066;
            this.column_reference();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1067;
            this.datetime_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function String_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_string_value_expression;
    return this;
}

String_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_value_expressionContext.prototype.constructor = String_value_expressionContext;

String_value_expressionContext.prototype.character_value_expression = function() {
    return this.getTypedRuleContext(Character_value_expressionContext,0);
};

String_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterString_value_expression(this);
	}
};

String_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitString_value_expression(this);
	}
};

String_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitString_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.String_value_expressionContext = String_value_expressionContext;

SQLParser.prototype.string_value_expression = function() {

    var localctx = new String_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, SQLParser.RULE_string_value_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1070;
        this.character_value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Character_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_character_value_expression;
    return this;
}

Character_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Character_value_expressionContext.prototype.constructor = Character_value_expressionContext;

Character_value_expressionContext.prototype.character_factor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Character_factorContext);
    } else {
        return this.getTypedRuleContext(Character_factorContext,i);
    }
};

Character_value_expressionContext.prototype.CONCATENATION_OPERATOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.CONCATENATION_OPERATOR);
    } else {
        return this.getToken(SQLParser.CONCATENATION_OPERATOR, i);
    }
};


Character_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCharacter_value_expression(this);
	}
};

Character_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCharacter_value_expression(this);
	}
};

Character_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCharacter_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Character_value_expressionContext = Character_value_expressionContext;

SQLParser.prototype.character_value_expression = function() {

    var localctx = new Character_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, SQLParser.RULE_character_value_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1072;
        this.character_factor();
        this.state = 1077;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.CONCATENATION_OPERATOR) {
            this.state = 1073;
            this.match(SQLParser.CONCATENATION_OPERATOR);
            this.state = 1074;
            this.character_factor();
            this.state = 1079;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Character_factorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_character_factor;
    return this;
}

Character_factorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Character_factorContext.prototype.constructor = Character_factorContext;

Character_factorContext.prototype.character_primary = function() {
    return this.getTypedRuleContext(Character_primaryContext,0);
};

Character_factorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCharacter_factor(this);
	}
};

Character_factorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCharacter_factor(this);
	}
};

Character_factorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCharacter_factor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Character_factorContext = Character_factorContext;

SQLParser.prototype.character_factor = function() {

    var localctx = new Character_factorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, SQLParser.RULE_character_factor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1080;
        this.character_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Character_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_character_primary;
    return this;
}

Character_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Character_primaryContext.prototype.constructor = Character_primaryContext;

Character_primaryContext.prototype.value_expression_primary = function() {
    return this.getTypedRuleContext(Value_expression_primaryContext,0);
};

Character_primaryContext.prototype.string_value_function = function() {
    return this.getTypedRuleContext(String_value_functionContext,0);
};

Character_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCharacter_primary(this);
	}
};

Character_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCharacter_primary(this);
	}
};

Character_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCharacter_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Character_primaryContext = Character_primaryContext;

SQLParser.prototype.character_primary = function() {

    var localctx = new Character_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, SQLParser.RULE_character_primary);
    try {
        this.state = 1084;
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1082;
            this.value_expression_primary();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1083;
            this.string_value_function();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function String_value_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_string_value_function;
    return this;
}

String_value_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_value_functionContext.prototype.constructor = String_value_functionContext;

String_value_functionContext.prototype.trim_function = function() {
    return this.getTypedRuleContext(Trim_functionContext,0);
};

String_value_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterString_value_function(this);
	}
};

String_value_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitString_value_function(this);
	}
};

String_value_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitString_value_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.String_value_functionContext = String_value_functionContext;

SQLParser.prototype.string_value_function = function() {

    var localctx = new String_value_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, SQLParser.RULE_string_value_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1086;
        this.trim_function();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trim_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_trim_function;
    return this;
}

Trim_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trim_functionContext.prototype.constructor = Trim_functionContext;

Trim_functionContext.prototype.TRIM = function() {
    return this.getToken(SQLParser.TRIM, 0);
};

Trim_functionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Trim_functionContext.prototype.trim_operands = function() {
    return this.getTypedRuleContext(Trim_operandsContext,0);
};

Trim_functionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Trim_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTrim_function(this);
	}
};

Trim_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTrim_function(this);
	}
};

Trim_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTrim_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Trim_functionContext = Trim_functionContext;

SQLParser.prototype.trim_function = function() {

    var localctx = new Trim_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, SQLParser.RULE_trim_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1088;
        this.match(SQLParser.TRIM);
        this.state = 1089;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1090;
        this.trim_operands();
        this.state = 1091;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trim_operandsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_trim_operands;
    this.trim_character = null; // Character_value_expressionContext
    this.trim_source = null; // Character_value_expressionContext
    return this;
}

Trim_operandsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trim_operandsContext.prototype.constructor = Trim_operandsContext;

Trim_operandsContext.prototype.character_value_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Character_value_expressionContext);
    } else {
        return this.getTypedRuleContext(Character_value_expressionContext,i);
    }
};

Trim_operandsContext.prototype.FROM = function() {
    return this.getToken(SQLParser.FROM, 0);
};

Trim_operandsContext.prototype.trim_specification = function() {
    return this.getTypedRuleContext(Trim_specificationContext,0);
};

Trim_operandsContext.prototype.COMMA = function() {
    return this.getToken(SQLParser.COMMA, 0);
};

Trim_operandsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTrim_operands(this);
	}
};

Trim_operandsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTrim_operands(this);
	}
};

Trim_operandsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTrim_operands(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Trim_operandsContext = Trim_operandsContext;

SQLParser.prototype.trim_operands = function() {

    var localctx = new Trim_operandsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, SQLParser.RULE_trim_operands);
    var _la = 0; // Token type
    try {
        this.state = 1107;
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1100;
            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
            if(la_===1) {
                this.state = 1094;
                _la = this._input.LA(1);
                if(_la===SQLParser.BOTH || _la===SQLParser.LEADING || _la===SQLParser.TRAILING) {
                    this.state = 1093;
                    this.trim_specification();
                }

                this.state = 1097;
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.ANY) | (1 << SQLParser.CASE) | (1 << SQLParser.CAST) | (1 << SQLParser.FALSE) | (1 << SQLParser.LEFT))) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (SQLParser.RIGHT - 40)) | (1 << (SQLParser.SOME - 40)) | (1 << (SQLParser.TRUE - 40)) | (1 << (SQLParser.AVG - 40)) | (1 << (SQLParser.BETWEEN - 40)) | (1 << (SQLParser.BY - 40)) | (1 << (SQLParser.CENTURY - 40)) | (1 << (SQLParser.CHARACTER - 40)) | (1 << (SQLParser.COLLECT - 40)) | (1 << (SQLParser.COALESCE - 40)) | (1 << (SQLParser.COLUMN - 40)) | (1 << (SQLParser.COUNT - 40)) | (1 << (SQLParser.CUBE - 40)) | (1 << (SQLParser.DAY - 40)) | (1 << (SQLParser.DEC - 40)) | (1 << (SQLParser.DECADE - 40)) | (1 << (SQLParser.DOW - 40)) | (1 << (SQLParser.DOY - 40)) | (1 << (SQLParser.DROP - 40)) | (1 << (SQLParser.EPOCH - 40)) | (1 << (SQLParser.EVERY - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (SQLParser.EXISTS - 72)) | (1 << (SQLParser.EXTERNAL - 72)) | (1 << (SQLParser.EXTRACT - 72)) | (1 << (SQLParser.FILTER - 72)) | (1 << (SQLParser.FIRST - 72)) | (1 << (SQLParser.FORMAT - 72)) | (1 << (SQLParser.FUSION - 72)) | (1 << (SQLParser.GROUPING - 72)) | (1 << (SQLParser.HASH - 72)) | (1 << (SQLParser.INDEX - 72)) | (1 << (SQLParser.INSERT - 72)) | (1 << (SQLParser.INTERSECTION - 72)) | (1 << (SQLParser.ISODOW - 72)) | (1 << (SQLParser.ISOYEAR - 72)) | (1 << (SQLParser.LAST - 72)) | (1 << (SQLParser.LESS - 72)) | (1 << (SQLParser.LIST - 72)) | (1 << (SQLParser.LOCATION - 72)) | (1 << (SQLParser.MAX - 72)) | (1 << (SQLParser.MAXVALUE - 72)) | (1 << (SQLParser.MICROSECONDS - 72)) | (1 << (SQLParser.MILLENNIUM - 72)) | (1 << (SQLParser.MILLISECONDS - 72)) | (1 << (SQLParser.MIN - 72)) | (1 << (SQLParser.MINUTE - 72)) | (1 << (SQLParser.MONTH - 72)) | (1 << (SQLParser.NATIONAL - 72)) | (1 << (SQLParser.NULLIF - 72)) | (1 << (SQLParser.OVERWRITE - 72)) | (1 << (SQLParser.PARTITION - 72)) | (1 << (SQLParser.PARTITIONS - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (SQLParser.PRECISION - 104)) | (1 << (SQLParser.PURGE - 104)) | (1 << (SQLParser.QUARTER - 104)) | (1 << (SQLParser.RANGE - 104)) | (1 << (SQLParser.REGEXP - 104)) | (1 << (SQLParser.RLIKE - 104)) | (1 << (SQLParser.ROLLUP - 104)) | (1 << (SQLParser.SECOND - 104)) | (1 << (SQLParser.SET - 104)) | (1 << (SQLParser.SIMILAR - 104)) | (1 << (SQLParser.STDDEV_POP - 104)) | (1 << (SQLParser.STDDEV_SAMP - 104)) | (1 << (SQLParser.SUBPARTITION - 104)) | (1 << (SQLParser.SUM - 104)) | (1 << (SQLParser.TABLESPACE - 104)) | (1 << (SQLParser.THAN - 104)) | (1 << (SQLParser.TIMEZONE - 104)) | (1 << (SQLParser.TIMEZONE_HOUR - 104)) | (1 << (SQLParser.TIMEZONE_MINUTE - 104)) | (1 << (SQLParser.TRIM - 104)) | (1 << (SQLParser.TO - 104)) | (1 << (SQLParser.UNKNOWN - 104)) | (1 << (SQLParser.VALUES - 104)) | (1 << (SQLParser.VAR_SAMP - 104)) | (1 << (SQLParser.VAR_POP - 104)) | (1 << (SQLParser.VARYING - 104)) | (1 << (SQLParser.WEEK - 104)) | (1 << (SQLParser.YEAR - 104)) | (1 << (SQLParser.ZONE - 104)) | (1 << (SQLParser.BOOLEAN - 104)) | (1 << (SQLParser.BOOL - 104)) | (1 << (SQLParser.BIT - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (SQLParser.VARBIT - 136)) | (1 << (SQLParser.INT1 - 136)) | (1 << (SQLParser.INT2 - 136)) | (1 << (SQLParser.INT4 - 136)) | (1 << (SQLParser.INT8 - 136)) | (1 << (SQLParser.TINYINT - 136)) | (1 << (SQLParser.SMALLINT - 136)) | (1 << (SQLParser.INT - 136)) | (1 << (SQLParser.INTEGER - 136)) | (1 << (SQLParser.BIGINT - 136)) | (1 << (SQLParser.FLOAT4 - 136)) | (1 << (SQLParser.FLOAT8 - 136)) | (1 << (SQLParser.REAL - 136)) | (1 << (SQLParser.FLOAT - 136)) | (1 << (SQLParser.DOUBLE - 136)) | (1 << (SQLParser.NUMERIC - 136)) | (1 << (SQLParser.DECIMAL - 136)) | (1 << (SQLParser.CHAR - 136)) | (1 << (SQLParser.VARCHAR - 136)) | (1 << (SQLParser.NCHAR - 136)) | (1 << (SQLParser.NVARCHAR - 136)) | (1 << (SQLParser.DATE - 136)) | (1 << (SQLParser.TIME - 136)) | (1 << (SQLParser.TIMETZ - 136)) | (1 << (SQLParser.TIMESTAMP - 136)) | (1 << (SQLParser.TIMESTAMPTZ - 136)) | (1 << (SQLParser.TEXT - 136)) | (1 << (SQLParser.VARBINARY - 136)) | (1 << (SQLParser.BLOB - 136)) | (1 << (SQLParser.BYTEA - 136)) | (1 << (SQLParser.INET4 - 136)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (SQLParser.LEFT_PAREN - 184)) | (1 << (SQLParser.NUMBER - 184)) | (1 << (SQLParser.REAL_NUMBER - 184)) | (1 << (SQLParser.Identifier - 184)) | (1 << (SQLParser.Character_String_Literal - 184)))) !== 0)) {
                    this.state = 1096;
                    localctx.trim_character = this.character_value_expression();
                }

                this.state = 1099;
                this.match(SQLParser.FROM);

            }
            this.state = 1102;
            localctx.trim_source = this.character_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1103;
            localctx.trim_source = this.character_value_expression();
            this.state = 1104;
            this.match(SQLParser.COMMA);
            this.state = 1105;
            localctx.trim_character = this.character_value_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trim_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_trim_specification;
    return this;
}

Trim_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trim_specificationContext.prototype.constructor = Trim_specificationContext;

Trim_specificationContext.prototype.LEADING = function() {
    return this.getToken(SQLParser.LEADING, 0);
};

Trim_specificationContext.prototype.TRAILING = function() {
    return this.getToken(SQLParser.TRAILING, 0);
};

Trim_specificationContext.prototype.BOTH = function() {
    return this.getToken(SQLParser.BOTH, 0);
};

Trim_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTrim_specification(this);
	}
};

Trim_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTrim_specification(this);
	}
};

Trim_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTrim_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Trim_specificationContext = Trim_specificationContext;

SQLParser.prototype.trim_specification = function() {

    var localctx = new Trim_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, SQLParser.RULE_trim_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1109;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.BOTH || _la===SQLParser.LEADING || _la===SQLParser.TRAILING)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_value_expression;
    return this;
}

Boolean_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_value_expressionContext.prototype.constructor = Boolean_value_expressionContext;

Boolean_value_expressionContext.prototype.or_predicate = function() {
    return this.getTypedRuleContext(Or_predicateContext,0);
};

Boolean_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_value_expression(this);
	}
};

Boolean_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_value_expression(this);
	}
};

Boolean_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_value_expressionContext = Boolean_value_expressionContext;

SQLParser.prototype.boolean_value_expression = function() {

    var localctx = new Boolean_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, SQLParser.RULE_boolean_value_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1111;
        this.or_predicate();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Or_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_or_predicate;
    return this;
}

Or_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Or_predicateContext.prototype.constructor = Or_predicateContext;

Or_predicateContext.prototype.and_predicate = function() {
    return this.getTypedRuleContext(And_predicateContext,0);
};

Or_predicateContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.OR);
    } else {
        return this.getToken(SQLParser.OR, i);
    }
};


Or_predicateContext.prototype.or_predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Or_predicateContext);
    } else {
        return this.getTypedRuleContext(Or_predicateContext,i);
    }
};

Or_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOr_predicate(this);
	}
};

Or_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOr_predicate(this);
	}
};

Or_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOr_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Or_predicateContext = Or_predicateContext;

SQLParser.prototype.or_predicate = function() {

    var localctx = new Or_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, SQLParser.RULE_or_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1113;
        this.and_predicate();
        this.state = 1118;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1114;
                this.match(SQLParser.OR);
                this.state = 1115;
                this.or_predicate(); 
            }
            this.state = 1120;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function And_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_and_predicate;
    return this;
}

And_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_predicateContext.prototype.constructor = And_predicateContext;

And_predicateContext.prototype.boolean_factor = function() {
    return this.getTypedRuleContext(Boolean_factorContext,0);
};

And_predicateContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.AND);
    } else {
        return this.getToken(SQLParser.AND, i);
    }
};


And_predicateContext.prototype.and_predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(And_predicateContext);
    } else {
        return this.getTypedRuleContext(And_predicateContext,i);
    }
};

And_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterAnd_predicate(this);
	}
};

And_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitAnd_predicate(this);
	}
};

And_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitAnd_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.And_predicateContext = And_predicateContext;

SQLParser.prototype.and_predicate = function() {

    var localctx = new And_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, SQLParser.RULE_and_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1121;
        this.boolean_factor();
        this.state = 1126;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,98,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1122;
                this.match(SQLParser.AND);
                this.state = 1123;
                this.and_predicate(); 
            }
            this.state = 1128;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,98,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_factorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_factor;
    return this;
}

Boolean_factorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_factorContext.prototype.constructor = Boolean_factorContext;

Boolean_factorContext.prototype.boolean_test = function() {
    return this.getTypedRuleContext(Boolean_testContext,0);
};

Boolean_factorContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Boolean_factorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_factor(this);
	}
};

Boolean_factorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_factor(this);
	}
};

Boolean_factorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_factor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_factorContext = Boolean_factorContext;

SQLParser.prototype.boolean_factor = function() {

    var localctx = new Boolean_factorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, SQLParser.RULE_boolean_factor);
    try {
        this.state = 1132;
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1129;
            this.boolean_test();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1130;
            this.match(SQLParser.NOT);
            this.state = 1131;
            this.boolean_test();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_test;
    return this;
}

Boolean_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_testContext.prototype.constructor = Boolean_testContext;

Boolean_testContext.prototype.boolean_primary = function() {
    return this.getTypedRuleContext(Boolean_primaryContext,0);
};

Boolean_testContext.prototype.is_clause = function() {
    return this.getTypedRuleContext(Is_clauseContext,0);
};

Boolean_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_test(this);
	}
};

Boolean_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_test(this);
	}
};

Boolean_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_testContext = Boolean_testContext;

SQLParser.prototype.boolean_test = function() {

    var localctx = new Boolean_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, SQLParser.RULE_boolean_test);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1134;
        this.boolean_primary();
        this.state = 1136;
        _la = this._input.LA(1);
        if(_la===SQLParser.IS) {
            this.state = 1135;
            this.is_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Is_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_is_clause;
    this.t = null; // Truth_valueContext
    return this;
}

Is_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Is_clauseContext.prototype.constructor = Is_clauseContext;

Is_clauseContext.prototype.IS = function() {
    return this.getToken(SQLParser.IS, 0);
};

Is_clauseContext.prototype.truth_value = function() {
    return this.getTypedRuleContext(Truth_valueContext,0);
};

Is_clauseContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Is_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIs_clause(this);
	}
};

Is_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIs_clause(this);
	}
};

Is_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIs_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Is_clauseContext = Is_clauseContext;

SQLParser.prototype.is_clause = function() {

    var localctx = new Is_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, SQLParser.RULE_is_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1138;
        this.match(SQLParser.IS);
        this.state = 1140;
        _la = this._input.LA(1);
        if(_la===SQLParser.NOT) {
            this.state = 1139;
            this.match(SQLParser.NOT);
        }

        this.state = 1142;
        localctx.t = this.truth_value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Truth_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_truth_value;
    return this;
}

Truth_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Truth_valueContext.prototype.constructor = Truth_valueContext;

Truth_valueContext.prototype.TRUE = function() {
    return this.getToken(SQLParser.TRUE, 0);
};

Truth_valueContext.prototype.FALSE = function() {
    return this.getToken(SQLParser.FALSE, 0);
};

Truth_valueContext.prototype.UNKNOWN = function() {
    return this.getToken(SQLParser.UNKNOWN, 0);
};

Truth_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTruth_value(this);
	}
};

Truth_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTruth_value(this);
	}
};

Truth_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTruth_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Truth_valueContext = Truth_valueContext;

SQLParser.prototype.truth_value = function() {

    var localctx = new Truth_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, SQLParser.RULE_truth_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1144;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.FALSE || _la===SQLParser.TRUE || _la===SQLParser.UNKNOWN)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_primary;
    return this;
}

Boolean_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_primaryContext.prototype.constructor = Boolean_primaryContext;

Boolean_primaryContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

Boolean_primaryContext.prototype.boolean_predicand = function() {
    return this.getTypedRuleContext(Boolean_predicandContext,0);
};

Boolean_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_primary(this);
	}
};

Boolean_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_primary(this);
	}
};

Boolean_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_primaryContext = Boolean_primaryContext;

SQLParser.prototype.boolean_primary = function() {

    var localctx = new Boolean_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, SQLParser.RULE_boolean_primary);
    try {
        this.state = 1148;
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1146;
            this.predicate();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1147;
            this.boolean_predicand();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_predicandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_predicand;
    return this;
}

Boolean_predicandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_predicandContext.prototype.constructor = Boolean_predicandContext;

Boolean_predicandContext.prototype.parenthesized_boolean_value_expression = function() {
    return this.getTypedRuleContext(Parenthesized_boolean_value_expressionContext,0);
};

Boolean_predicandContext.prototype.nonparenthesized_value_expression_primary = function() {
    return this.getTypedRuleContext(Nonparenthesized_value_expression_primaryContext,0);
};

Boolean_predicandContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_predicand(this);
	}
};

Boolean_predicandContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_predicand(this);
	}
};

Boolean_predicandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_predicand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_predicandContext = Boolean_predicandContext;

SQLParser.prototype.boolean_predicand = function() {

    var localctx = new Boolean_predicandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, SQLParser.RULE_boolean_predicand);
    try {
        this.state = 1152;
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1150;
            this.parenthesized_boolean_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1151;
            this.nonparenthesized_value_expression_primary();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parenthesized_boolean_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_parenthesized_boolean_value_expression;
    return this;
}

Parenthesized_boolean_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesized_boolean_value_expressionContext.prototype.constructor = Parenthesized_boolean_value_expressionContext;

Parenthesized_boolean_value_expressionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Parenthesized_boolean_value_expressionContext.prototype.boolean_value_expression = function() {
    return this.getTypedRuleContext(Boolean_value_expressionContext,0);
};

Parenthesized_boolean_value_expressionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Parenthesized_boolean_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterParenthesized_boolean_value_expression(this);
	}
};

Parenthesized_boolean_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitParenthesized_boolean_value_expression(this);
	}
};

Parenthesized_boolean_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitParenthesized_boolean_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Parenthesized_boolean_value_expressionContext = Parenthesized_boolean_value_expressionContext;

SQLParser.prototype.parenthesized_boolean_value_expression = function() {

    var localctx = new Parenthesized_boolean_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, SQLParser.RULE_parenthesized_boolean_value_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1154;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1155;
        this.boolean_value_expression();
        this.state = 1156;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_value_expression;
    return this;
}

Row_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_value_expressionContext.prototype.constructor = Row_value_expressionContext;

Row_value_expressionContext.prototype.row_value_special_case = function() {
    return this.getTypedRuleContext(Row_value_special_caseContext,0);
};

Row_value_expressionContext.prototype.explicit_row_value_constructor = function() {
    return this.getTypedRuleContext(Explicit_row_value_constructorContext,0);
};

Row_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_value_expression(this);
	}
};

Row_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_value_expression(this);
	}
};

Row_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_value_expressionContext = Row_value_expressionContext;

SQLParser.prototype.row_value_expression = function() {

    var localctx = new Row_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, SQLParser.RULE_row_value_expression);
    try {
        this.state = 1160;
        switch(this._input.LA(1)) {
        case SQLParser.ANY:
        case SQLParser.CASE:
        case SQLParser.CAST:
        case SQLParser.FALSE:
        case SQLParser.LEFT:
        case SQLParser.RIGHT:
        case SQLParser.SOME:
        case SQLParser.TRUE:
        case SQLParser.AVG:
        case SQLParser.BETWEEN:
        case SQLParser.BY:
        case SQLParser.CENTURY:
        case SQLParser.CHARACTER:
        case SQLParser.COLLECT:
        case SQLParser.COALESCE:
        case SQLParser.COLUMN:
        case SQLParser.COUNT:
        case SQLParser.CUBE:
        case SQLParser.DAY:
        case SQLParser.DEC:
        case SQLParser.DECADE:
        case SQLParser.DOW:
        case SQLParser.DOY:
        case SQLParser.DROP:
        case SQLParser.EPOCH:
        case SQLParser.EVERY:
        case SQLParser.EXISTS:
        case SQLParser.EXTERNAL:
        case SQLParser.EXTRACT:
        case SQLParser.FILTER:
        case SQLParser.FIRST:
        case SQLParser.FORMAT:
        case SQLParser.FUSION:
        case SQLParser.GROUPING:
        case SQLParser.HASH:
        case SQLParser.INDEX:
        case SQLParser.INSERT:
        case SQLParser.INTERSECTION:
        case SQLParser.ISODOW:
        case SQLParser.ISOYEAR:
        case SQLParser.LAST:
        case SQLParser.LESS:
        case SQLParser.LIST:
        case SQLParser.LOCATION:
        case SQLParser.MAX:
        case SQLParser.MAXVALUE:
        case SQLParser.MICROSECONDS:
        case SQLParser.MILLENNIUM:
        case SQLParser.MILLISECONDS:
        case SQLParser.MIN:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.NATIONAL:
        case SQLParser.NULLIF:
        case SQLParser.OVERWRITE:
        case SQLParser.PARTITION:
        case SQLParser.PARTITIONS:
        case SQLParser.PRECISION:
        case SQLParser.PURGE:
        case SQLParser.QUARTER:
        case SQLParser.RANGE:
        case SQLParser.REGEXP:
        case SQLParser.RLIKE:
        case SQLParser.ROLLUP:
        case SQLParser.SECOND:
        case SQLParser.SET:
        case SQLParser.SIMILAR:
        case SQLParser.STDDEV_POP:
        case SQLParser.STDDEV_SAMP:
        case SQLParser.SUBPARTITION:
        case SQLParser.SUM:
        case SQLParser.TABLESPACE:
        case SQLParser.THAN:
        case SQLParser.TIMEZONE:
        case SQLParser.TIMEZONE_HOUR:
        case SQLParser.TIMEZONE_MINUTE:
        case SQLParser.TRIM:
        case SQLParser.TO:
        case SQLParser.UNKNOWN:
        case SQLParser.VALUES:
        case SQLParser.VAR_SAMP:
        case SQLParser.VAR_POP:
        case SQLParser.VARYING:
        case SQLParser.WEEK:
        case SQLParser.YEAR:
        case SQLParser.ZONE:
        case SQLParser.BOOLEAN:
        case SQLParser.BOOL:
        case SQLParser.BIT:
        case SQLParser.VARBIT:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
        case SQLParser.CHAR:
        case SQLParser.VARCHAR:
        case SQLParser.NCHAR:
        case SQLParser.NVARCHAR:
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMETZ:
        case SQLParser.TIMESTAMP:
        case SQLParser.TIMESTAMPTZ:
        case SQLParser.TEXT:
        case SQLParser.VARBINARY:
        case SQLParser.BLOB:
        case SQLParser.BYTEA:
        case SQLParser.INET4:
        case SQLParser.LEFT_PAREN:
        case SQLParser.NUMBER:
        case SQLParser.REAL_NUMBER:
        case SQLParser.Identifier:
        case SQLParser.Character_String_Literal:
            this.enterOuterAlt(localctx, 1);
            this.state = 1158;
            this.row_value_special_case();
            break;
        case SQLParser.NULL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1159;
            this.explicit_row_value_constructor();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_value_special_caseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_value_special_case;
    return this;
}

Row_value_special_caseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_value_special_caseContext.prototype.constructor = Row_value_special_caseContext;

Row_value_special_caseContext.prototype.nonparenthesized_value_expression_primary = function() {
    return this.getTypedRuleContext(Nonparenthesized_value_expression_primaryContext,0);
};

Row_value_special_caseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_value_special_case(this);
	}
};

Row_value_special_caseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_value_special_case(this);
	}
};

Row_value_special_caseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_value_special_case(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_value_special_caseContext = Row_value_special_caseContext;

SQLParser.prototype.row_value_special_case = function() {

    var localctx = new Row_value_special_caseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, SQLParser.RULE_row_value_special_case);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1162;
        this.nonparenthesized_value_expression_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explicit_row_value_constructorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_explicit_row_value_constructor;
    return this;
}

Explicit_row_value_constructorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explicit_row_value_constructorContext.prototype.constructor = Explicit_row_value_constructorContext;

Explicit_row_value_constructorContext.prototype.NULL = function() {
    return this.getToken(SQLParser.NULL, 0);
};

Explicit_row_value_constructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExplicit_row_value_constructor(this);
	}
};

Explicit_row_value_constructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExplicit_row_value_constructor(this);
	}
};

Explicit_row_value_constructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExplicit_row_value_constructor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Explicit_row_value_constructorContext = Explicit_row_value_constructorContext;

SQLParser.prototype.explicit_row_value_constructor = function() {

    var localctx = new Explicit_row_value_constructorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, SQLParser.RULE_explicit_row_value_constructor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1164;
        this.match(SQLParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_value_predicandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_value_predicand;
    return this;
}

Row_value_predicandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_value_predicandContext.prototype.constructor = Row_value_predicandContext;

Row_value_predicandContext.prototype.row_value_special_case = function() {
    return this.getTypedRuleContext(Row_value_special_caseContext,0);
};

Row_value_predicandContext.prototype.row_value_constructor_predicand = function() {
    return this.getTypedRuleContext(Row_value_constructor_predicandContext,0);
};

Row_value_predicandContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_value_predicand(this);
	}
};

Row_value_predicandContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_value_predicand(this);
	}
};

Row_value_predicandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_value_predicand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_value_predicandContext = Row_value_predicandContext;

SQLParser.prototype.row_value_predicand = function() {

    var localctx = new Row_value_predicandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, SQLParser.RULE_row_value_predicand);
    try {
        this.state = 1168;
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1166;
            this.row_value_special_case();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1167;
            this.row_value_constructor_predicand();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_value_constructor_predicandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_value_constructor_predicand;
    return this;
}

Row_value_constructor_predicandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_value_constructor_predicandContext.prototype.constructor = Row_value_constructor_predicandContext;

Row_value_constructor_predicandContext.prototype.common_value_expression = function() {
    return this.getTypedRuleContext(Common_value_expressionContext,0);
};

Row_value_constructor_predicandContext.prototype.boolean_predicand = function() {
    return this.getTypedRuleContext(Boolean_predicandContext,0);
};

Row_value_constructor_predicandContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_value_constructor_predicand(this);
	}
};

Row_value_constructor_predicandContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_value_constructor_predicand(this);
	}
};

Row_value_constructor_predicandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_value_constructor_predicand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_value_constructor_predicandContext = Row_value_constructor_predicandContext;

SQLParser.prototype.row_value_constructor_predicand = function() {

    var localctx = new Row_value_constructor_predicandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, SQLParser.RULE_row_value_constructor_predicand);
    try {
        this.state = 1172;
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1170;
            this.common_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1171;
            this.boolean_predicand();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_expression;
    return this;
}

Table_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_expressionContext.prototype.constructor = Table_expressionContext;

Table_expressionContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Table_expressionContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Table_expressionContext.prototype.groupby_clause = function() {
    return this.getTypedRuleContext(Groupby_clauseContext,0);
};

Table_expressionContext.prototype.having_clause = function() {
    return this.getTypedRuleContext(Having_clauseContext,0);
};

Table_expressionContext.prototype.orderby_clause = function() {
    return this.getTypedRuleContext(Orderby_clauseContext,0);
};

Table_expressionContext.prototype.limit_clause = function() {
    return this.getTypedRuleContext(Limit_clauseContext,0);
};

Table_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_expression(this);
	}
};

Table_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_expression(this);
	}
};

Table_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_expressionContext = Table_expressionContext;

SQLParser.prototype.table_expression = function() {

    var localctx = new Table_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, SQLParser.RULE_table_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1174;
        this.from_clause();
        this.state = 1176;
        _la = this._input.LA(1);
        if(_la===SQLParser.WHERE) {
            this.state = 1175;
            this.where_clause();
        }

        this.state = 1179;
        _la = this._input.LA(1);
        if(_la===SQLParser.GROUP) {
            this.state = 1178;
            this.groupby_clause();
        }

        this.state = 1182;
        _la = this._input.LA(1);
        if(_la===SQLParser.HAVING) {
            this.state = 1181;
            this.having_clause();
        }

        this.state = 1185;
        _la = this._input.LA(1);
        if(_la===SQLParser.ORDER) {
            this.state = 1184;
            this.orderby_clause();
        }

        this.state = 1188;
        _la = this._input.LA(1);
        if(_la===SQLParser.LIMIT) {
            this.state = 1187;
            this.limit_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function From_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_from_clause;
    return this;
}

From_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
From_clauseContext.prototype.constructor = From_clauseContext;

From_clauseContext.prototype.FROM = function() {
    return this.getToken(SQLParser.FROM, 0);
};

From_clauseContext.prototype.table_reference_list = function() {
    return this.getTypedRuleContext(Table_reference_listContext,0);
};

From_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFrom_clause(this);
	}
};

From_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFrom_clause(this);
	}
};

From_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitFrom_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.From_clauseContext = From_clauseContext;

SQLParser.prototype.from_clause = function() {

    var localctx = new From_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, SQLParser.RULE_from_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1190;
        this.match(SQLParser.FROM);
        this.state = 1191;
        this.table_reference_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_reference_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_reference_list;
    return this;
}

Table_reference_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_reference_listContext.prototype.constructor = Table_reference_listContext;

Table_reference_listContext.prototype.table_reference = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_referenceContext);
    } else {
        return this.getTypedRuleContext(Table_referenceContext,i);
    }
};

Table_reference_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Table_reference_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_reference_list(this);
	}
};

Table_reference_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_reference_list(this);
	}
};

Table_reference_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_reference_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_reference_listContext = Table_reference_listContext;

SQLParser.prototype.table_reference_list = function() {

    var localctx = new Table_reference_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, SQLParser.RULE_table_reference_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1193;
        this.table_reference();
        this.state = 1198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1194;
            this.match(SQLParser.COMMA);
            this.state = 1195;
            this.table_reference();
            this.state = 1200;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_referenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_reference;
    return this;
}

Table_referenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_referenceContext.prototype.constructor = Table_referenceContext;

Table_referenceContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Table_referenceContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Table_referenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_reference(this);
	}
};

Table_referenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_reference(this);
	}
};

Table_referenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_reference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_referenceContext = Table_referenceContext;

SQLParser.prototype.table_reference = function() {

    var localctx = new Table_referenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, SQLParser.RULE_table_reference);
    try {
        this.state = 1203;
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1201;
            this.joined_table();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1202;
            this.table_primary();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Joined_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_joined_table;
    return this;
}

Joined_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Joined_tableContext.prototype.constructor = Joined_tableContext;

Joined_tableContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Joined_tableContext.prototype.joined_table_primary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Joined_table_primaryContext);
    } else {
        return this.getTypedRuleContext(Joined_table_primaryContext,i);
    }
};

Joined_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterJoined_table(this);
	}
};

Joined_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitJoined_table(this);
	}
};

Joined_tableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitJoined_table(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Joined_tableContext = Joined_tableContext;

SQLParser.prototype.joined_table = function() {

    var localctx = new Joined_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, SQLParser.RULE_joined_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1205;
        this.table_primary();
        this.state = 1207; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1206;
        		this.joined_table_primary();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1209; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,114, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Joined_table_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_joined_table_primary;
    this.right = null; // Table_primaryContext
    this.t = null; // Join_typeContext
    this.s = null; // Join_specificationContext
    return this;
}

Joined_table_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Joined_table_primaryContext.prototype.constructor = Joined_table_primaryContext;

Joined_table_primaryContext.prototype.CROSS = function() {
    return this.getToken(SQLParser.CROSS, 0);
};

Joined_table_primaryContext.prototype.JOIN = function() {
    return this.getToken(SQLParser.JOIN, 0);
};

Joined_table_primaryContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Joined_table_primaryContext.prototype.join_specification = function() {
    return this.getTypedRuleContext(Join_specificationContext,0);
};

Joined_table_primaryContext.prototype.join_type = function() {
    return this.getTypedRuleContext(Join_typeContext,0);
};

Joined_table_primaryContext.prototype.NATURAL = function() {
    return this.getToken(SQLParser.NATURAL, 0);
};

Joined_table_primaryContext.prototype.UNION = function() {
    return this.getToken(SQLParser.UNION, 0);
};

Joined_table_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterJoined_table_primary(this);
	}
};

Joined_table_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitJoined_table_primary(this);
	}
};

Joined_table_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitJoined_table_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Joined_table_primaryContext = Joined_table_primaryContext;

SQLParser.prototype.joined_table_primary = function() {

    var localctx = new Joined_table_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, SQLParser.RULE_joined_table_primary);
    var _la = 0; // Token type
    try {
        this.state = 1230;
        switch(this._input.LA(1)) {
        case SQLParser.CROSS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1211;
            this.match(SQLParser.CROSS);
            this.state = 1212;
            this.match(SQLParser.JOIN);
            this.state = 1213;
            localctx.right = this.table_primary();
            break;
        case SQLParser.FULL:
        case SQLParser.INNER:
        case SQLParser.JOIN:
        case SQLParser.LEFT:
        case SQLParser.RIGHT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1215;
            _la = this._input.LA(1);
            if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (SQLParser.FULL - 18)) | (1 << (SQLParser.INNER - 18)) | (1 << (SQLParser.LEFT - 18)) | (1 << (SQLParser.RIGHT - 18)))) !== 0)) {
                this.state = 1214;
                localctx.t = this.join_type();
            }

            this.state = 1217;
            this.match(SQLParser.JOIN);
            this.state = 1218;
            localctx.right = this.table_primary();
            this.state = 1219;
            localctx.s = this.join_specification();
            break;
        case SQLParser.NATURAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1221;
            this.match(SQLParser.NATURAL);
            this.state = 1223;
            _la = this._input.LA(1);
            if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (SQLParser.FULL - 18)) | (1 << (SQLParser.INNER - 18)) | (1 << (SQLParser.LEFT - 18)) | (1 << (SQLParser.RIGHT - 18)))) !== 0)) {
                this.state = 1222;
                localctx.t = this.join_type();
            }

            this.state = 1225;
            this.match(SQLParser.JOIN);
            this.state = 1226;
            localctx.right = this.table_primary();
            break;
        case SQLParser.UNION:
            this.enterOuterAlt(localctx, 4);
            this.state = 1227;
            this.match(SQLParser.UNION);
            this.state = 1228;
            this.match(SQLParser.JOIN);
            this.state = 1229;
            localctx.right = this.table_primary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cross_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cross_join;
    this.r = null; // Table_primaryContext
    return this;
}

Cross_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cross_joinContext.prototype.constructor = Cross_joinContext;

Cross_joinContext.prototype.CROSS = function() {
    return this.getToken(SQLParser.CROSS, 0);
};

Cross_joinContext.prototype.JOIN = function() {
    return this.getToken(SQLParser.JOIN, 0);
};

Cross_joinContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Cross_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCross_join(this);
	}
};

Cross_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCross_join(this);
	}
};

Cross_joinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCross_join(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Cross_joinContext = Cross_joinContext;

SQLParser.prototype.cross_join = function() {

    var localctx = new Cross_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, SQLParser.RULE_cross_join);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        this.match(SQLParser.CROSS);
        this.state = 1233;
        this.match(SQLParser.JOIN);
        this.state = 1234;
        localctx.r = this.table_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Qualified_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_qualified_join;
    this.t = null; // Join_typeContext
    this.r = null; // Table_primaryContext
    this.s = null; // Join_specificationContext
    return this;
}

Qualified_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_joinContext.prototype.constructor = Qualified_joinContext;

Qualified_joinContext.prototype.JOIN = function() {
    return this.getToken(SQLParser.JOIN, 0);
};

Qualified_joinContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Qualified_joinContext.prototype.join_specification = function() {
    return this.getTypedRuleContext(Join_specificationContext,0);
};

Qualified_joinContext.prototype.join_type = function() {
    return this.getTypedRuleContext(Join_typeContext,0);
};

Qualified_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQualified_join(this);
	}
};

Qualified_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQualified_join(this);
	}
};

Qualified_joinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQualified_join(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Qualified_joinContext = Qualified_joinContext;

SQLParser.prototype.qualified_join = function() {

    var localctx = new Qualified_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, SQLParser.RULE_qualified_join);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1237;
        _la = this._input.LA(1);
        if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (SQLParser.FULL - 18)) | (1 << (SQLParser.INNER - 18)) | (1 << (SQLParser.LEFT - 18)) | (1 << (SQLParser.RIGHT - 18)))) !== 0)) {
            this.state = 1236;
            localctx.t = this.join_type();
        }

        this.state = 1239;
        this.match(SQLParser.JOIN);
        this.state = 1240;
        localctx.r = this.table_primary();
        this.state = 1241;
        localctx.s = this.join_specification();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Natural_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_natural_join;
    this.t = null; // Join_typeContext
    this.r = null; // Table_primaryContext
    return this;
}

Natural_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Natural_joinContext.prototype.constructor = Natural_joinContext;

Natural_joinContext.prototype.NATURAL = function() {
    return this.getToken(SQLParser.NATURAL, 0);
};

Natural_joinContext.prototype.JOIN = function() {
    return this.getToken(SQLParser.JOIN, 0);
};

Natural_joinContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Natural_joinContext.prototype.join_type = function() {
    return this.getTypedRuleContext(Join_typeContext,0);
};

Natural_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNatural_join(this);
	}
};

Natural_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNatural_join(this);
	}
};

Natural_joinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNatural_join(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Natural_joinContext = Natural_joinContext;

SQLParser.prototype.natural_join = function() {

    var localctx = new Natural_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, SQLParser.RULE_natural_join);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1243;
        this.match(SQLParser.NATURAL);
        this.state = 1245;
        _la = this._input.LA(1);
        if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (SQLParser.FULL - 18)) | (1 << (SQLParser.INNER - 18)) | (1 << (SQLParser.LEFT - 18)) | (1 << (SQLParser.RIGHT - 18)))) !== 0)) {
            this.state = 1244;
            localctx.t = this.join_type();
        }

        this.state = 1247;
        this.match(SQLParser.JOIN);
        this.state = 1248;
        localctx.r = this.table_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Union_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_union_join;
    this.r = null; // Table_primaryContext
    return this;
}

Union_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Union_joinContext.prototype.constructor = Union_joinContext;

Union_joinContext.prototype.UNION = function() {
    return this.getToken(SQLParser.UNION, 0);
};

Union_joinContext.prototype.JOIN = function() {
    return this.getToken(SQLParser.JOIN, 0);
};

Union_joinContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Union_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUnion_join(this);
	}
};

Union_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUnion_join(this);
	}
};

Union_joinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitUnion_join(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Union_joinContext = Union_joinContext;

SQLParser.prototype.union_join = function() {

    var localctx = new Union_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, SQLParser.RULE_union_join);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1250;
        this.match(SQLParser.UNION);
        this.state = 1251;
        this.match(SQLParser.JOIN);
        this.state = 1252;
        localctx.r = this.table_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_join_type;
    this.t = null; // Outer_join_typeContext
    return this;
}

Join_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_typeContext.prototype.constructor = Join_typeContext;

Join_typeContext.prototype.INNER = function() {
    return this.getToken(SQLParser.INNER, 0);
};

Join_typeContext.prototype.outer_join_type = function() {
    return this.getTypedRuleContext(Outer_join_typeContext,0);
};

Join_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterJoin_type(this);
	}
};

Join_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitJoin_type(this);
	}
};

Join_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitJoin_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Join_typeContext = Join_typeContext;

SQLParser.prototype.join_type = function() {

    var localctx = new Join_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, SQLParser.RULE_join_type);
    try {
        this.state = 1256;
        switch(this._input.LA(1)) {
        case SQLParser.INNER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1254;
            this.match(SQLParser.INNER);
            break;
        case SQLParser.FULL:
        case SQLParser.LEFT:
        case SQLParser.RIGHT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1255;
            localctx.t = this.outer_join_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Outer_join_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_outer_join_type;
    return this;
}

Outer_join_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_join_typeContext.prototype.constructor = Outer_join_typeContext;

Outer_join_typeContext.prototype.outer_join_type_part2 = function() {
    return this.getTypedRuleContext(Outer_join_type_part2Context,0);
};

Outer_join_typeContext.prototype.OUTER = function() {
    return this.getToken(SQLParser.OUTER, 0);
};

Outer_join_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOuter_join_type(this);
	}
};

Outer_join_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOuter_join_type(this);
	}
};

Outer_join_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOuter_join_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Outer_join_typeContext = Outer_join_typeContext;

SQLParser.prototype.outer_join_type = function() {

    var localctx = new Outer_join_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, SQLParser.RULE_outer_join_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1258;
        this.outer_join_type_part2();
        this.state = 1260;
        _la = this._input.LA(1);
        if(_la===SQLParser.OUTER) {
            this.state = 1259;
            this.match(SQLParser.OUTER);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Outer_join_type_part2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_outer_join_type_part2;
    return this;
}

Outer_join_type_part2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_join_type_part2Context.prototype.constructor = Outer_join_type_part2Context;

Outer_join_type_part2Context.prototype.LEFT = function() {
    return this.getToken(SQLParser.LEFT, 0);
};

Outer_join_type_part2Context.prototype.RIGHT = function() {
    return this.getToken(SQLParser.RIGHT, 0);
};

Outer_join_type_part2Context.prototype.FULL = function() {
    return this.getToken(SQLParser.FULL, 0);
};

Outer_join_type_part2Context.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOuter_join_type_part2(this);
	}
};

Outer_join_type_part2Context.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOuter_join_type_part2(this);
	}
};

Outer_join_type_part2Context.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOuter_join_type_part2(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Outer_join_type_part2Context = Outer_join_type_part2Context;

SQLParser.prototype.outer_join_type_part2 = function() {

    var localctx = new Outer_join_type_part2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 250, SQLParser.RULE_outer_join_type_part2);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1262;
        _la = this._input.LA(1);
        if(!(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (SQLParser.FULL - 18)) | (1 << (SQLParser.LEFT - 18)) | (1 << (SQLParser.RIGHT - 18)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_join_specification;
    return this;
}

Join_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_specificationContext.prototype.constructor = Join_specificationContext;

Join_specificationContext.prototype.join_condition = function() {
    return this.getTypedRuleContext(Join_conditionContext,0);
};

Join_specificationContext.prototype.named_columns_join = function() {
    return this.getTypedRuleContext(Named_columns_joinContext,0);
};

Join_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterJoin_specification(this);
	}
};

Join_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitJoin_specification(this);
	}
};

Join_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitJoin_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Join_specificationContext = Join_specificationContext;

SQLParser.prototype.join_specification = function() {

    var localctx = new Join_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, SQLParser.RULE_join_specification);
    try {
        this.state = 1266;
        switch(this._input.LA(1)) {
        case SQLParser.ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 1264;
            this.join_condition();
            break;
        case SQLParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 1265;
            this.named_columns_join();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_join_condition;
    return this;
}

Join_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_conditionContext.prototype.constructor = Join_conditionContext;

Join_conditionContext.prototype.ON = function() {
    return this.getToken(SQLParser.ON, 0);
};

Join_conditionContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Join_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterJoin_condition(this);
	}
};

Join_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitJoin_condition(this);
	}
};

Join_conditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitJoin_condition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Join_conditionContext = Join_conditionContext;

SQLParser.prototype.join_condition = function() {

    var localctx = new Join_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, SQLParser.RULE_join_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1268;
        this.match(SQLParser.ON);
        this.state = 1269;
        this.search_condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Named_columns_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_named_columns_join;
    this.f = null; // Column_reference_listContext
    return this;
}

Named_columns_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_columns_joinContext.prototype.constructor = Named_columns_joinContext;

Named_columns_joinContext.prototype.USING = function() {
    return this.getToken(SQLParser.USING, 0);
};

Named_columns_joinContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Named_columns_joinContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Named_columns_joinContext.prototype.column_reference_list = function() {
    return this.getTypedRuleContext(Column_reference_listContext,0);
};

Named_columns_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNamed_columns_join(this);
	}
};

Named_columns_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNamed_columns_join(this);
	}
};

Named_columns_joinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNamed_columns_join(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Named_columns_joinContext = Named_columns_joinContext;

SQLParser.prototype.named_columns_join = function() {

    var localctx = new Named_columns_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, SQLParser.RULE_named_columns_join);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1271;
        this.match(SQLParser.USING);
        this.state = 1272;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1273;
        localctx.f = this.column_reference_list();
        this.state = 1274;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_primary;
    this.alias = null; // IdentifierContext
    this.name = null; // IdentifierContext
    return this;
}

Table_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_primaryContext.prototype.constructor = Table_primaryContext;

Table_primaryContext.prototype.table_or_query_name = function() {
    return this.getTypedRuleContext(Table_or_query_nameContext,0);
};

Table_primaryContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Table_primaryContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Table_primaryContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Table_primaryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Table_primaryContext.prototype.AS = function() {
    return this.getToken(SQLParser.AS, 0);
};

Table_primaryContext.prototype.derived_table = function() {
    return this.getTypedRuleContext(Derived_tableContext,0);
};

Table_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_primary(this);
	}
};

Table_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_primary(this);
	}
};

Table_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_primaryContext = Table_primaryContext;

SQLParser.prototype.table_primary = function() {

    var localctx = new Table_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, SQLParser.RULE_table_primary);
    var _la = 0; // Token type
    try {
        this.state = 1300;
        switch(this._input.LA(1)) {
        case SQLParser.AVG:
        case SQLParser.BETWEEN:
        case SQLParser.BY:
        case SQLParser.CENTURY:
        case SQLParser.CHARACTER:
        case SQLParser.COLLECT:
        case SQLParser.COALESCE:
        case SQLParser.COLUMN:
        case SQLParser.COUNT:
        case SQLParser.CUBE:
        case SQLParser.DAY:
        case SQLParser.DEC:
        case SQLParser.DECADE:
        case SQLParser.DOW:
        case SQLParser.DOY:
        case SQLParser.DROP:
        case SQLParser.EPOCH:
        case SQLParser.EVERY:
        case SQLParser.EXISTS:
        case SQLParser.EXTERNAL:
        case SQLParser.EXTRACT:
        case SQLParser.FILTER:
        case SQLParser.FIRST:
        case SQLParser.FORMAT:
        case SQLParser.FUSION:
        case SQLParser.GROUPING:
        case SQLParser.HASH:
        case SQLParser.INDEX:
        case SQLParser.INSERT:
        case SQLParser.INTERSECTION:
        case SQLParser.ISODOW:
        case SQLParser.ISOYEAR:
        case SQLParser.LAST:
        case SQLParser.LESS:
        case SQLParser.LIST:
        case SQLParser.LOCATION:
        case SQLParser.MAX:
        case SQLParser.MAXVALUE:
        case SQLParser.MICROSECONDS:
        case SQLParser.MILLENNIUM:
        case SQLParser.MILLISECONDS:
        case SQLParser.MIN:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.NATIONAL:
        case SQLParser.NULLIF:
        case SQLParser.OVERWRITE:
        case SQLParser.PARTITION:
        case SQLParser.PARTITIONS:
        case SQLParser.PRECISION:
        case SQLParser.PURGE:
        case SQLParser.QUARTER:
        case SQLParser.RANGE:
        case SQLParser.REGEXP:
        case SQLParser.RLIKE:
        case SQLParser.ROLLUP:
        case SQLParser.SECOND:
        case SQLParser.SET:
        case SQLParser.SIMILAR:
        case SQLParser.STDDEV_POP:
        case SQLParser.STDDEV_SAMP:
        case SQLParser.SUBPARTITION:
        case SQLParser.SUM:
        case SQLParser.TABLESPACE:
        case SQLParser.THAN:
        case SQLParser.TIMEZONE:
        case SQLParser.TIMEZONE_HOUR:
        case SQLParser.TIMEZONE_MINUTE:
        case SQLParser.TRIM:
        case SQLParser.TO:
        case SQLParser.UNKNOWN:
        case SQLParser.VALUES:
        case SQLParser.VAR_SAMP:
        case SQLParser.VAR_POP:
        case SQLParser.VARYING:
        case SQLParser.WEEK:
        case SQLParser.YEAR:
        case SQLParser.ZONE:
        case SQLParser.BOOLEAN:
        case SQLParser.BOOL:
        case SQLParser.BIT:
        case SQLParser.VARBIT:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
        case SQLParser.CHAR:
        case SQLParser.VARCHAR:
        case SQLParser.NCHAR:
        case SQLParser.NVARCHAR:
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMETZ:
        case SQLParser.TIMESTAMP:
        case SQLParser.TIMESTAMPTZ:
        case SQLParser.TEXT:
        case SQLParser.VARBINARY:
        case SQLParser.BLOB:
        case SQLParser.BYTEA:
        case SQLParser.INET4:
        case SQLParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1276;
            this.table_or_query_name();
            this.state = 1281;
            _la = this._input.LA(1);
            if(_la===SQLParser.AS || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (SQLParser.AVG - 54)) | (1 << (SQLParser.BETWEEN - 54)) | (1 << (SQLParser.BY - 54)) | (1 << (SQLParser.CENTURY - 54)) | (1 << (SQLParser.CHARACTER - 54)) | (1 << (SQLParser.COLLECT - 54)) | (1 << (SQLParser.COALESCE - 54)) | (1 << (SQLParser.COLUMN - 54)) | (1 << (SQLParser.COUNT - 54)) | (1 << (SQLParser.CUBE - 54)) | (1 << (SQLParser.DAY - 54)) | (1 << (SQLParser.DEC - 54)) | (1 << (SQLParser.DECADE - 54)) | (1 << (SQLParser.DOW - 54)) | (1 << (SQLParser.DOY - 54)) | (1 << (SQLParser.DROP - 54)) | (1 << (SQLParser.EPOCH - 54)) | (1 << (SQLParser.EVERY - 54)) | (1 << (SQLParser.EXISTS - 54)) | (1 << (SQLParser.EXTERNAL - 54)) | (1 << (SQLParser.EXTRACT - 54)) | (1 << (SQLParser.FILTER - 54)) | (1 << (SQLParser.FIRST - 54)) | (1 << (SQLParser.FORMAT - 54)) | (1 << (SQLParser.FUSION - 54)) | (1 << (SQLParser.GROUPING - 54)) | (1 << (SQLParser.HASH - 54)) | (1 << (SQLParser.INDEX - 54)) | (1 << (SQLParser.INSERT - 54)) | (1 << (SQLParser.INTERSECTION - 54)) | (1 << (SQLParser.ISODOW - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (SQLParser.ISOYEAR - 86)) | (1 << (SQLParser.LAST - 86)) | (1 << (SQLParser.LESS - 86)) | (1 << (SQLParser.LIST - 86)) | (1 << (SQLParser.LOCATION - 86)) | (1 << (SQLParser.MAX - 86)) | (1 << (SQLParser.MAXVALUE - 86)) | (1 << (SQLParser.MICROSECONDS - 86)) | (1 << (SQLParser.MILLENNIUM - 86)) | (1 << (SQLParser.MILLISECONDS - 86)) | (1 << (SQLParser.MIN - 86)) | (1 << (SQLParser.MINUTE - 86)) | (1 << (SQLParser.MONTH - 86)) | (1 << (SQLParser.NATIONAL - 86)) | (1 << (SQLParser.NULLIF - 86)) | (1 << (SQLParser.OVERWRITE - 86)) | (1 << (SQLParser.PARTITION - 86)) | (1 << (SQLParser.PARTITIONS - 86)) | (1 << (SQLParser.PRECISION - 86)) | (1 << (SQLParser.PURGE - 86)) | (1 << (SQLParser.QUARTER - 86)) | (1 << (SQLParser.RANGE - 86)) | (1 << (SQLParser.REGEXP - 86)) | (1 << (SQLParser.RLIKE - 86)) | (1 << (SQLParser.ROLLUP - 86)) | (1 << (SQLParser.SECOND - 86)) | (1 << (SQLParser.SET - 86)) | (1 << (SQLParser.SIMILAR - 86)) | (1 << (SQLParser.STDDEV_POP - 86)) | (1 << (SQLParser.STDDEV_SAMP - 86)) | (1 << (SQLParser.SUBPARTITION - 86)) | (1 << (SQLParser.SUM - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (SQLParser.TABLESPACE - 118)) | (1 << (SQLParser.THAN - 118)) | (1 << (SQLParser.TIMEZONE - 118)) | (1 << (SQLParser.TIMEZONE_HOUR - 118)) | (1 << (SQLParser.TIMEZONE_MINUTE - 118)) | (1 << (SQLParser.TRIM - 118)) | (1 << (SQLParser.TO - 118)) | (1 << (SQLParser.UNKNOWN - 118)) | (1 << (SQLParser.VALUES - 118)) | (1 << (SQLParser.VAR_SAMP - 118)) | (1 << (SQLParser.VAR_POP - 118)) | (1 << (SQLParser.VARYING - 118)) | (1 << (SQLParser.WEEK - 118)) | (1 << (SQLParser.YEAR - 118)) | (1 << (SQLParser.ZONE - 118)) | (1 << (SQLParser.BOOLEAN - 118)) | (1 << (SQLParser.BOOL - 118)) | (1 << (SQLParser.BIT - 118)) | (1 << (SQLParser.VARBIT - 118)) | (1 << (SQLParser.INT1 - 118)) | (1 << (SQLParser.INT2 - 118)) | (1 << (SQLParser.INT4 - 118)) | (1 << (SQLParser.INT8 - 118)) | (1 << (SQLParser.TINYINT - 118)) | (1 << (SQLParser.SMALLINT - 118)) | (1 << (SQLParser.INT - 118)) | (1 << (SQLParser.INTEGER - 118)) | (1 << (SQLParser.BIGINT - 118)) | (1 << (SQLParser.FLOAT4 - 118)) | (1 << (SQLParser.FLOAT8 - 118)) | (1 << (SQLParser.REAL - 118)) | (1 << (SQLParser.FLOAT - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (SQLParser.DOUBLE - 150)) | (1 << (SQLParser.NUMERIC - 150)) | (1 << (SQLParser.DECIMAL - 150)) | (1 << (SQLParser.CHAR - 150)) | (1 << (SQLParser.VARCHAR - 150)) | (1 << (SQLParser.NCHAR - 150)) | (1 << (SQLParser.NVARCHAR - 150)) | (1 << (SQLParser.DATE - 150)) | (1 << (SQLParser.TIME - 150)) | (1 << (SQLParser.TIMETZ - 150)) | (1 << (SQLParser.TIMESTAMP - 150)) | (1 << (SQLParser.TIMESTAMPTZ - 150)) | (1 << (SQLParser.TEXT - 150)) | (1 << (SQLParser.VARBINARY - 150)) | (1 << (SQLParser.BLOB - 150)) | (1 << (SQLParser.BYTEA - 150)) | (1 << (SQLParser.INET4 - 150)))) !== 0) || _la===SQLParser.Identifier) {
                this.state = 1278;
                _la = this._input.LA(1);
                if(_la===SQLParser.AS) {
                    this.state = 1277;
                    this.match(SQLParser.AS);
                }

                this.state = 1280;
                localctx.alias = this.identifier();
            }

            this.state = 1287;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 1283;
                this.match(SQLParser.LEFT_PAREN);
                this.state = 1284;
                this.column_name_list();
                this.state = 1285;
                this.match(SQLParser.RIGHT_PAREN);
            }

            break;
        case SQLParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1289;
            this.derived_table();
            this.state = 1291;
            _la = this._input.LA(1);
            if(_la===SQLParser.AS) {
                this.state = 1290;
                this.match(SQLParser.AS);
            }

            this.state = 1293;
            localctx.name = this.identifier();
            this.state = 1298;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 1294;
                this.match(SQLParser.LEFT_PAREN);
                this.state = 1295;
                this.column_name_list();
                this.state = 1296;
                this.match(SQLParser.RIGHT_PAREN);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_name_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_name_list;
    return this;
}

Column_name_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_name_listContext.prototype.constructor = Column_name_listContext;

Column_name_listContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Column_name_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Column_name_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumn_name_list(this);
	}
};

Column_name_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumn_name_list(this);
	}
};

Column_name_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitColumn_name_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Column_name_listContext = Column_name_listContext;

SQLParser.prototype.column_name_list = function() {

    var localctx = new Column_name_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, SQLParser.RULE_column_name_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1302;
        this.identifier();
        this.state = 1307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1303;
            this.match(SQLParser.COMMA);
            this.state = 1304;
            this.identifier();
            this.state = 1309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_derived_table;
    return this;
}

Derived_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_tableContext.prototype.constructor = Derived_tableContext;

Derived_tableContext.prototype.table_subquery = function() {
    return this.getTypedRuleContext(Table_subqueryContext,0);
};

Derived_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDerived_table(this);
	}
};

Derived_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDerived_table(this);
	}
};

Derived_tableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDerived_table(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Derived_tableContext = Derived_tableContext;

SQLParser.prototype.derived_table = function() {

    var localctx = new Derived_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, SQLParser.RULE_derived_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1310;
        this.table_subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Where_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_where_clause;
    return this;
}

Where_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Where_clauseContext.prototype.constructor = Where_clauseContext;

Where_clauseContext.prototype.WHERE = function() {
    return this.getToken(SQLParser.WHERE, 0);
};

Where_clauseContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Where_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterWhere_clause(this);
	}
};

Where_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitWhere_clause(this);
	}
};

Where_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitWhere_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Where_clauseContext = Where_clauseContext;

SQLParser.prototype.where_clause = function() {

    var localctx = new Where_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, SQLParser.RULE_where_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1312;
        this.match(SQLParser.WHERE);
        this.state = 1313;
        this.search_condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_search_condition;
    return this;
}

Search_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_conditionContext.prototype.constructor = Search_conditionContext;

Search_conditionContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

Search_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSearch_condition(this);
	}
};

Search_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSearch_condition(this);
	}
};

Search_conditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSearch_condition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Search_conditionContext = Search_conditionContext;

SQLParser.prototype.search_condition = function() {

    var localctx = new Search_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, SQLParser.RULE_search_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1315;
        this.value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Groupby_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_groupby_clause;
    this.g = null; // Grouping_element_listContext
    return this;
}

Groupby_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Groupby_clauseContext.prototype.constructor = Groupby_clauseContext;

Groupby_clauseContext.prototype.GROUP = function() {
    return this.getToken(SQLParser.GROUP, 0);
};

Groupby_clauseContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Groupby_clauseContext.prototype.grouping_element_list = function() {
    return this.getTypedRuleContext(Grouping_element_listContext,0);
};

Groupby_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGroupby_clause(this);
	}
};

Groupby_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGroupby_clause(this);
	}
};

Groupby_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGroupby_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Groupby_clauseContext = Groupby_clauseContext;

SQLParser.prototype.groupby_clause = function() {

    var localctx = new Groupby_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, SQLParser.RULE_groupby_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1317;
        this.match(SQLParser.GROUP);
        this.state = 1318;
        this.match(SQLParser.BY);
        this.state = 1319;
        localctx.g = this.grouping_element_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_element_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_grouping_element_list;
    return this;
}

Grouping_element_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_element_listContext.prototype.constructor = Grouping_element_listContext;

Grouping_element_listContext.prototype.grouping_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Grouping_elementContext);
    } else {
        return this.getTypedRuleContext(Grouping_elementContext,i);
    }
};

Grouping_element_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Grouping_element_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGrouping_element_list(this);
	}
};

Grouping_element_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGrouping_element_list(this);
	}
};

Grouping_element_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGrouping_element_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Grouping_element_listContext = Grouping_element_listContext;

SQLParser.prototype.grouping_element_list = function() {

    var localctx = new Grouping_element_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, SQLParser.RULE_grouping_element_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1321;
        this.grouping_element();
        this.state = 1326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1322;
            this.match(SQLParser.COMMA);
            this.state = 1323;
            this.grouping_element();
            this.state = 1328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_grouping_element;
    return this;
}

Grouping_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_elementContext.prototype.constructor = Grouping_elementContext;

Grouping_elementContext.prototype.rollup_list = function() {
    return this.getTypedRuleContext(Rollup_listContext,0);
};

Grouping_elementContext.prototype.cube_list = function() {
    return this.getTypedRuleContext(Cube_listContext,0);
};

Grouping_elementContext.prototype.empty_grouping_set = function() {
    return this.getTypedRuleContext(Empty_grouping_setContext,0);
};

Grouping_elementContext.prototype.ordinary_grouping_set = function() {
    return this.getTypedRuleContext(Ordinary_grouping_setContext,0);
};

Grouping_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGrouping_element(this);
	}
};

Grouping_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGrouping_element(this);
	}
};

Grouping_elementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGrouping_element(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Grouping_elementContext = Grouping_elementContext;

SQLParser.prototype.grouping_element = function() {

    var localctx = new Grouping_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, SQLParser.RULE_grouping_element);
    try {
        this.state = 1333;
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1329;
            this.rollup_list();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1330;
            this.cube_list();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1331;
            this.empty_grouping_set();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1332;
            this.ordinary_grouping_set();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ordinary_grouping_setContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_ordinary_grouping_set;
    return this;
}

Ordinary_grouping_setContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ordinary_grouping_setContext.prototype.constructor = Ordinary_grouping_setContext;

Ordinary_grouping_setContext.prototype.row_value_predicand = function() {
    return this.getTypedRuleContext(Row_value_predicandContext,0);
};

Ordinary_grouping_setContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Ordinary_grouping_setContext.prototype.row_value_predicand_list = function() {
    return this.getTypedRuleContext(Row_value_predicand_listContext,0);
};

Ordinary_grouping_setContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Ordinary_grouping_setContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOrdinary_grouping_set(this);
	}
};

Ordinary_grouping_setContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOrdinary_grouping_set(this);
	}
};

Ordinary_grouping_setContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOrdinary_grouping_set(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Ordinary_grouping_setContext = Ordinary_grouping_setContext;

SQLParser.prototype.ordinary_grouping_set = function() {

    var localctx = new Ordinary_grouping_setContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, SQLParser.RULE_ordinary_grouping_set);
    try {
        this.state = 1340;
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1335;
            this.row_value_predicand();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1336;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 1337;
            this.row_value_predicand_list();
            this.state = 1338;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ordinary_grouping_set_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_ordinary_grouping_set_list;
    return this;
}

Ordinary_grouping_set_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ordinary_grouping_set_listContext.prototype.constructor = Ordinary_grouping_set_listContext;

Ordinary_grouping_set_listContext.prototype.ordinary_grouping_set = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordinary_grouping_setContext);
    } else {
        return this.getTypedRuleContext(Ordinary_grouping_setContext,i);
    }
};

Ordinary_grouping_set_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Ordinary_grouping_set_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOrdinary_grouping_set_list(this);
	}
};

Ordinary_grouping_set_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOrdinary_grouping_set_list(this);
	}
};

Ordinary_grouping_set_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOrdinary_grouping_set_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Ordinary_grouping_set_listContext = Ordinary_grouping_set_listContext;

SQLParser.prototype.ordinary_grouping_set_list = function() {

    var localctx = new Ordinary_grouping_set_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, SQLParser.RULE_ordinary_grouping_set_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1342;
        this.ordinary_grouping_set();
        this.state = 1347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1343;
            this.match(SQLParser.COMMA);
            this.state = 1344;
            this.ordinary_grouping_set();
            this.state = 1349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollup_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_rollup_list;
    this.c = null; // Ordinary_grouping_set_listContext
    return this;
}

Rollup_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollup_listContext.prototype.constructor = Rollup_listContext;

Rollup_listContext.prototype.ROLLUP = function() {
    return this.getToken(SQLParser.ROLLUP, 0);
};

Rollup_listContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Rollup_listContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Rollup_listContext.prototype.ordinary_grouping_set_list = function() {
    return this.getTypedRuleContext(Ordinary_grouping_set_listContext,0);
};

Rollup_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRollup_list(this);
	}
};

Rollup_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRollup_list(this);
	}
};

Rollup_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRollup_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Rollup_listContext = Rollup_listContext;

SQLParser.prototype.rollup_list = function() {

    var localctx = new Rollup_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, SQLParser.RULE_rollup_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1350;
        this.match(SQLParser.ROLLUP);
        this.state = 1351;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1352;
        localctx.c = this.ordinary_grouping_set_list();
        this.state = 1353;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cube_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cube_list;
    this.c = null; // Ordinary_grouping_set_listContext
    return this;
}

Cube_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cube_listContext.prototype.constructor = Cube_listContext;

Cube_listContext.prototype.CUBE = function() {
    return this.getToken(SQLParser.CUBE, 0);
};

Cube_listContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Cube_listContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Cube_listContext.prototype.ordinary_grouping_set_list = function() {
    return this.getTypedRuleContext(Ordinary_grouping_set_listContext,0);
};

Cube_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCube_list(this);
	}
};

Cube_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCube_list(this);
	}
};

Cube_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCube_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Cube_listContext = Cube_listContext;

SQLParser.prototype.cube_list = function() {

    var localctx = new Cube_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, SQLParser.RULE_cube_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1355;
        this.match(SQLParser.CUBE);
        this.state = 1356;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1357;
        localctx.c = this.ordinary_grouping_set_list();
        this.state = 1358;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Empty_grouping_setContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_empty_grouping_set;
    return this;
}

Empty_grouping_setContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Empty_grouping_setContext.prototype.constructor = Empty_grouping_setContext;

Empty_grouping_setContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Empty_grouping_setContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Empty_grouping_setContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterEmpty_grouping_set(this);
	}
};

Empty_grouping_setContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitEmpty_grouping_set(this);
	}
};

Empty_grouping_setContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitEmpty_grouping_set(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Empty_grouping_setContext = Empty_grouping_setContext;

SQLParser.prototype.empty_grouping_set = function() {

    var localctx = new Empty_grouping_setContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, SQLParser.RULE_empty_grouping_set);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1360;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1361;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Having_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_having_clause;
    return this;
}

Having_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Having_clauseContext.prototype.constructor = Having_clauseContext;

Having_clauseContext.prototype.HAVING = function() {
    return this.getToken(SQLParser.HAVING, 0);
};

Having_clauseContext.prototype.boolean_value_expression = function() {
    return this.getTypedRuleContext(Boolean_value_expressionContext,0);
};

Having_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterHaving_clause(this);
	}
};

Having_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitHaving_clause(this);
	}
};

Having_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitHaving_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Having_clauseContext = Having_clauseContext;

SQLParser.prototype.having_clause = function() {

    var localctx = new Having_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, SQLParser.RULE_having_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1363;
        this.match(SQLParser.HAVING);
        this.state = 1364;
        this.boolean_value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_value_predicand_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_value_predicand_list;
    return this;
}

Row_value_predicand_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_value_predicand_listContext.prototype.constructor = Row_value_predicand_listContext;

Row_value_predicand_listContext.prototype.row_value_predicand = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Row_value_predicandContext);
    } else {
        return this.getTypedRuleContext(Row_value_predicandContext,i);
    }
};

Row_value_predicand_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Row_value_predicand_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_value_predicand_list(this);
	}
};

Row_value_predicand_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_value_predicand_list(this);
	}
};

Row_value_predicand_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_value_predicand_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_value_predicand_listContext = Row_value_predicand_listContext;

SQLParser.prototype.row_value_predicand_list = function() {

    var localctx = new Row_value_predicand_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, SQLParser.RULE_row_value_predicand_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1366;
        this.row_value_predicand();
        this.state = 1371;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1367;
            this.match(SQLParser.COMMA);
            this.state = 1368;
            this.row_value_predicand();
            this.state = 1373;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_query_expression;
    return this;
}

Query_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_expressionContext.prototype.constructor = Query_expressionContext;

Query_expressionContext.prototype.query_expression_body = function() {
    return this.getTypedRuleContext(Query_expression_bodyContext,0);
};

Query_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuery_expression(this);
	}
};

Query_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuery_expression(this);
	}
};

Query_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuery_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Query_expressionContext = Query_expressionContext;

SQLParser.prototype.query_expression = function() {

    var localctx = new Query_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, SQLParser.RULE_query_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1374;
        this.query_expression_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_expression_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_query_expression_body;
    return this;
}

Query_expression_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_expression_bodyContext.prototype.constructor = Query_expression_bodyContext;

Query_expression_bodyContext.prototype.non_join_query_expression = function() {
    return this.getTypedRuleContext(Non_join_query_expressionContext,0);
};

Query_expression_bodyContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Query_expression_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuery_expression_body(this);
	}
};

Query_expression_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuery_expression_body(this);
	}
};

Query_expression_bodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuery_expression_body(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Query_expression_bodyContext = Query_expression_bodyContext;

SQLParser.prototype.query_expression_body = function() {

    var localctx = new Query_expression_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, SQLParser.RULE_query_expression_body);
    try {
        this.state = 1378;
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1376;
            this.non_join_query_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1377;
            this.joined_table();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_join_query_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_non_join_query_expression;
    return this;
}

Non_join_query_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_join_query_expressionContext.prototype.constructor = Non_join_query_expressionContext;

Non_join_query_expressionContext.prototype.non_join_query_term = function() {
    return this.getTypedRuleContext(Non_join_query_termContext,0);
};

Non_join_query_expressionContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Non_join_query_expressionContext.prototype.query_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_termContext);
    } else {
        return this.getTypedRuleContext(Query_termContext,i);
    }
};

Non_join_query_expressionContext.prototype.UNION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.UNION);
    } else {
        return this.getToken(SQLParser.UNION, i);
    }
};


Non_join_query_expressionContext.prototype.EXCEPT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.EXCEPT);
    } else {
        return this.getToken(SQLParser.EXCEPT, i);
    }
};


Non_join_query_expressionContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.ALL);
    } else {
        return this.getToken(SQLParser.ALL, i);
    }
};


Non_join_query_expressionContext.prototype.DISTINCT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.DISTINCT);
    } else {
        return this.getToken(SQLParser.DISTINCT, i);
    }
};


Non_join_query_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNon_join_query_expression(this);
	}
};

Non_join_query_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNon_join_query_expression(this);
	}
};

Non_join_query_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNon_join_query_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Non_join_query_expressionContext = Non_join_query_expressionContext;

SQLParser.prototype.non_join_query_expression = function() {

    var localctx = new Non_join_query_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, SQLParser.RULE_non_join_query_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1388;
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1380;
            this.non_join_query_term();
            break;

        case 2:
            this.state = 1381;
            this.joined_table();
            this.state = 1382;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.EXCEPT || _la===SQLParser.UNION)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1384;
            _la = this._input.LA(1);
            if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
                this.state = 1383;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.ALL || _la===SQLParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1386;
            this.query_term();
            break;

        }
        this.state = 1397;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.EXCEPT || _la===SQLParser.UNION) {
            this.state = 1390;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.EXCEPT || _la===SQLParser.UNION)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1392;
            _la = this._input.LA(1);
            if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
                this.state = 1391;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.ALL || _la===SQLParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1394;
            this.query_term();
            this.state = 1399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_termContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_query_term;
    return this;
}

Query_termContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_termContext.prototype.constructor = Query_termContext;

Query_termContext.prototype.non_join_query_term = function() {
    return this.getTypedRuleContext(Non_join_query_termContext,0);
};

Query_termContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Query_termContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuery_term(this);
	}
};

Query_termContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuery_term(this);
	}
};

Query_termContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuery_term(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Query_termContext = Query_termContext;

SQLParser.prototype.query_term = function() {

    var localctx = new Query_termContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, SQLParser.RULE_query_term);
    try {
        this.state = 1402;
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1400;
            this.non_join_query_term();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1401;
            this.joined_table();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_join_query_termContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_non_join_query_term;
    return this;
}

Non_join_query_termContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_join_query_termContext.prototype.constructor = Non_join_query_termContext;

Non_join_query_termContext.prototype.non_join_query_primary = function() {
    return this.getTypedRuleContext(Non_join_query_primaryContext,0);
};

Non_join_query_termContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Non_join_query_termContext.prototype.INTERSECT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.INTERSECT);
    } else {
        return this.getToken(SQLParser.INTERSECT, i);
    }
};


Non_join_query_termContext.prototype.query_primary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_primaryContext);
    } else {
        return this.getTypedRuleContext(Query_primaryContext,i);
    }
};

Non_join_query_termContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.ALL);
    } else {
        return this.getToken(SQLParser.ALL, i);
    }
};


Non_join_query_termContext.prototype.DISTINCT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.DISTINCT);
    } else {
        return this.getToken(SQLParser.DISTINCT, i);
    }
};


Non_join_query_termContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNon_join_query_term(this);
	}
};

Non_join_query_termContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNon_join_query_term(this);
	}
};

Non_join_query_termContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNon_join_query_term(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Non_join_query_termContext = Non_join_query_termContext;

SQLParser.prototype.non_join_query_term = function() {

    var localctx = new Non_join_query_termContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, SQLParser.RULE_non_join_query_term);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1412;
        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1404;
            this.non_join_query_primary();
            break;

        case 2:
            this.state = 1405;
            this.joined_table();
            this.state = 1406;
            this.match(SQLParser.INTERSECT);
            this.state = 1408;
            _la = this._input.LA(1);
            if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
                this.state = 1407;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.ALL || _la===SQLParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1410;
            this.query_primary();
            break;

        }
        this.state = 1421;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.INTERSECT) {
            this.state = 1414;
            this.match(SQLParser.INTERSECT);
            this.state = 1416;
            _la = this._input.LA(1);
            if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
                this.state = 1415;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.ALL || _la===SQLParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1418;
            this.query_primary();
            this.state = 1423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_query_primary;
    return this;
}

Query_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_primaryContext.prototype.constructor = Query_primaryContext;

Query_primaryContext.prototype.non_join_query_primary = function() {
    return this.getTypedRuleContext(Non_join_query_primaryContext,0);
};

Query_primaryContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Query_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuery_primary(this);
	}
};

Query_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuery_primary(this);
	}
};

Query_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuery_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Query_primaryContext = Query_primaryContext;

SQLParser.prototype.query_primary = function() {

    var localctx = new Query_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, SQLParser.RULE_query_primary);
    try {
        this.state = 1426;
        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1424;
            this.non_join_query_primary();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1425;
            this.joined_table();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_join_query_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_non_join_query_primary;
    return this;
}

Non_join_query_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_join_query_primaryContext.prototype.constructor = Non_join_query_primaryContext;

Non_join_query_primaryContext.prototype.simple_table = function() {
    return this.getTypedRuleContext(Simple_tableContext,0);
};

Non_join_query_primaryContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Non_join_query_primaryContext.prototype.non_join_query_expression = function() {
    return this.getTypedRuleContext(Non_join_query_expressionContext,0);
};

Non_join_query_primaryContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Non_join_query_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNon_join_query_primary(this);
	}
};

Non_join_query_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNon_join_query_primary(this);
	}
};

Non_join_query_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNon_join_query_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Non_join_query_primaryContext = Non_join_query_primaryContext;

SQLParser.prototype.non_join_query_primary = function() {

    var localctx = new Non_join_query_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, SQLParser.RULE_non_join_query_primary);
    try {
        this.state = 1433;
        switch(this._input.LA(1)) {
        case SQLParser.SELECT:
        case SQLParser.TABLE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1428;
            this.simple_table();
            break;
        case SQLParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1429;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 1430;
            this.non_join_query_expression();
            this.state = 1431;
            this.match(SQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_simple_table;
    return this;
}

Simple_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_tableContext.prototype.constructor = Simple_tableContext;

Simple_tableContext.prototype.query_specification = function() {
    return this.getTypedRuleContext(Query_specificationContext,0);
};

Simple_tableContext.prototype.explicit_table = function() {
    return this.getTypedRuleContext(Explicit_tableContext,0);
};

Simple_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSimple_table(this);
	}
};

Simple_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSimple_table(this);
	}
};

Simple_tableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSimple_table(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Simple_tableContext = Simple_tableContext;

SQLParser.prototype.simple_table = function() {

    var localctx = new Simple_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, SQLParser.RULE_simple_table);
    try {
        this.state = 1437;
        switch(this._input.LA(1)) {
        case SQLParser.SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1435;
            this.query_specification();
            break;
        case SQLParser.TABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1436;
            this.explicit_table();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explicit_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_explicit_table;
    return this;
}

Explicit_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explicit_tableContext.prototype.constructor = Explicit_tableContext;

Explicit_tableContext.prototype.TABLE = function() {
    return this.getToken(SQLParser.TABLE, 0);
};

Explicit_tableContext.prototype.table_or_query_name = function() {
    return this.getTypedRuleContext(Table_or_query_nameContext,0);
};

Explicit_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExplicit_table(this);
	}
};

Explicit_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExplicit_table(this);
	}
};

Explicit_tableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExplicit_table(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Explicit_tableContext = Explicit_tableContext;

SQLParser.prototype.explicit_table = function() {

    var localctx = new Explicit_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, SQLParser.RULE_explicit_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1439;
        this.match(SQLParser.TABLE);
        this.state = 1440;
        this.table_or_query_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_or_query_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_or_query_name;
    return this;
}

Table_or_query_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_or_query_nameContext.prototype.constructor = Table_or_query_nameContext;

Table_or_query_nameContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Table_or_query_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Table_or_query_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_or_query_name(this);
	}
};

Table_or_query_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_or_query_name(this);
	}
};

Table_or_query_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_or_query_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_or_query_nameContext = Table_or_query_nameContext;

SQLParser.prototype.table_or_query_name = function() {

    var localctx = new Table_or_query_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, SQLParser.RULE_table_or_query_name);
    try {
        this.state = 1444;
        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1442;
            this.table_name();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1443;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_name;
    return this;
}

Table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_nameContext.prototype.constructor = Table_nameContext;

Table_nameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Table_nameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.DOT);
    } else {
        return this.getToken(SQLParser.DOT, i);
    }
};


Table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_name(this);
	}
};

Table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_name(this);
	}
};

Table_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_nameContext = Table_nameContext;

SQLParser.prototype.table_name = function() {

    var localctx = new Table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, SQLParser.RULE_table_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1446;
        this.identifier();
        this.state = 1453;
        _la = this._input.LA(1);
        if(_la===SQLParser.DOT) {
            this.state = 1447;
            this.match(SQLParser.DOT);
            this.state = 1448;
            this.identifier();
            this.state = 1451;
            _la = this._input.LA(1);
            if(_la===SQLParser.DOT) {
                this.state = 1449;
                this.match(SQLParser.DOT);
                this.state = 1450;
                this.identifier();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_query_specification;
    return this;
}

Query_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_specificationContext.prototype.constructor = Query_specificationContext;

Query_specificationContext.prototype.SELECT = function() {
    return this.getToken(SQLParser.SELECT, 0);
};

Query_specificationContext.prototype.select_list = function() {
    return this.getTypedRuleContext(Select_listContext,0);
};

Query_specificationContext.prototype.set_qualifier = function() {
    return this.getTypedRuleContext(Set_qualifierContext,0);
};

Query_specificationContext.prototype.table_expression = function() {
    return this.getTypedRuleContext(Table_expressionContext,0);
};

Query_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuery_specification(this);
	}
};

Query_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuery_specification(this);
	}
};

Query_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuery_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Query_specificationContext = Query_specificationContext;

SQLParser.prototype.query_specification = function() {

    var localctx = new Query_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, SQLParser.RULE_query_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1455;
        this.match(SQLParser.SELECT);
        this.state = 1457;
        _la = this._input.LA(1);
        if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
            this.state = 1456;
            this.set_qualifier();
        }

        this.state = 1459;
        this.select_list();
        this.state = 1461;
        _la = this._input.LA(1);
        if(_la===SQLParser.FROM) {
            this.state = 1460;
            this.table_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_select_list;
    return this;
}

Select_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_listContext.prototype.constructor = Select_listContext;

Select_listContext.prototype.select_sublist = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_sublistContext);
    } else {
        return this.getTypedRuleContext(Select_sublistContext,i);
    }
};

Select_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Select_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSelect_list(this);
	}
};

Select_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSelect_list(this);
	}
};

Select_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSelect_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Select_listContext = Select_listContext;

SQLParser.prototype.select_list = function() {

    var localctx = new Select_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, SQLParser.RULE_select_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1463;
        this.select_sublist();
        this.state = 1468;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1464;
            this.match(SQLParser.COMMA);
            this.state = 1465;
            this.select_sublist();
            this.state = 1470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_sublistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_select_sublist;
    return this;
}

Select_sublistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_sublistContext.prototype.constructor = Select_sublistContext;

Select_sublistContext.prototype.derived_column = function() {
    return this.getTypedRuleContext(Derived_columnContext,0);
};

Select_sublistContext.prototype.qualified_asterisk = function() {
    return this.getTypedRuleContext(Qualified_asteriskContext,0);
};

Select_sublistContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSelect_sublist(this);
	}
};

Select_sublistContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSelect_sublist(this);
	}
};

Select_sublistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSelect_sublist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Select_sublistContext = Select_sublistContext;

SQLParser.prototype.select_sublist = function() {

    var localctx = new Select_sublistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, SQLParser.RULE_select_sublist);
    try {
        this.state = 1473;
        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1471;
            this.derived_column();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1472;
            this.qualified_asterisk();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_derived_column;
    return this;
}

Derived_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_columnContext.prototype.constructor = Derived_columnContext;

Derived_columnContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

Derived_columnContext.prototype.as_clause = function() {
    return this.getTypedRuleContext(As_clauseContext,0);
};

Derived_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDerived_column(this);
	}
};

Derived_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDerived_column(this);
	}
};

Derived_columnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDerived_column(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Derived_columnContext = Derived_columnContext;

SQLParser.prototype.derived_column = function() {

    var localctx = new Derived_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, SQLParser.RULE_derived_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1475;
        this.value_expression();
        this.state = 1477;
        _la = this._input.LA(1);
        if(_la===SQLParser.AS || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (SQLParser.AVG - 54)) | (1 << (SQLParser.BETWEEN - 54)) | (1 << (SQLParser.BY - 54)) | (1 << (SQLParser.CENTURY - 54)) | (1 << (SQLParser.CHARACTER - 54)) | (1 << (SQLParser.COLLECT - 54)) | (1 << (SQLParser.COALESCE - 54)) | (1 << (SQLParser.COLUMN - 54)) | (1 << (SQLParser.COUNT - 54)) | (1 << (SQLParser.CUBE - 54)) | (1 << (SQLParser.DAY - 54)) | (1 << (SQLParser.DEC - 54)) | (1 << (SQLParser.DECADE - 54)) | (1 << (SQLParser.DOW - 54)) | (1 << (SQLParser.DOY - 54)) | (1 << (SQLParser.DROP - 54)) | (1 << (SQLParser.EPOCH - 54)) | (1 << (SQLParser.EVERY - 54)) | (1 << (SQLParser.EXISTS - 54)) | (1 << (SQLParser.EXTERNAL - 54)) | (1 << (SQLParser.EXTRACT - 54)) | (1 << (SQLParser.FILTER - 54)) | (1 << (SQLParser.FIRST - 54)) | (1 << (SQLParser.FORMAT - 54)) | (1 << (SQLParser.FUSION - 54)) | (1 << (SQLParser.GROUPING - 54)) | (1 << (SQLParser.HASH - 54)) | (1 << (SQLParser.INDEX - 54)) | (1 << (SQLParser.INSERT - 54)) | (1 << (SQLParser.INTERSECTION - 54)) | (1 << (SQLParser.ISODOW - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (SQLParser.ISOYEAR - 86)) | (1 << (SQLParser.LAST - 86)) | (1 << (SQLParser.LESS - 86)) | (1 << (SQLParser.LIST - 86)) | (1 << (SQLParser.LOCATION - 86)) | (1 << (SQLParser.MAX - 86)) | (1 << (SQLParser.MAXVALUE - 86)) | (1 << (SQLParser.MICROSECONDS - 86)) | (1 << (SQLParser.MILLENNIUM - 86)) | (1 << (SQLParser.MILLISECONDS - 86)) | (1 << (SQLParser.MIN - 86)) | (1 << (SQLParser.MINUTE - 86)) | (1 << (SQLParser.MONTH - 86)) | (1 << (SQLParser.NATIONAL - 86)) | (1 << (SQLParser.NULLIF - 86)) | (1 << (SQLParser.OVERWRITE - 86)) | (1 << (SQLParser.PARTITION - 86)) | (1 << (SQLParser.PARTITIONS - 86)) | (1 << (SQLParser.PRECISION - 86)) | (1 << (SQLParser.PURGE - 86)) | (1 << (SQLParser.QUARTER - 86)) | (1 << (SQLParser.RANGE - 86)) | (1 << (SQLParser.REGEXP - 86)) | (1 << (SQLParser.RLIKE - 86)) | (1 << (SQLParser.ROLLUP - 86)) | (1 << (SQLParser.SECOND - 86)) | (1 << (SQLParser.SET - 86)) | (1 << (SQLParser.SIMILAR - 86)) | (1 << (SQLParser.STDDEV_POP - 86)) | (1 << (SQLParser.STDDEV_SAMP - 86)) | (1 << (SQLParser.SUBPARTITION - 86)) | (1 << (SQLParser.SUM - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (SQLParser.TABLESPACE - 118)) | (1 << (SQLParser.THAN - 118)) | (1 << (SQLParser.TIMEZONE - 118)) | (1 << (SQLParser.TIMEZONE_HOUR - 118)) | (1 << (SQLParser.TIMEZONE_MINUTE - 118)) | (1 << (SQLParser.TRIM - 118)) | (1 << (SQLParser.TO - 118)) | (1 << (SQLParser.UNKNOWN - 118)) | (1 << (SQLParser.VALUES - 118)) | (1 << (SQLParser.VAR_SAMP - 118)) | (1 << (SQLParser.VAR_POP - 118)) | (1 << (SQLParser.VARYING - 118)) | (1 << (SQLParser.WEEK - 118)) | (1 << (SQLParser.YEAR - 118)) | (1 << (SQLParser.ZONE - 118)) | (1 << (SQLParser.BOOLEAN - 118)) | (1 << (SQLParser.BOOL - 118)) | (1 << (SQLParser.BIT - 118)) | (1 << (SQLParser.VARBIT - 118)) | (1 << (SQLParser.INT1 - 118)) | (1 << (SQLParser.INT2 - 118)) | (1 << (SQLParser.INT4 - 118)) | (1 << (SQLParser.INT8 - 118)) | (1 << (SQLParser.TINYINT - 118)) | (1 << (SQLParser.SMALLINT - 118)) | (1 << (SQLParser.INT - 118)) | (1 << (SQLParser.INTEGER - 118)) | (1 << (SQLParser.BIGINT - 118)) | (1 << (SQLParser.FLOAT4 - 118)) | (1 << (SQLParser.FLOAT8 - 118)) | (1 << (SQLParser.REAL - 118)) | (1 << (SQLParser.FLOAT - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (SQLParser.DOUBLE - 150)) | (1 << (SQLParser.NUMERIC - 150)) | (1 << (SQLParser.DECIMAL - 150)) | (1 << (SQLParser.CHAR - 150)) | (1 << (SQLParser.VARCHAR - 150)) | (1 << (SQLParser.NCHAR - 150)) | (1 << (SQLParser.NVARCHAR - 150)) | (1 << (SQLParser.DATE - 150)) | (1 << (SQLParser.TIME - 150)) | (1 << (SQLParser.TIMETZ - 150)) | (1 << (SQLParser.TIMESTAMP - 150)) | (1 << (SQLParser.TIMESTAMPTZ - 150)) | (1 << (SQLParser.TEXT - 150)) | (1 << (SQLParser.VARBINARY - 150)) | (1 << (SQLParser.BLOB - 150)) | (1 << (SQLParser.BYTEA - 150)) | (1 << (SQLParser.INET4 - 150)))) !== 0) || _la===SQLParser.Identifier) {
            this.state = 1476;
            this.as_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Qualified_asteriskContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_qualified_asterisk;
    this.tb_name = null; // Token
    return this;
}

Qualified_asteriskContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_asteriskContext.prototype.constructor = Qualified_asteriskContext;

Qualified_asteriskContext.prototype.MULTIPLY = function() {
    return this.getToken(SQLParser.MULTIPLY, 0);
};

Qualified_asteriskContext.prototype.DOT = function() {
    return this.getToken(SQLParser.DOT, 0);
};

Qualified_asteriskContext.prototype.Identifier = function() {
    return this.getToken(SQLParser.Identifier, 0);
};

Qualified_asteriskContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQualified_asterisk(this);
	}
};

Qualified_asteriskContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQualified_asterisk(this);
	}
};

Qualified_asteriskContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQualified_asterisk(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Qualified_asteriskContext = Qualified_asteriskContext;

SQLParser.prototype.qualified_asterisk = function() {

    var localctx = new Qualified_asteriskContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, SQLParser.RULE_qualified_asterisk);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1481;
        _la = this._input.LA(1);
        if(_la===SQLParser.Identifier) {
            this.state = 1479;
            localctx.tb_name = this.match(SQLParser.Identifier);
            this.state = 1480;
            this.match(SQLParser.DOT);
        }

        this.state = 1483;
        this.match(SQLParser.MULTIPLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_qualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_set_qualifier;
    return this;
}

Set_qualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_qualifierContext.prototype.constructor = Set_qualifierContext;

Set_qualifierContext.prototype.DISTINCT = function() {
    return this.getToken(SQLParser.DISTINCT, 0);
};

Set_qualifierContext.prototype.ALL = function() {
    return this.getToken(SQLParser.ALL, 0);
};

Set_qualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSet_qualifier(this);
	}
};

Set_qualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSet_qualifier(this);
	}
};

Set_qualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSet_qualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Set_qualifierContext = Set_qualifierContext;

SQLParser.prototype.set_qualifier = function() {

    var localctx = new Set_qualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, SQLParser.RULE_set_qualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1485;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.ALL || _la===SQLParser.DISTINCT)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_referenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_reference;
    this.tb_name = null; // IdentifierContext
    this.name = null; // IdentifierContext
    return this;
}

Column_referenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_referenceContext.prototype.constructor = Column_referenceContext;

Column_referenceContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Column_referenceContext.prototype.DOT = function() {
    return this.getToken(SQLParser.DOT, 0);
};

Column_referenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumn_reference(this);
	}
};

Column_referenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumn_reference(this);
	}
};

Column_referenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitColumn_reference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Column_referenceContext = Column_referenceContext;

SQLParser.prototype.column_reference = function() {

    var localctx = new Column_referenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, SQLParser.RULE_column_reference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1490;
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        if(la_===1) {
            this.state = 1487;
            localctx.tb_name = this.identifier();
            this.state = 1488;
            this.match(SQLParser.DOT);

        }
        this.state = 1492;
        localctx.name = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function As_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_as_clause;
    return this;
}

As_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
As_clauseContext.prototype.constructor = As_clauseContext;

As_clauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

As_clauseContext.prototype.AS = function() {
    return this.getToken(SQLParser.AS, 0);
};

As_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterAs_clause(this);
	}
};

As_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitAs_clause(this);
	}
};

As_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitAs_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.As_clauseContext = As_clauseContext;

SQLParser.prototype.as_clause = function() {

    var localctx = new As_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, SQLParser.RULE_as_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1495;
        _la = this._input.LA(1);
        if(_la===SQLParser.AS) {
            this.state = 1494;
            this.match(SQLParser.AS);
        }

        this.state = 1497;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_reference_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_reference_list;
    return this;
}

Column_reference_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_reference_listContext.prototype.constructor = Column_reference_listContext;

Column_reference_listContext.prototype.column_reference = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_referenceContext);
    } else {
        return this.getTypedRuleContext(Column_referenceContext,i);
    }
};

Column_reference_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Column_reference_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumn_reference_list(this);
	}
};

Column_reference_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumn_reference_list(this);
	}
};

Column_reference_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitColumn_reference_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Column_reference_listContext = Column_reference_listContext;

SQLParser.prototype.column_reference_list = function() {

    var localctx = new Column_reference_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, SQLParser.RULE_column_reference_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1499;
        this.column_reference();
        this.state = 1504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1500;
            this.match(SQLParser.COMMA);
            this.state = 1501;
            this.column_reference();
            this.state = 1506;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Scalar_subqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_scalar_subquery;
    return this;
}

Scalar_subqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Scalar_subqueryContext.prototype.constructor = Scalar_subqueryContext;

Scalar_subqueryContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Scalar_subqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterScalar_subquery(this);
	}
};

Scalar_subqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitScalar_subquery(this);
	}
};

Scalar_subqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitScalar_subquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Scalar_subqueryContext = Scalar_subqueryContext;

SQLParser.prototype.scalar_subquery = function() {

    var localctx = new Scalar_subqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, SQLParser.RULE_scalar_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1507;
        this.subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_subqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_subquery;
    return this;
}

Row_subqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_subqueryContext.prototype.constructor = Row_subqueryContext;

Row_subqueryContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Row_subqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_subquery(this);
	}
};

Row_subqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_subquery(this);
	}
};

Row_subqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_subquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_subqueryContext = Row_subqueryContext;

SQLParser.prototype.row_subquery = function() {

    var localctx = new Row_subqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, SQLParser.RULE_row_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1509;
        this.subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_subqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_subquery;
    return this;
}

Table_subqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_subqueryContext.prototype.constructor = Table_subqueryContext;

Table_subqueryContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Table_subqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_subquery(this);
	}
};

Table_subqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_subquery(this);
	}
};

Table_subqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_subquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_subqueryContext = Table_subqueryContext;

SQLParser.prototype.table_subquery = function() {

    var localctx = new Table_subqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, SQLParser.RULE_table_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1511;
        this.subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_subquery;
    return this;
}

SubqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SubqueryContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

SubqueryContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

SubqueryContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSubquery(this);
	}
};

SubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSubquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.SubqueryContext = SubqueryContext;

SQLParser.prototype.subquery = function() {

    var localctx = new SubqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, SQLParser.RULE_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1513;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1514;
        this.query_expression();
        this.state = 1515;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.comparison_predicate = function() {
    return this.getTypedRuleContext(Comparison_predicateContext,0);
};

PredicateContext.prototype.between_predicate = function() {
    return this.getTypedRuleContext(Between_predicateContext,0);
};

PredicateContext.prototype.in_predicate = function() {
    return this.getTypedRuleContext(In_predicateContext,0);
};

PredicateContext.prototype.pattern_matching_predicate = function() {
    return this.getTypedRuleContext(Pattern_matching_predicateContext,0);
};

PredicateContext.prototype.null_predicate = function() {
    return this.getTypedRuleContext(Null_predicateContext,0);
};

PredicateContext.prototype.exists_predicate = function() {
    return this.getTypedRuleContext(Exists_predicateContext,0);
};

PredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPredicate(this);
	}
};

PredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPredicate(this);
	}
};

PredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.PredicateContext = PredicateContext;

SQLParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, SQLParser.RULE_predicate);
    try {
        this.state = 1523;
        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1517;
            this.comparison_predicate();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1518;
            this.between_predicate();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1519;
            this.in_predicate();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1520;
            this.pattern_matching_predicate();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1521;
            this.null_predicate();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1522;
            this.exists_predicate();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comparison_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_comparison_predicate;
    this.left = null; // Row_value_predicandContext
    this.c = null; // Comp_opContext
    this.right = null; // Row_value_predicandContext
    return this;
}

Comparison_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comparison_predicateContext.prototype.constructor = Comparison_predicateContext;

Comparison_predicateContext.prototype.row_value_predicand = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Row_value_predicandContext);
    } else {
        return this.getTypedRuleContext(Row_value_predicandContext,i);
    }
};

Comparison_predicateContext.prototype.comp_op = function() {
    return this.getTypedRuleContext(Comp_opContext,0);
};

Comparison_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterComparison_predicate(this);
	}
};

Comparison_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitComparison_predicate(this);
	}
};

Comparison_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitComparison_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Comparison_predicateContext = Comparison_predicateContext;

SQLParser.prototype.comparison_predicate = function() {

    var localctx = new Comparison_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, SQLParser.RULE_comparison_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1525;
        localctx.left = this.row_value_predicand();
        this.state = 1526;
        localctx.c = this.comp_op();
        this.state = 1527;
        localctx.right = this.row_value_predicand();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_comp_op;
    return this;
}

Comp_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_opContext.prototype.constructor = Comp_opContext;

Comp_opContext.prototype.EQUAL = function() {
    return this.getToken(SQLParser.EQUAL, 0);
};

Comp_opContext.prototype.NOT_EQUAL = function() {
    return this.getToken(SQLParser.NOT_EQUAL, 0);
};

Comp_opContext.prototype.LTH = function() {
    return this.getToken(SQLParser.LTH, 0);
};

Comp_opContext.prototype.LEQ = function() {
    return this.getToken(SQLParser.LEQ, 0);
};

Comp_opContext.prototype.GTH = function() {
    return this.getToken(SQLParser.GTH, 0);
};

Comp_opContext.prototype.GEQ = function() {
    return this.getToken(SQLParser.GEQ, 0);
};

Comp_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterComp_op(this);
	}
};

Comp_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitComp_op(this);
	}
};

Comp_opContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitComp_op(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Comp_opContext = Comp_opContext;

SQLParser.prototype.comp_op = function() {

    var localctx = new Comp_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, SQLParser.RULE_comp_op);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1529;
        _la = this._input.LA(1);
        if(!(((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (SQLParser.EQUAL - 174)) | (1 << (SQLParser.NOT_EQUAL - 174)) | (1 << (SQLParser.LTH - 174)) | (1 << (SQLParser.LEQ - 174)) | (1 << (SQLParser.GTH - 174)) | (1 << (SQLParser.GEQ - 174)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Between_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_between_predicate;
    this.predicand = null; // Row_value_predicandContext
    return this;
}

Between_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Between_predicateContext.prototype.constructor = Between_predicateContext;

Between_predicateContext.prototype.between_predicate_part_2 = function() {
    return this.getTypedRuleContext(Between_predicate_part_2Context,0);
};

Between_predicateContext.prototype.row_value_predicand = function() {
    return this.getTypedRuleContext(Row_value_predicandContext,0);
};

Between_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBetween_predicate(this);
	}
};

Between_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBetween_predicate(this);
	}
};

Between_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBetween_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Between_predicateContext = Between_predicateContext;

SQLParser.prototype.between_predicate = function() {

    var localctx = new Between_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, SQLParser.RULE_between_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1531;
        localctx.predicand = this.row_value_predicand();
        this.state = 1532;
        this.between_predicate_part_2();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Between_predicate_part_2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_between_predicate_part_2;
    this.begin = null; // Row_value_predicandContext
    this.end = null; // Row_value_predicandContext
    return this;
}

Between_predicate_part_2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Between_predicate_part_2Context.prototype.constructor = Between_predicate_part_2Context;

Between_predicate_part_2Context.prototype.BETWEEN = function() {
    return this.getToken(SQLParser.BETWEEN, 0);
};

Between_predicate_part_2Context.prototype.AND = function() {
    return this.getToken(SQLParser.AND, 0);
};

Between_predicate_part_2Context.prototype.row_value_predicand = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Row_value_predicandContext);
    } else {
        return this.getTypedRuleContext(Row_value_predicandContext,i);
    }
};

Between_predicate_part_2Context.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Between_predicate_part_2Context.prototype.ASYMMETRIC = function() {
    return this.getToken(SQLParser.ASYMMETRIC, 0);
};

Between_predicate_part_2Context.prototype.SYMMETRIC = function() {
    return this.getToken(SQLParser.SYMMETRIC, 0);
};

Between_predicate_part_2Context.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBetween_predicate_part_2(this);
	}
};

Between_predicate_part_2Context.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBetween_predicate_part_2(this);
	}
};

Between_predicate_part_2Context.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBetween_predicate_part_2(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Between_predicate_part_2Context = Between_predicate_part_2Context;

SQLParser.prototype.between_predicate_part_2 = function() {

    var localctx = new Between_predicate_part_2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 344, SQLParser.RULE_between_predicate_part_2);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1535;
        _la = this._input.LA(1);
        if(_la===SQLParser.NOT) {
            this.state = 1534;
            this.match(SQLParser.NOT);
        }

        this.state = 1537;
        this.match(SQLParser.BETWEEN);
        this.state = 1539;
        _la = this._input.LA(1);
        if(_la===SQLParser.ASYMMETRIC || _la===SQLParser.SYMMETRIC) {
            this.state = 1538;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.ASYMMETRIC || _la===SQLParser.SYMMETRIC)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 1541;
        localctx.begin = this.row_value_predicand();
        this.state = 1542;
        this.match(SQLParser.AND);
        this.state = 1543;
        localctx.end = this.row_value_predicand();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function In_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_in_predicate;
    this.predicand = null; // Numeric_value_expressionContext
    return this;
}

In_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
In_predicateContext.prototype.constructor = In_predicateContext;

In_predicateContext.prototype.IN = function() {
    return this.getToken(SQLParser.IN, 0);
};

In_predicateContext.prototype.in_predicate_value = function() {
    return this.getTypedRuleContext(In_predicate_valueContext,0);
};

In_predicateContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

In_predicateContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

In_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIn_predicate(this);
	}
};

In_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIn_predicate(this);
	}
};

In_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIn_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.In_predicateContext = In_predicateContext;

SQLParser.prototype.in_predicate = function() {

    var localctx = new In_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, SQLParser.RULE_in_predicate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1545;
        localctx.predicand = this.numeric_value_expression();
        this.state = 1547;
        _la = this._input.LA(1);
        if(_la===SQLParser.NOT) {
            this.state = 1546;
            this.match(SQLParser.NOT);
        }

        this.state = 1549;
        this.match(SQLParser.IN);
        this.state = 1550;
        this.in_predicate_value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function In_predicate_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_in_predicate_value;
    return this;
}

In_predicate_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
In_predicate_valueContext.prototype.constructor = In_predicate_valueContext;

In_predicate_valueContext.prototype.table_subquery = function() {
    return this.getTypedRuleContext(Table_subqueryContext,0);
};

In_predicate_valueContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

In_predicate_valueContext.prototype.in_value_list = function() {
    return this.getTypedRuleContext(In_value_listContext,0);
};

In_predicate_valueContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

In_predicate_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIn_predicate_value(this);
	}
};

In_predicate_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIn_predicate_value(this);
	}
};

In_predicate_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIn_predicate_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.In_predicate_valueContext = In_predicate_valueContext;

SQLParser.prototype.in_predicate_value = function() {

    var localctx = new In_predicate_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, SQLParser.RULE_in_predicate_value);
    try {
        this.state = 1557;
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1552;
            this.table_subquery();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1553;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 1554;
            this.in_value_list();
            this.state = 1555;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function In_value_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_in_value_list;
    return this;
}

In_value_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
In_value_listContext.prototype.constructor = In_value_listContext;

In_value_listContext.prototype.row_value_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Row_value_expressionContext);
    } else {
        return this.getTypedRuleContext(Row_value_expressionContext,i);
    }
};

In_value_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


In_value_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIn_value_list(this);
	}
};

In_value_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIn_value_list(this);
	}
};

In_value_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIn_value_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.In_value_listContext = In_value_listContext;

SQLParser.prototype.in_value_list = function() {

    var localctx = new In_value_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, SQLParser.RULE_in_value_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1559;
        this.row_value_expression();
        this.state = 1564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1560;
            this.match(SQLParser.COMMA);
            this.state = 1561;
            this.row_value_expression();
            this.state = 1566;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pattern_matching_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_pattern_matching_predicate;
    this.f = null; // Row_value_predicandContext
    this.s = null; // Token
    return this;
}

Pattern_matching_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_matching_predicateContext.prototype.constructor = Pattern_matching_predicateContext;

Pattern_matching_predicateContext.prototype.pattern_matcher = function() {
    return this.getTypedRuleContext(Pattern_matcherContext,0);
};

Pattern_matching_predicateContext.prototype.row_value_predicand = function() {
    return this.getTypedRuleContext(Row_value_predicandContext,0);
};

Pattern_matching_predicateContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Pattern_matching_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPattern_matching_predicate(this);
	}
};

Pattern_matching_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPattern_matching_predicate(this);
	}
};

Pattern_matching_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPattern_matching_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Pattern_matching_predicateContext = Pattern_matching_predicateContext;

SQLParser.prototype.pattern_matching_predicate = function() {

    var localctx = new Pattern_matching_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, SQLParser.RULE_pattern_matching_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1567;
        localctx.f = this.row_value_predicand();
        this.state = 1568;
        this.pattern_matcher();
        this.state = 1569;
        localctx.s = this.match(SQLParser.Character_String_Literal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pattern_matcherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_pattern_matcher;
    return this;
}

Pattern_matcherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_matcherContext.prototype.constructor = Pattern_matcherContext;

Pattern_matcherContext.prototype.negativable_matcher = function() {
    return this.getTypedRuleContext(Negativable_matcherContext,0);
};

Pattern_matcherContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Pattern_matcherContext.prototype.regex_matcher = function() {
    return this.getTypedRuleContext(Regex_matcherContext,0);
};

Pattern_matcherContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPattern_matcher(this);
	}
};

Pattern_matcherContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPattern_matcher(this);
	}
};

Pattern_matcherContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPattern_matcher(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Pattern_matcherContext = Pattern_matcherContext;

SQLParser.prototype.pattern_matcher = function() {

    var localctx = new Pattern_matcherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, SQLParser.RULE_pattern_matcher);
    var _la = 0; // Token type
    try {
        this.state = 1576;
        switch(this._input.LA(1)) {
        case SQLParser.ILIKE:
        case SQLParser.LIKE:
        case SQLParser.NOT:
        case SQLParser.REGEXP:
        case SQLParser.RLIKE:
        case SQLParser.SIMILAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 1572;
            _la = this._input.LA(1);
            if(_la===SQLParser.NOT) {
                this.state = 1571;
                this.match(SQLParser.NOT);
            }

            this.state = 1574;
            this.negativable_matcher();
            break;
        case SQLParser.Similar_To:
        case SQLParser.Not_Similar_To:
        case SQLParser.Similar_To_Case_Insensitive:
        case SQLParser.Not_Similar_To_Case_Insensitive:
            this.enterOuterAlt(localctx, 2);
            this.state = 1575;
            this.regex_matcher();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Negativable_matcherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_negativable_matcher;
    return this;
}

Negativable_matcherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Negativable_matcherContext.prototype.constructor = Negativable_matcherContext;

Negativable_matcherContext.prototype.LIKE = function() {
    return this.getToken(SQLParser.LIKE, 0);
};

Negativable_matcherContext.prototype.ILIKE = function() {
    return this.getToken(SQLParser.ILIKE, 0);
};

Negativable_matcherContext.prototype.SIMILAR = function() {
    return this.getToken(SQLParser.SIMILAR, 0);
};

Negativable_matcherContext.prototype.TO = function() {
    return this.getToken(SQLParser.TO, 0);
};

Negativable_matcherContext.prototype.REGEXP = function() {
    return this.getToken(SQLParser.REGEXP, 0);
};

Negativable_matcherContext.prototype.RLIKE = function() {
    return this.getToken(SQLParser.RLIKE, 0);
};

Negativable_matcherContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNegativable_matcher(this);
	}
};

Negativable_matcherContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNegativable_matcher(this);
	}
};

Negativable_matcherContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNegativable_matcher(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Negativable_matcherContext = Negativable_matcherContext;

SQLParser.prototype.negativable_matcher = function() {

    var localctx = new Negativable_matcherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, SQLParser.RULE_negativable_matcher);
    try {
        this.state = 1584;
        switch(this._input.LA(1)) {
        case SQLParser.LIKE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1578;
            this.match(SQLParser.LIKE);
            break;
        case SQLParser.ILIKE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1579;
            this.match(SQLParser.ILIKE);
            break;
        case SQLParser.SIMILAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 1580;
            this.match(SQLParser.SIMILAR);
            this.state = 1581;
            this.match(SQLParser.TO);
            break;
        case SQLParser.REGEXP:
            this.enterOuterAlt(localctx, 4);
            this.state = 1582;
            this.match(SQLParser.REGEXP);
            break;
        case SQLParser.RLIKE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1583;
            this.match(SQLParser.RLIKE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Regex_matcherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_regex_matcher;
    return this;
}

Regex_matcherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Regex_matcherContext.prototype.constructor = Regex_matcherContext;

Regex_matcherContext.prototype.Similar_To = function() {
    return this.getToken(SQLParser.Similar_To, 0);
};

Regex_matcherContext.prototype.Not_Similar_To = function() {
    return this.getToken(SQLParser.Not_Similar_To, 0);
};

Regex_matcherContext.prototype.Similar_To_Case_Insensitive = function() {
    return this.getToken(SQLParser.Similar_To_Case_Insensitive, 0);
};

Regex_matcherContext.prototype.Not_Similar_To_Case_Insensitive = function() {
    return this.getToken(SQLParser.Not_Similar_To_Case_Insensitive, 0);
};

Regex_matcherContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRegex_matcher(this);
	}
};

Regex_matcherContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRegex_matcher(this);
	}
};

Regex_matcherContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRegex_matcher(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Regex_matcherContext = Regex_matcherContext;

SQLParser.prototype.regex_matcher = function() {

    var localctx = new Regex_matcherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, SQLParser.RULE_regex_matcher);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1586;
        _la = this._input.LA(1);
        if(!(((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (SQLParser.Similar_To - 168)) | (1 << (SQLParser.Not_Similar_To - 168)) | (1 << (SQLParser.Similar_To_Case_Insensitive - 168)) | (1 << (SQLParser.Not_Similar_To_Case_Insensitive - 168)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_null_predicate;
    this.predicand = null; // Row_value_predicandContext
    this.n = null; // Token
    return this;
}

Null_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_predicateContext.prototype.constructor = Null_predicateContext;

Null_predicateContext.prototype.IS = function() {
    return this.getToken(SQLParser.IS, 0);
};

Null_predicateContext.prototype.NULL = function() {
    return this.getToken(SQLParser.NULL, 0);
};

Null_predicateContext.prototype.row_value_predicand = function() {
    return this.getTypedRuleContext(Row_value_predicandContext,0);
};

Null_predicateContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Null_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNull_predicate(this);
	}
};

Null_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNull_predicate(this);
	}
};

Null_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNull_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Null_predicateContext = Null_predicateContext;

SQLParser.prototype.null_predicate = function() {

    var localctx = new Null_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, SQLParser.RULE_null_predicate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1588;
        localctx.predicand = this.row_value_predicand();
        this.state = 1589;
        this.match(SQLParser.IS);
        this.state = 1591;
        _la = this._input.LA(1);
        if(_la===SQLParser.NOT) {
            this.state = 1590;
            localctx.n = this.match(SQLParser.NOT);
        }

        this.state = 1593;
        this.match(SQLParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Quantified_comparison_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_quantified_comparison_predicate;
    this.l = null; // Numeric_value_expressionContext
    this.c = null; // Comp_opContext
    this.q = null; // QuantifierContext
    this.s = null; // Table_subqueryContext
    return this;
}

Quantified_comparison_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quantified_comparison_predicateContext.prototype.constructor = Quantified_comparison_predicateContext;

Quantified_comparison_predicateContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

Quantified_comparison_predicateContext.prototype.comp_op = function() {
    return this.getTypedRuleContext(Comp_opContext,0);
};

Quantified_comparison_predicateContext.prototype.quantifier = function() {
    return this.getTypedRuleContext(QuantifierContext,0);
};

Quantified_comparison_predicateContext.prototype.table_subquery = function() {
    return this.getTypedRuleContext(Table_subqueryContext,0);
};

Quantified_comparison_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuantified_comparison_predicate(this);
	}
};

Quantified_comparison_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuantified_comparison_predicate(this);
	}
};

Quantified_comparison_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuantified_comparison_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Quantified_comparison_predicateContext = Quantified_comparison_predicateContext;

SQLParser.prototype.quantified_comparison_predicate = function() {

    var localctx = new Quantified_comparison_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, SQLParser.RULE_quantified_comparison_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1595;
        localctx.l = this.numeric_value_expression();
        this.state = 1596;
        localctx.c = this.comp_op();
        this.state = 1597;
        localctx.q = this.quantifier();
        this.state = 1598;
        localctx.s = this.table_subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_quantifier;
    return this;
}

QuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuantifierContext.prototype.constructor = QuantifierContext;

QuantifierContext.prototype.all = function() {
    return this.getTypedRuleContext(AllContext,0);
};

QuantifierContext.prototype.some = function() {
    return this.getTypedRuleContext(SomeContext,0);
};

QuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuantifier(this);
	}
};

QuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuantifier(this);
	}
};

QuantifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuantifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.QuantifierContext = QuantifierContext;

SQLParser.prototype.quantifier = function() {

    var localctx = new QuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, SQLParser.RULE_quantifier);
    try {
        this.state = 1602;
        switch(this._input.LA(1)) {
        case SQLParser.ALL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1600;
            this.all();
            break;
        case SQLParser.ANY:
        case SQLParser.SOME:
            this.enterOuterAlt(localctx, 2);
            this.state = 1601;
            this.some();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AllContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_all;
    return this;
}

AllContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllContext.prototype.constructor = AllContext;

AllContext.prototype.ALL = function() {
    return this.getToken(SQLParser.ALL, 0);
};

AllContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterAll(this);
	}
};

AllContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitAll(this);
	}
};

AllContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitAll(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.AllContext = AllContext;

SQLParser.prototype.all = function() {

    var localctx = new AllContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, SQLParser.RULE_all);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1604;
        this.match(SQLParser.ALL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SomeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_some;
    return this;
}

SomeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SomeContext.prototype.constructor = SomeContext;

SomeContext.prototype.SOME = function() {
    return this.getToken(SQLParser.SOME, 0);
};

SomeContext.prototype.ANY = function() {
    return this.getToken(SQLParser.ANY, 0);
};

SomeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSome(this);
	}
};

SomeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSome(this);
	}
};

SomeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSome(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.SomeContext = SomeContext;

SQLParser.prototype.some = function() {

    var localctx = new SomeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, SQLParser.RULE_some);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1606;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.ANY || _la===SQLParser.SOME)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exists_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_exists_predicate;
    this.s = null; // Table_subqueryContext
    return this;
}

Exists_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exists_predicateContext.prototype.constructor = Exists_predicateContext;

Exists_predicateContext.prototype.EXISTS = function() {
    return this.getToken(SQLParser.EXISTS, 0);
};

Exists_predicateContext.prototype.table_subquery = function() {
    return this.getTypedRuleContext(Table_subqueryContext,0);
};

Exists_predicateContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Exists_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExists_predicate(this);
	}
};

Exists_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExists_predicate(this);
	}
};

Exists_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExists_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Exists_predicateContext = Exists_predicateContext;

SQLParser.prototype.exists_predicate = function() {

    var localctx = new Exists_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, SQLParser.RULE_exists_predicate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1609;
        _la = this._input.LA(1);
        if(_la===SQLParser.NOT) {
            this.state = 1608;
            this.match(SQLParser.NOT);
        }

        this.state = 1611;
        this.match(SQLParser.EXISTS);
        this.state = 1612;
        localctx.s = this.table_subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unique_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_unique_predicate;
    this.s = null; // Table_subqueryContext
    return this;
}

Unique_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unique_predicateContext.prototype.constructor = Unique_predicateContext;

Unique_predicateContext.prototype.UNIQUE = function() {
    return this.getToken(SQLParser.UNIQUE, 0);
};

Unique_predicateContext.prototype.table_subquery = function() {
    return this.getTypedRuleContext(Table_subqueryContext,0);
};

Unique_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUnique_predicate(this);
	}
};

Unique_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUnique_predicate(this);
	}
};

Unique_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitUnique_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Unique_predicateContext = Unique_predicateContext;

SQLParser.prototype.unique_predicate = function() {

    var localctx = new Unique_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, SQLParser.RULE_unique_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1614;
        this.match(SQLParser.UNIQUE);
        this.state = 1615;
        localctx.s = this.table_subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Primary_datetime_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_primary_datetime_field;
    return this;
}

Primary_datetime_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_datetime_fieldContext.prototype.constructor = Primary_datetime_fieldContext;

Primary_datetime_fieldContext.prototype.non_second_primary_datetime_field = function() {
    return this.getTypedRuleContext(Non_second_primary_datetime_fieldContext,0);
};

Primary_datetime_fieldContext.prototype.SECOND = function() {
    return this.getToken(SQLParser.SECOND, 0);
};

Primary_datetime_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPrimary_datetime_field(this);
	}
};

Primary_datetime_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPrimary_datetime_field(this);
	}
};

Primary_datetime_fieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPrimary_datetime_field(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Primary_datetime_fieldContext = Primary_datetime_fieldContext;

SQLParser.prototype.primary_datetime_field = function() {

    var localctx = new Primary_datetime_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, SQLParser.RULE_primary_datetime_field);
    try {
        this.state = 1619;
        switch(this._input.LA(1)) {
        case SQLParser.DAY:
        case SQLParser.HOUR:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.YEAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 1617;
            this.non_second_primary_datetime_field();
            break;
        case SQLParser.SECOND:
            this.enterOuterAlt(localctx, 2);
            this.state = 1618;
            this.match(SQLParser.SECOND);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_second_primary_datetime_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_non_second_primary_datetime_field;
    return this;
}

Non_second_primary_datetime_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_second_primary_datetime_fieldContext.prototype.constructor = Non_second_primary_datetime_fieldContext;

Non_second_primary_datetime_fieldContext.prototype.YEAR = function() {
    return this.getToken(SQLParser.YEAR, 0);
};

Non_second_primary_datetime_fieldContext.prototype.MONTH = function() {
    return this.getToken(SQLParser.MONTH, 0);
};

Non_second_primary_datetime_fieldContext.prototype.DAY = function() {
    return this.getToken(SQLParser.DAY, 0);
};

Non_second_primary_datetime_fieldContext.prototype.HOUR = function() {
    return this.getToken(SQLParser.HOUR, 0);
};

Non_second_primary_datetime_fieldContext.prototype.MINUTE = function() {
    return this.getToken(SQLParser.MINUTE, 0);
};

Non_second_primary_datetime_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNon_second_primary_datetime_field(this);
	}
};

Non_second_primary_datetime_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNon_second_primary_datetime_field(this);
	}
};

Non_second_primary_datetime_fieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNon_second_primary_datetime_field(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Non_second_primary_datetime_fieldContext = Non_second_primary_datetime_fieldContext;

SQLParser.prototype.non_second_primary_datetime_field = function() {

    var localctx = new Non_second_primary_datetime_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, SQLParser.RULE_non_second_primary_datetime_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1621;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.DAY || _la===SQLParser.HOUR || _la===SQLParser.MINUTE || _la===SQLParser.MONTH || _la===SQLParser.YEAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extended_datetime_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_extended_datetime_field;
    return this;
}

Extended_datetime_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extended_datetime_fieldContext.prototype.constructor = Extended_datetime_fieldContext;

Extended_datetime_fieldContext.prototype.CENTURY = function() {
    return this.getToken(SQLParser.CENTURY, 0);
};

Extended_datetime_fieldContext.prototype.DECADE = function() {
    return this.getToken(SQLParser.DECADE, 0);
};

Extended_datetime_fieldContext.prototype.DOW = function() {
    return this.getToken(SQLParser.DOW, 0);
};

Extended_datetime_fieldContext.prototype.DOY = function() {
    return this.getToken(SQLParser.DOY, 0);
};

Extended_datetime_fieldContext.prototype.EPOCH = function() {
    return this.getToken(SQLParser.EPOCH, 0);
};

Extended_datetime_fieldContext.prototype.ISODOW = function() {
    return this.getToken(SQLParser.ISODOW, 0);
};

Extended_datetime_fieldContext.prototype.ISOYEAR = function() {
    return this.getToken(SQLParser.ISOYEAR, 0);
};

Extended_datetime_fieldContext.prototype.MICROSECONDS = function() {
    return this.getToken(SQLParser.MICROSECONDS, 0);
};

Extended_datetime_fieldContext.prototype.MILLENNIUM = function() {
    return this.getToken(SQLParser.MILLENNIUM, 0);
};

Extended_datetime_fieldContext.prototype.MILLISECONDS = function() {
    return this.getToken(SQLParser.MILLISECONDS, 0);
};

Extended_datetime_fieldContext.prototype.QUARTER = function() {
    return this.getToken(SQLParser.QUARTER, 0);
};

Extended_datetime_fieldContext.prototype.WEEK = function() {
    return this.getToken(SQLParser.WEEK, 0);
};

Extended_datetime_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExtended_datetime_field(this);
	}
};

Extended_datetime_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExtended_datetime_field(this);
	}
};

Extended_datetime_fieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExtended_datetime_field(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Extended_datetime_fieldContext = Extended_datetime_fieldContext;

SQLParser.prototype.extended_datetime_field = function() {

    var localctx = new Extended_datetime_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, SQLParser.RULE_extended_datetime_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1623;
        _la = this._input.LA(1);
        if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (SQLParser.CENTURY - 57)) | (1 << (SQLParser.DECADE - 57)) | (1 << (SQLParser.DOW - 57)) | (1 << (SQLParser.DOY - 57)) | (1 << (SQLParser.EPOCH - 57)) | (1 << (SQLParser.ISODOW - 57)) | (1 << (SQLParser.ISOYEAR - 57)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SQLParser.MICROSECONDS - 93)) | (1 << (SQLParser.MILLENNIUM - 93)) | (1 << (SQLParser.MILLISECONDS - 93)) | (1 << (SQLParser.QUARTER - 93)))) !== 0) || _la===SQLParser.WEEK)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Routine_invocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_routine_invocation;
    return this;
}

Routine_invocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Routine_invocationContext.prototype.constructor = Routine_invocationContext;

Routine_invocationContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Routine_invocationContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Routine_invocationContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Routine_invocationContext.prototype.sql_argument_list = function() {
    return this.getTypedRuleContext(Sql_argument_listContext,0);
};

Routine_invocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRoutine_invocation(this);
	}
};

Routine_invocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRoutine_invocation(this);
	}
};

Routine_invocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRoutine_invocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Routine_invocationContext = Routine_invocationContext;

SQLParser.prototype.routine_invocation = function() {

    var localctx = new Routine_invocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, SQLParser.RULE_routine_invocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1625;
        this.function_name();
        this.state = 1626;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1628;
        _la = this._input.LA(1);
        if(((((_la - 4)) & ~0x1f) == 0 && ((1 << (_la - 4)) & ((1 << (SQLParser.ANY - 4)) | (1 << (SQLParser.CASE - 4)) | (1 << (SQLParser.CAST - 4)) | (1 << (SQLParser.FALSE - 4)) | (1 << (SQLParser.LEFT - 4)) | (1 << (SQLParser.NOT - 4)) | (1 << (SQLParser.NULL - 4)))) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (SQLParser.RIGHT - 40)) | (1 << (SQLParser.SOME - 40)) | (1 << (SQLParser.TRUE - 40)) | (1 << (SQLParser.AVG - 40)) | (1 << (SQLParser.BETWEEN - 40)) | (1 << (SQLParser.BY - 40)) | (1 << (SQLParser.CENTURY - 40)) | (1 << (SQLParser.CHARACTER - 40)) | (1 << (SQLParser.COLLECT - 40)) | (1 << (SQLParser.COALESCE - 40)) | (1 << (SQLParser.COLUMN - 40)) | (1 << (SQLParser.COUNT - 40)) | (1 << (SQLParser.CUBE - 40)) | (1 << (SQLParser.DAY - 40)) | (1 << (SQLParser.DEC - 40)) | (1 << (SQLParser.DECADE - 40)) | (1 << (SQLParser.DOW - 40)) | (1 << (SQLParser.DOY - 40)) | (1 << (SQLParser.DROP - 40)) | (1 << (SQLParser.EPOCH - 40)) | (1 << (SQLParser.EVERY - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (SQLParser.EXISTS - 72)) | (1 << (SQLParser.EXTERNAL - 72)) | (1 << (SQLParser.EXTRACT - 72)) | (1 << (SQLParser.FILTER - 72)) | (1 << (SQLParser.FIRST - 72)) | (1 << (SQLParser.FORMAT - 72)) | (1 << (SQLParser.FUSION - 72)) | (1 << (SQLParser.GROUPING - 72)) | (1 << (SQLParser.HASH - 72)) | (1 << (SQLParser.INDEX - 72)) | (1 << (SQLParser.INSERT - 72)) | (1 << (SQLParser.INTERSECTION - 72)) | (1 << (SQLParser.ISODOW - 72)) | (1 << (SQLParser.ISOYEAR - 72)) | (1 << (SQLParser.LAST - 72)) | (1 << (SQLParser.LESS - 72)) | (1 << (SQLParser.LIST - 72)) | (1 << (SQLParser.LOCATION - 72)) | (1 << (SQLParser.MAX - 72)) | (1 << (SQLParser.MAXVALUE - 72)) | (1 << (SQLParser.MICROSECONDS - 72)) | (1 << (SQLParser.MILLENNIUM - 72)) | (1 << (SQLParser.MILLISECONDS - 72)) | (1 << (SQLParser.MIN - 72)) | (1 << (SQLParser.MINUTE - 72)) | (1 << (SQLParser.MONTH - 72)) | (1 << (SQLParser.NATIONAL - 72)) | (1 << (SQLParser.NULLIF - 72)) | (1 << (SQLParser.OVERWRITE - 72)) | (1 << (SQLParser.PARTITION - 72)) | (1 << (SQLParser.PARTITIONS - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (SQLParser.PRECISION - 104)) | (1 << (SQLParser.PURGE - 104)) | (1 << (SQLParser.QUARTER - 104)) | (1 << (SQLParser.RANGE - 104)) | (1 << (SQLParser.REGEXP - 104)) | (1 << (SQLParser.RLIKE - 104)) | (1 << (SQLParser.ROLLUP - 104)) | (1 << (SQLParser.SECOND - 104)) | (1 << (SQLParser.SET - 104)) | (1 << (SQLParser.SIMILAR - 104)) | (1 << (SQLParser.STDDEV_POP - 104)) | (1 << (SQLParser.STDDEV_SAMP - 104)) | (1 << (SQLParser.SUBPARTITION - 104)) | (1 << (SQLParser.SUM - 104)) | (1 << (SQLParser.TABLESPACE - 104)) | (1 << (SQLParser.THAN - 104)) | (1 << (SQLParser.TIMEZONE - 104)) | (1 << (SQLParser.TIMEZONE_HOUR - 104)) | (1 << (SQLParser.TIMEZONE_MINUTE - 104)) | (1 << (SQLParser.TRIM - 104)) | (1 << (SQLParser.TO - 104)) | (1 << (SQLParser.UNKNOWN - 104)) | (1 << (SQLParser.VALUES - 104)) | (1 << (SQLParser.VAR_SAMP - 104)) | (1 << (SQLParser.VAR_POP - 104)) | (1 << (SQLParser.VARYING - 104)) | (1 << (SQLParser.WEEK - 104)) | (1 << (SQLParser.YEAR - 104)) | (1 << (SQLParser.ZONE - 104)) | (1 << (SQLParser.BOOLEAN - 104)) | (1 << (SQLParser.BOOL - 104)) | (1 << (SQLParser.BIT - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (SQLParser.VARBIT - 136)) | (1 << (SQLParser.INT1 - 136)) | (1 << (SQLParser.INT2 - 136)) | (1 << (SQLParser.INT4 - 136)) | (1 << (SQLParser.INT8 - 136)) | (1 << (SQLParser.TINYINT - 136)) | (1 << (SQLParser.SMALLINT - 136)) | (1 << (SQLParser.INT - 136)) | (1 << (SQLParser.INTEGER - 136)) | (1 << (SQLParser.BIGINT - 136)) | (1 << (SQLParser.FLOAT4 - 136)) | (1 << (SQLParser.FLOAT8 - 136)) | (1 << (SQLParser.REAL - 136)) | (1 << (SQLParser.FLOAT - 136)) | (1 << (SQLParser.DOUBLE - 136)) | (1 << (SQLParser.NUMERIC - 136)) | (1 << (SQLParser.DECIMAL - 136)) | (1 << (SQLParser.CHAR - 136)) | (1 << (SQLParser.VARCHAR - 136)) | (1 << (SQLParser.NCHAR - 136)) | (1 << (SQLParser.NVARCHAR - 136)) | (1 << (SQLParser.DATE - 136)) | (1 << (SQLParser.TIME - 136)) | (1 << (SQLParser.TIMETZ - 136)) | (1 << (SQLParser.TIMESTAMP - 136)) | (1 << (SQLParser.TIMESTAMPTZ - 136)) | (1 << (SQLParser.TEXT - 136)) | (1 << (SQLParser.VARBINARY - 136)) | (1 << (SQLParser.BLOB - 136)) | (1 << (SQLParser.BYTEA - 136)) | (1 << (SQLParser.INET4 - 136)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (SQLParser.LEFT_PAREN - 184)) | (1 << (SQLParser.PLUS - 184)) | (1 << (SQLParser.MINUS - 184)) | (1 << (SQLParser.NUMBER - 184)) | (1 << (SQLParser.REAL_NUMBER - 184)) | (1 << (SQLParser.Identifier - 184)) | (1 << (SQLParser.Character_String_Literal - 184)))) !== 0)) {
            this.state = 1627;
            this.sql_argument_list();
        }

        this.state = 1630;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_names_for_reserved_wordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_function_names_for_reserved_words;
    return this;
}

Function_names_for_reserved_wordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_names_for_reserved_wordsContext.prototype.constructor = Function_names_for_reserved_wordsContext;

Function_names_for_reserved_wordsContext.prototype.LEFT = function() {
    return this.getToken(SQLParser.LEFT, 0);
};

Function_names_for_reserved_wordsContext.prototype.RIGHT = function() {
    return this.getToken(SQLParser.RIGHT, 0);
};

Function_names_for_reserved_wordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFunction_names_for_reserved_words(this);
	}
};

Function_names_for_reserved_wordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFunction_names_for_reserved_words(this);
	}
};

Function_names_for_reserved_wordsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitFunction_names_for_reserved_words(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Function_names_for_reserved_wordsContext = Function_names_for_reserved_wordsContext;

SQLParser.prototype.function_names_for_reserved_words = function() {

    var localctx = new Function_names_for_reserved_wordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, SQLParser.RULE_function_names_for_reserved_words);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1632;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.LEFT || _la===SQLParser.RIGHT)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Function_nameContext.prototype.function_names_for_reserved_words = function() {
    return this.getTypedRuleContext(Function_names_for_reserved_wordsContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFunction_name(this);
	}
};

Function_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitFunction_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Function_nameContext = Function_nameContext;

SQLParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, SQLParser.RULE_function_name);
    try {
        this.state = 1636;
        switch(this._input.LA(1)) {
        case SQLParser.AVG:
        case SQLParser.BETWEEN:
        case SQLParser.BY:
        case SQLParser.CENTURY:
        case SQLParser.CHARACTER:
        case SQLParser.COLLECT:
        case SQLParser.COALESCE:
        case SQLParser.COLUMN:
        case SQLParser.COUNT:
        case SQLParser.CUBE:
        case SQLParser.DAY:
        case SQLParser.DEC:
        case SQLParser.DECADE:
        case SQLParser.DOW:
        case SQLParser.DOY:
        case SQLParser.DROP:
        case SQLParser.EPOCH:
        case SQLParser.EVERY:
        case SQLParser.EXISTS:
        case SQLParser.EXTERNAL:
        case SQLParser.EXTRACT:
        case SQLParser.FILTER:
        case SQLParser.FIRST:
        case SQLParser.FORMAT:
        case SQLParser.FUSION:
        case SQLParser.GROUPING:
        case SQLParser.HASH:
        case SQLParser.INDEX:
        case SQLParser.INSERT:
        case SQLParser.INTERSECTION:
        case SQLParser.ISODOW:
        case SQLParser.ISOYEAR:
        case SQLParser.LAST:
        case SQLParser.LESS:
        case SQLParser.LIST:
        case SQLParser.LOCATION:
        case SQLParser.MAX:
        case SQLParser.MAXVALUE:
        case SQLParser.MICROSECONDS:
        case SQLParser.MILLENNIUM:
        case SQLParser.MILLISECONDS:
        case SQLParser.MIN:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.NATIONAL:
        case SQLParser.NULLIF:
        case SQLParser.OVERWRITE:
        case SQLParser.PARTITION:
        case SQLParser.PARTITIONS:
        case SQLParser.PRECISION:
        case SQLParser.PURGE:
        case SQLParser.QUARTER:
        case SQLParser.RANGE:
        case SQLParser.REGEXP:
        case SQLParser.RLIKE:
        case SQLParser.ROLLUP:
        case SQLParser.SECOND:
        case SQLParser.SET:
        case SQLParser.SIMILAR:
        case SQLParser.STDDEV_POP:
        case SQLParser.STDDEV_SAMP:
        case SQLParser.SUBPARTITION:
        case SQLParser.SUM:
        case SQLParser.TABLESPACE:
        case SQLParser.THAN:
        case SQLParser.TIMEZONE:
        case SQLParser.TIMEZONE_HOUR:
        case SQLParser.TIMEZONE_MINUTE:
        case SQLParser.TRIM:
        case SQLParser.TO:
        case SQLParser.UNKNOWN:
        case SQLParser.VALUES:
        case SQLParser.VAR_SAMP:
        case SQLParser.VAR_POP:
        case SQLParser.VARYING:
        case SQLParser.WEEK:
        case SQLParser.YEAR:
        case SQLParser.ZONE:
        case SQLParser.BOOLEAN:
        case SQLParser.BOOL:
        case SQLParser.BIT:
        case SQLParser.VARBIT:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
        case SQLParser.CHAR:
        case SQLParser.VARCHAR:
        case SQLParser.NCHAR:
        case SQLParser.NVARCHAR:
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMETZ:
        case SQLParser.TIMESTAMP:
        case SQLParser.TIMESTAMPTZ:
        case SQLParser.TEXT:
        case SQLParser.VARBINARY:
        case SQLParser.BLOB:
        case SQLParser.BYTEA:
        case SQLParser.INET4:
        case SQLParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1634;
            this.identifier();
            break;
        case SQLParser.LEFT:
        case SQLParser.RIGHT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1635;
            this.function_names_for_reserved_words();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sql_argument_list;
    return this;
}

Sql_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_argument_listContext.prototype.constructor = Sql_argument_listContext;

Sql_argument_listContext.prototype.value_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_expressionContext);
    } else {
        return this.getTypedRuleContext(Value_expressionContext,i);
    }
};

Sql_argument_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Sql_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSql_argument_list(this);
	}
};

Sql_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSql_argument_list(this);
	}
};

Sql_argument_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSql_argument_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Sql_argument_listContext = Sql_argument_listContext;

SQLParser.prototype.sql_argument_list = function() {

    var localctx = new Sql_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, SQLParser.RULE_sql_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1638;
        this.value_expression();
        this.state = 1643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1639;
            this.match(SQLParser.COMMA);
            this.state = 1640;
            this.value_expression();
            this.state = 1645;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Orderby_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_orderby_clause;
    return this;
}

Orderby_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Orderby_clauseContext.prototype.constructor = Orderby_clauseContext;

Orderby_clauseContext.prototype.ORDER = function() {
    return this.getToken(SQLParser.ORDER, 0);
};

Orderby_clauseContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Orderby_clauseContext.prototype.sort_specifier_list = function() {
    return this.getTypedRuleContext(Sort_specifier_listContext,0);
};

Orderby_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOrderby_clause(this);
	}
};

Orderby_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOrderby_clause(this);
	}
};

Orderby_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOrderby_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Orderby_clauseContext = Orderby_clauseContext;

SQLParser.prototype.orderby_clause = function() {

    var localctx = new Orderby_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, SQLParser.RULE_orderby_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1646;
        this.match(SQLParser.ORDER);
        this.state = 1647;
        this.match(SQLParser.BY);
        this.state = 1648;
        this.sort_specifier_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sort_specifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sort_specifier_list;
    return this;
}

Sort_specifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sort_specifier_listContext.prototype.constructor = Sort_specifier_listContext;

Sort_specifier_listContext.prototype.sort_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sort_specifierContext);
    } else {
        return this.getTypedRuleContext(Sort_specifierContext,i);
    }
};

Sort_specifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Sort_specifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSort_specifier_list(this);
	}
};

Sort_specifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSort_specifier_list(this);
	}
};

Sort_specifier_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSort_specifier_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Sort_specifier_listContext = Sort_specifier_listContext;

SQLParser.prototype.sort_specifier_list = function() {

    var localctx = new Sort_specifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, SQLParser.RULE_sort_specifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1650;
        this.sort_specifier();
        this.state = 1655;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1651;
            this.match(SQLParser.COMMA);
            this.state = 1652;
            this.sort_specifier();
            this.state = 1657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sort_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sort_specifier;
    this.key = null; // Row_value_predicandContext
    this.order = null; // Order_specificationContext
    this.null_order = null; // Null_orderingContext
    return this;
}

Sort_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sort_specifierContext.prototype.constructor = Sort_specifierContext;

Sort_specifierContext.prototype.row_value_predicand = function() {
    return this.getTypedRuleContext(Row_value_predicandContext,0);
};

Sort_specifierContext.prototype.order_specification = function() {
    return this.getTypedRuleContext(Order_specificationContext,0);
};

Sort_specifierContext.prototype.null_ordering = function() {
    return this.getTypedRuleContext(Null_orderingContext,0);
};

Sort_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSort_specifier(this);
	}
};

Sort_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSort_specifier(this);
	}
};

Sort_specifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSort_specifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Sort_specifierContext = Sort_specifierContext;

SQLParser.prototype.sort_specifier = function() {

    var localctx = new Sort_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, SQLParser.RULE_sort_specifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1658;
        localctx.key = this.row_value_predicand();
        this.state = 1660;
        _la = this._input.LA(1);
        if(_la===SQLParser.ASC || _la===SQLParser.DESC) {
            this.state = 1659;
            localctx.order = this.order_specification();
        }

        this.state = 1663;
        _la = this._input.LA(1);
        if(_la===SQLParser.NULL) {
            this.state = 1662;
            localctx.null_order = this.null_ordering();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_order_specification;
    return this;
}

Order_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_specificationContext.prototype.constructor = Order_specificationContext;

Order_specificationContext.prototype.ASC = function() {
    return this.getToken(SQLParser.ASC, 0);
};

Order_specificationContext.prototype.DESC = function() {
    return this.getToken(SQLParser.DESC, 0);
};

Order_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOrder_specification(this);
	}
};

Order_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOrder_specification(this);
	}
};

Order_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOrder_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Order_specificationContext = Order_specificationContext;

SQLParser.prototype.order_specification = function() {

    var localctx = new Order_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, SQLParser.RULE_order_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1665;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.ASC || _la===SQLParser.DESC)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Limit_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_limit_clause;
    this.e = null; // Numeric_value_expressionContext
    return this;
}

Limit_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Limit_clauseContext.prototype.constructor = Limit_clauseContext;

Limit_clauseContext.prototype.LIMIT = function() {
    return this.getToken(SQLParser.LIMIT, 0);
};

Limit_clauseContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

Limit_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterLimit_clause(this);
	}
};

Limit_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitLimit_clause(this);
	}
};

Limit_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitLimit_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Limit_clauseContext = Limit_clauseContext;

SQLParser.prototype.limit_clause = function() {

    var localctx = new Limit_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, SQLParser.RULE_limit_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1667;
        this.match(SQLParser.LIMIT);
        this.state = 1668;
        localctx.e = this.numeric_value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_orderingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_null_ordering;
    return this;
}

Null_orderingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_orderingContext.prototype.constructor = Null_orderingContext;

Null_orderingContext.prototype.NULL = function() {
    return this.getToken(SQLParser.NULL, 0);
};

Null_orderingContext.prototype.FIRST = function() {
    return this.getToken(SQLParser.FIRST, 0);
};

Null_orderingContext.prototype.LAST = function() {
    return this.getToken(SQLParser.LAST, 0);
};

Null_orderingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNull_ordering(this);
	}
};

Null_orderingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNull_ordering(this);
	}
};

Null_orderingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNull_ordering(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Null_orderingContext = Null_orderingContext;

SQLParser.prototype.null_ordering = function() {

    var localctx = new Null_orderingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, SQLParser.RULE_null_ordering);
    try {
        this.state = 1674;
        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1670;
            this.match(SQLParser.NULL);
            this.state = 1671;
            this.match(SQLParser.FIRST);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1672;
            this.match(SQLParser.NULL);
            this.state = 1673;
            this.match(SQLParser.LAST);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_insert_statement;
    this.path = null; // Token
    this.file_type = null; // IdentifierContext
    return this;
}

Insert_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_statementContext.prototype.constructor = Insert_statementContext;

Insert_statementContext.prototype.INSERT = function() {
    return this.getToken(SQLParser.INSERT, 0);
};

Insert_statementContext.prototype.INTO = function() {
    return this.getToken(SQLParser.INTO, 0);
};

Insert_statementContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Insert_statementContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Insert_statementContext.prototype.OVERWRITE = function() {
    return this.getToken(SQLParser.OVERWRITE, 0);
};

Insert_statementContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Insert_statementContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Insert_statementContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Insert_statementContext.prototype.LOCATION = function() {
    return this.getToken(SQLParser.LOCATION, 0);
};

Insert_statementContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Insert_statementContext.prototype.USING = function() {
    return this.getToken(SQLParser.USING, 0);
};

Insert_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Insert_statementContext.prototype.param_clause = function() {
    return this.getTypedRuleContext(Param_clauseContext,0);
};

Insert_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterInsert_statement(this);
	}
};

Insert_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitInsert_statement(this);
	}
};

Insert_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitInsert_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Insert_statementContext = Insert_statementContext;

SQLParser.prototype.insert_statement = function() {

    var localctx = new Insert_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, SQLParser.RULE_insert_statement);
    var _la = 0; // Token type
    try {
        this.state = 1705;
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1676;
            this.match(SQLParser.INSERT);
            this.state = 1678;
            _la = this._input.LA(1);
            if(_la===SQLParser.OVERWRITE) {
                this.state = 1677;
                this.match(SQLParser.OVERWRITE);
            }

            this.state = 1680;
            this.match(SQLParser.INTO);
            this.state = 1681;
            this.table_name();
            this.state = 1686;
            var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
            if(la_===1) {
                this.state = 1682;
                this.match(SQLParser.LEFT_PAREN);
                this.state = 1683;
                this.column_name_list();
                this.state = 1684;
                this.match(SQLParser.RIGHT_PAREN);

            }
            this.state = 1688;
            this.query_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1690;
            this.match(SQLParser.INSERT);
            this.state = 1692;
            _la = this._input.LA(1);
            if(_la===SQLParser.OVERWRITE) {
                this.state = 1691;
                this.match(SQLParser.OVERWRITE);
            }

            this.state = 1694;
            this.match(SQLParser.INTO);
            this.state = 1695;
            this.match(SQLParser.LOCATION);
            this.state = 1696;
            localctx.path = this.match(SQLParser.Character_String_Literal);
            this.state = 1702;
            _la = this._input.LA(1);
            if(_la===SQLParser.USING) {
                this.state = 1697;
                this.match(SQLParser.USING);
                this.state = 1698;
                localctx.file_type = this.identifier();
                this.state = 1700;
                _la = this._input.LA(1);
                if(_la===SQLParser.WITH) {
                    this.state = 1699;
                    this.param_clause();
                }

            }

            this.state = 1704;
            this.query_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

return SQLParser;

};