(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
// Generated from grammars/sql/SQLLexer.g4 by ANTLR 4.5.1
// jshint ignore: start

module.exports = function (antlr4) {

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0002\u00ce\u074a\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
    "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
    "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
    "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
    "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
    "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
    "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
    "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
    "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
    "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
    "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
    "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
    "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
    "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
    "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
    "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
    "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
    "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
    "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
    "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
    "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003",
    "\t\u0003\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010",
    "\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0019",
    "\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(",
    "\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00032\u00032\u00032\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00035\u00035\u00035\u00035\u00035\u00036\u00036\u0003",
    "6\u00037\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003",
    "=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003S\u0003S\u0003S\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003[\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003",
    "^\u0003_\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003h\u0003",
    "h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003i\u0003i\u0003i\u0003i\u0003",
    "i\u0003i\u0003i\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003",
    "j\u0003j\u0003k\u0003k\u0003k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003o\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0003p\u0003p\u0003q\u0003q\u0003q\u0003q\u0003q\u0003",
    "q\u0003q\u0003q\u0003r\u0003r\u0003r\u0003r\u0003r\u0003s\u0003s\u0003",
    "s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003t\u0003t\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003v\u0003v\u0003v\u0003",
    "v\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003",
    "x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003",
    "x\u0003x\u0003x\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003{\u0003{\u0003{\u0003",
    "{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003}\u0003}\u0003",
    "}\u0003}\u0003}\u0003}\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003",
    "~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0086\u0003\u0086\u0003",
    "\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008c\u0003",
    "\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003",
    "\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003",
    "\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003",
    "\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0091\u0003",
    "\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003",
    "\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0097\u0003",
    "\u0097\u0003\u0097\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003",
    "\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009c\u0003\u009c\u0003",
    "\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003",
    "\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003",
    "\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003",
    "\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003",
    "\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003",
    "\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003",
    "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ad\u0003",
    "\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003",
    "\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003",
    "\u00ae\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003",
    "\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003",
    "\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003",
    "\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003\u00b5\u0003",
    "\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003",
    "\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003",
    "\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0003",
    "\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00ca\u0003",
    "\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cd\u0003",
    "\u00cd\u0003\u00cd\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003",
    "\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u069b\n\u00ce",
    "\u0003\u00cf\u0003\u00cf\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d5\u0003\u00d5\u0003\u00d6\u0003\u00d6",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d9\u0003\u00d9",
    "\u0003\u00da\u0003\u00da\u0003\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc",
    "\u0003\u00dd\u0003\u00dd\u0003\u00de\u0003\u00de\u0003\u00df\u0006\u00df",
    "\u06c0\n\u00df\r\u00df\u000e\u00df\u06c1\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e1\u0006\u00e1\u06c7\n\u00e1\r\u00e1\u000e\u00e1\u06c8\u0003\u00e1",
    "\u0003\u00e1\u0007\u00e1\u06cd\n\u00e1\f\u00e1\u000e\u00e1\u06d0\u000b",
    "\u00e1\u0003\u00e1\u0005\u00e1\u06d3\n\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0006\u00e1\u06d7\n\u00e1\r\u00e1\u000e\u00e1\u06d8\u0003\u00e1\u0005",
    "\u00e1\u06dc\n\u00e1\u0003\u00e1\u0006\u00e1\u06df\n\u00e1\r\u00e1\u000e",
    "\u00e1\u06e0\u0003\u00e1\u0005\u00e1\u06e4\n\u00e1\u0003\u00e2\u0003",
    "\u00e2\u0003\u00e2\u0003\u00e2\u0007\u00e2\u06ea\n\u00e2\f\u00e2\u000e",
    "\u00e2\u06ed\u000b\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0007\u00e3",
    "\u06f8\n\u00e3\f\u00e3\u000e\u00e3\u06fb\u000b\u00e3\u0003\u00e3\u0003",
    "\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003",
    "\u00e5\u0007\u00e5\u0705\n\u00e5\f\u00e5\u000e\u00e5\u0708\u000b\u00e5",
    "\u0003\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0007\u00e8\u0711\n\u00e8\f\u00e8\u000e\u00e8\u0714\u000b",
    "\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e9\u0003\u00e9\u0005\u00e9\u071a",
    "\n\u00e9\u0003\u00e9\u0006\u00e9\u071d\n\u00e9\r\u00e9\u000e\u00e9\u071e",
    "\u0003\u00ea\u0003\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb",
    "\u0005\u00eb\u0727\n\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003",
    "\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0005",
    "\u00ec\u0732\n\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee",
    "\u0003\u00ee\u0003\u00ef\u0003\u00ef\u0006\u00ef\u0741\n\u00ef\r\u00ef",
    "\u000e\u00ef\u0742\u0003\u00ef\u0003\u00ef\u0003\u00f0\u0003\u00f0\u0003",
    "\u00f0\u0003\u00f0\u0003\u06eb\u0002\u00f1\u0003\u0002\u0005\u0002\u0007",
    "\u0002\t\u0002\u000b\u0002\r\u0002\u000f\u0002\u0011\u0002\u0013\u0002",
    "\u0015\u0002\u0017\u0002\u0019\u0002\u001b\u0002\u001d\u0002\u001f\u0002",
    "!\u0002#\u0002%\u0002\'\u0002)\u0002+\u0002-\u0002/\u00021\u00023\u0002",
    "5\u00027\u00039\u0004;\u0005=\u0006?\u0007A\bC\tE\nG\u000bI\fK\rM\u000e",
    "O\u000fQ\u0010S\u0011U\u0012W\u0013Y\u0014[\u0015]\u0016_\u0017a\u0018",
    "c\u0019e\u001ag\u001bi\u001ck\u001dm\u001eo\u001fq s!u\"w#y${%}&\u007f",
    "\'\u0081(\u0083)\u0085*\u0087+\u0089,\u008b-\u008d.\u008f/\u00910\u0093",
    "1\u00952\u00973\u00994\u009b5\u009d6\u009f7\u00a18\u00a39\u00a5:\u00a7",
    ";\u00a9<\u00ab=\u00ad>\u00af?\u00b1@\u00b3A\u00b5B\u00b7C\u00b9D\u00bb",
    "E\u00bdF\u00bfG\u00c1H\u00c3I\u00c5J\u00c7K\u00c9L\u00cbM\u00cdN\u00cf",
    "O\u00d1P\u00d3Q\u00d5R\u00d7S\u00d9T\u00dbU\u00ddV\u00dfW\u00e1X\u00e3",
    "Y\u00e5Z\u00e7[\u00e9\\\u00eb]\u00ed^\u00ef_\u00f1`\u00f3a\u00f5b\u00f7",
    "c\u00f9d\u00fbe\u00fdf\u00ffg\u0101h\u0103i\u0105j\u0107k\u0109l\u010b",
    "m\u010dn\u010fo\u0111p\u0113q\u0115r\u0117s\u0119t\u011bu\u011dv\u011f",
    "w\u0121x\u0123y\u0125z\u0127{\u0129|\u012b}\u012d~\u012f\u007f\u0131",
    "\u0080\u0133\u0081\u0135\u0082\u0137\u0083\u0139\u0084\u013b\u0085\u013d",
    "\u0086\u013f\u0087\u0141\u0088\u0143\u0089\u0145\u008a\u0147\u008b\u0149",
    "\u008c\u014b\u008d\u014d\u008e\u014f\u008f\u0151\u0090\u0153\u0091\u0155",
    "\u0092\u0157\u0093\u0159\u0094\u015b\u0095\u015d\u0096\u015f\u0097\u0161",
    "\u0098\u0163\u0099\u0165\u009a\u0167\u009b\u0169\u009c\u016b\u009d\u016d",
    "\u009e\u016f\u009f\u0171\u00a0\u0173\u00a1\u0175\u00a2\u0177\u00a3\u0179",
    "\u00a4\u017b\u00a5\u017d\u00a6\u017f\u00a7\u0181\u00a8\u0183\u00a9\u0185",
    "\u00aa\u0187\u00ab\u0189\u00ac\u018b\u00ad\u018d\u00ae\u018f\u00af\u0191",
    "\u00b0\u0193\u00b1\u0195\u00b2\u0197\u00b3\u0199\u00b4\u019b\u00b5\u019d",
    "\u00b6\u019f\u00b7\u01a1\u00b8\u01a3\u00b9\u01a5\u00ba\u01a7\u00bb\u01a9",
    "\u00bc\u01ab\u00bd\u01ad\u00be\u01af\u00bf\u01b1\u00c0\u01b3\u00c1\u01b5",
    "\u00c2\u01b7\u00c3\u01b9\u00c4\u01bb\u00c5\u01bd\u00c6\u01bf\u0002\u01c1",
    "\u00c7\u01c3\u00c8\u01c5\u00c9\u01c7\u00ca\u01c9\u0002\u01cb\u0002\u01cd",
    "\u0002\u01cf\u00cb\u01d1\u0002\u01d3\u0002\u01d5\u0002\u01d7\u0002\u01d9",
    "\u0002\u01db\u00cc\u01dd\u00cd\u01df\u00ce\u0003\u0002#\u0004\u0002",
    "CCcc\u0004\u0002DDdd\u0004\u0002EEee\u0004\u0002FFff\u0004\u0002GGg",
    "g\u0004\u0002HHhh\u0004\u0002IIii\u0004\u0002JJjj\u0004\u0002KKkk\u0004",
    "\u0002LLll\u0004\u0002MMmm\u0004\u0002NNnn\u0004\u0002OOoo\u0004\u0002",
    "PPpp\u0004\u0002QQqq\u0004\u0002RRrr\u0004\u0002SSss\u0004\u0002TTt",
    "t\u0004\u0002UUuu\u0004\u0002VVvv\u0004\u0002WWww\u0004\u0002XXxx\u0004",
    "\u0002YYyy\u0004\u0002ZZzz\u0004\u0002[[{{\u0004\u0002\\\\||\u0004\u0002",
    "\f\f\u000f\u000f\u0005\u0002C\\aac|\u0004\u0002C\\c|\u0004\u0002))^",
    "^\u0004\u0002--//\u0005\u00022;CHch\n\u0002$$))^^ddhhppttvv\u0741\u0002",
    "7\u0003\u0002\u0002\u0002\u00029\u0003\u0002\u0002\u0002\u0002;\u0003",
    "\u0002\u0002\u0002\u0002=\u0003\u0002\u0002\u0002\u0002?\u0003\u0002",
    "\u0002\u0002\u0002A\u0003\u0002\u0002\u0002\u0002C\u0003\u0002\u0002",
    "\u0002\u0002E\u0003\u0002\u0002\u0002\u0002G\u0003\u0002\u0002\u0002",
    "\u0002I\u0003\u0002\u0002\u0002\u0002K\u0003\u0002\u0002\u0002\u0002",
    "M\u0003\u0002\u0002\u0002\u0002O\u0003\u0002\u0002\u0002\u0002Q\u0003",
    "\u0002\u0002\u0002\u0002S\u0003\u0002\u0002\u0002\u0002U\u0003\u0002",
    "\u0002\u0002\u0002W\u0003\u0002\u0002\u0002\u0002Y\u0003\u0002\u0002",
    "\u0002\u0002[\u0003\u0002\u0002\u0002\u0002]\u0003\u0002\u0002\u0002",
    "\u0002_\u0003\u0002\u0002\u0002\u0002a\u0003\u0002\u0002\u0002\u0002",
    "c\u0003\u0002\u0002\u0002\u0002e\u0003\u0002\u0002\u0002\u0002g\u0003",
    "\u0002\u0002\u0002\u0002i\u0003\u0002\u0002\u0002\u0002k\u0003\u0002",
    "\u0002\u0002\u0002m\u0003\u0002\u0002\u0002\u0002o\u0003\u0002\u0002",
    "\u0002\u0002q\u0003\u0002\u0002\u0002\u0002s\u0003\u0002\u0002\u0002",
    "\u0002u\u0003\u0002\u0002\u0002\u0002w\u0003\u0002\u0002\u0002\u0002",
    "y\u0003\u0002\u0002\u0002\u0002{\u0003\u0002\u0002\u0002\u0002}\u0003",
    "\u0002\u0002\u0002\u0002\u007f\u0003\u0002\u0002\u0002\u0002\u0081\u0003",
    "\u0002\u0002\u0002\u0002\u0083\u0003\u0002\u0002\u0002\u0002\u0085\u0003",
    "\u0002\u0002\u0002\u0002\u0087\u0003\u0002\u0002\u0002\u0002\u0089\u0003",
    "\u0002\u0002\u0002\u0002\u008b\u0003\u0002\u0002\u0002\u0002\u008d\u0003",
    "\u0002\u0002\u0002\u0002\u008f\u0003\u0002\u0002\u0002\u0002\u0091\u0003",
    "\u0002\u0002\u0002\u0002\u0093\u0003\u0002\u0002\u0002\u0002\u0095\u0003",
    "\u0002\u0002\u0002\u0002\u0097\u0003\u0002\u0002\u0002\u0002\u0099\u0003",
    "\u0002\u0002\u0002\u0002\u009b\u0003\u0002\u0002\u0002\u0002\u009d\u0003",
    "\u0002\u0002\u0002\u0002\u009f\u0003\u0002\u0002\u0002\u0002\u00a1\u0003",
    "\u0002\u0002\u0002\u0002\u00a3\u0003\u0002\u0002\u0002\u0002\u00a5\u0003",
    "\u0002\u0002\u0002\u0002\u00a7\u0003\u0002\u0002\u0002\u0002\u00a9\u0003",
    "\u0002\u0002\u0002\u0002\u00ab\u0003\u0002\u0002\u0002\u0002\u00ad\u0003",
    "\u0002\u0002\u0002\u0002\u00af\u0003\u0002\u0002\u0002\u0002\u00b1\u0003",
    "\u0002\u0002\u0002\u0002\u00b3\u0003\u0002\u0002\u0002\u0002\u00b5\u0003",
    "\u0002\u0002\u0002\u0002\u00b7\u0003\u0002\u0002\u0002\u0002\u00b9\u0003",
    "\u0002\u0002\u0002\u0002\u00bb\u0003\u0002\u0002\u0002\u0002\u00bd\u0003",
    "\u0002\u0002\u0002\u0002\u00bf\u0003\u0002\u0002\u0002\u0002\u00c1\u0003",
    "\u0002\u0002\u0002\u0002\u00c3\u0003\u0002\u0002\u0002\u0002\u00c5\u0003",
    "\u0002\u0002\u0002\u0002\u00c7\u0003\u0002\u0002\u0002\u0002\u00c9\u0003",
    "\u0002\u0002\u0002\u0002\u00cb\u0003\u0002\u0002\u0002\u0002\u00cd\u0003",
    "\u0002\u0002\u0002\u0002\u00cf\u0003\u0002\u0002\u0002\u0002\u00d1\u0003",
    "\u0002\u0002\u0002\u0002\u00d3\u0003\u0002\u0002\u0002\u0002\u00d5\u0003",
    "\u0002\u0002\u0002\u0002\u00d7\u0003\u0002\u0002\u0002\u0002\u00d9\u0003",
    "\u0002\u0002\u0002\u0002\u00db\u0003\u0002\u0002\u0002\u0002\u00dd\u0003",
    "\u0002\u0002\u0002\u0002\u00df\u0003\u0002\u0002\u0002\u0002\u00e1\u0003",
    "\u0002\u0002\u0002\u0002\u00e3\u0003\u0002\u0002\u0002\u0002\u00e5\u0003",
    "\u0002\u0002\u0002\u0002\u00e7\u0003\u0002\u0002\u0002\u0002\u00e9\u0003",
    "\u0002\u0002\u0002\u0002\u00eb\u0003\u0002\u0002\u0002\u0002\u00ed\u0003",
    "\u0002\u0002\u0002\u0002\u00ef\u0003\u0002\u0002\u0002\u0002\u00f1\u0003",
    "\u0002\u0002\u0002\u0002\u00f3\u0003\u0002\u0002\u0002\u0002\u00f5\u0003",
    "\u0002\u0002\u0002\u0002\u00f7\u0003\u0002\u0002\u0002\u0002\u00f9\u0003",
    "\u0002\u0002\u0002\u0002\u00fb\u0003\u0002\u0002\u0002\u0002\u00fd\u0003",
    "\u0002\u0002\u0002\u0002\u00ff\u0003\u0002\u0002\u0002\u0002\u0101\u0003",
    "\u0002\u0002\u0002\u0002\u0103\u0003\u0002\u0002\u0002\u0002\u0105\u0003",
    "\u0002\u0002\u0002\u0002\u0107\u0003\u0002\u0002\u0002\u0002\u0109\u0003",
    "\u0002\u0002\u0002\u0002\u010b\u0003\u0002\u0002\u0002\u0002\u010d\u0003",
    "\u0002\u0002\u0002\u0002\u010f\u0003\u0002\u0002\u0002\u0002\u0111\u0003",
    "\u0002\u0002\u0002\u0002\u0113\u0003\u0002\u0002\u0002\u0002\u0115\u0003",
    "\u0002\u0002\u0002\u0002\u0117\u0003\u0002\u0002\u0002\u0002\u0119\u0003",
    "\u0002\u0002\u0002\u0002\u011b\u0003\u0002\u0002\u0002\u0002\u011d\u0003",
    "\u0002\u0002\u0002\u0002\u011f\u0003\u0002\u0002\u0002\u0002\u0121\u0003",
    "\u0002\u0002\u0002\u0002\u0123\u0003\u0002\u0002\u0002\u0002\u0125\u0003",
    "\u0002\u0002\u0002\u0002\u0127\u0003\u0002\u0002\u0002\u0002\u0129\u0003",
    "\u0002\u0002\u0002\u0002\u012b\u0003\u0002\u0002\u0002\u0002\u012d\u0003",
    "\u0002\u0002\u0002\u0002\u012f\u0003\u0002\u0002\u0002\u0002\u0131\u0003",
    "\u0002\u0002\u0002\u0002\u0133\u0003\u0002\u0002\u0002\u0002\u0135\u0003",
    "\u0002\u0002\u0002\u0002\u0137\u0003\u0002\u0002\u0002\u0002\u0139\u0003",
    "\u0002\u0002\u0002\u0002\u013b\u0003\u0002\u0002\u0002\u0002\u013d\u0003",
    "\u0002\u0002\u0002\u0002\u013f\u0003\u0002\u0002\u0002\u0002\u0141\u0003",
    "\u0002\u0002\u0002\u0002\u0143\u0003\u0002\u0002\u0002\u0002\u0145\u0003",
    "\u0002\u0002\u0002\u0002\u0147\u0003\u0002\u0002\u0002\u0002\u0149\u0003",
    "\u0002\u0002\u0002\u0002\u014b\u0003\u0002\u0002\u0002\u0002\u014d\u0003",
    "\u0002\u0002\u0002\u0002\u014f\u0003\u0002\u0002\u0002\u0002\u0151\u0003",
    "\u0002\u0002\u0002\u0002\u0153\u0003\u0002\u0002\u0002\u0002\u0155\u0003",
    "\u0002\u0002\u0002\u0002\u0157\u0003\u0002\u0002\u0002\u0002\u0159\u0003",
    "\u0002\u0002\u0002\u0002\u015b\u0003\u0002\u0002\u0002\u0002\u015d\u0003",
    "\u0002\u0002\u0002\u0002\u015f\u0003\u0002\u0002\u0002\u0002\u0161\u0003",
    "\u0002\u0002\u0002\u0002\u0163\u0003\u0002\u0002\u0002\u0002\u0165\u0003",
    "\u0002\u0002\u0002\u0002\u0167\u0003\u0002\u0002\u0002\u0002\u0169\u0003",
    "\u0002\u0002\u0002\u0002\u016b\u0003\u0002\u0002\u0002\u0002\u016d\u0003",
    "\u0002\u0002\u0002\u0002\u016f\u0003\u0002\u0002\u0002\u0002\u0171\u0003",
    "\u0002\u0002\u0002\u0002\u0173\u0003\u0002\u0002\u0002\u0002\u0175\u0003",
    "\u0002\u0002\u0002\u0002\u0177\u0003\u0002\u0002\u0002\u0002\u0179\u0003",
    "\u0002\u0002\u0002\u0002\u017b\u0003\u0002\u0002\u0002\u0002\u017d\u0003",
    "\u0002\u0002\u0002\u0002\u017f\u0003\u0002\u0002\u0002\u0002\u0181\u0003",
    "\u0002\u0002\u0002\u0002\u0183\u0003\u0002\u0002\u0002\u0002\u0185\u0003",
    "\u0002\u0002\u0002\u0002\u0187\u0003\u0002\u0002\u0002\u0002\u0189\u0003",
    "\u0002\u0002\u0002\u0002\u018b\u0003\u0002\u0002\u0002\u0002\u018d\u0003",
    "\u0002\u0002\u0002\u0002\u018f\u0003\u0002\u0002\u0002\u0002\u0191\u0003",
    "\u0002\u0002\u0002\u0002\u0193\u0003\u0002\u0002\u0002\u0002\u0195\u0003",
    "\u0002\u0002\u0002\u0002\u0197\u0003\u0002\u0002\u0002\u0002\u0199\u0003",
    "\u0002\u0002\u0002\u0002\u019b\u0003\u0002\u0002\u0002\u0002\u019d\u0003",
    "\u0002\u0002\u0002\u0002\u019f\u0003\u0002\u0002\u0002\u0002\u01a1\u0003",
    "\u0002\u0002\u0002\u0002\u01a3\u0003\u0002\u0002\u0002\u0002\u01a5\u0003",
    "\u0002\u0002\u0002\u0002\u01a7\u0003\u0002\u0002\u0002\u0002\u01a9\u0003",
    "\u0002\u0002\u0002\u0002\u01ab\u0003\u0002\u0002\u0002\u0002\u01ad\u0003",
    "\u0002\u0002\u0002\u0002\u01af\u0003\u0002\u0002\u0002\u0002\u01b1\u0003",
    "\u0002\u0002\u0002\u0002\u01b3\u0003\u0002\u0002\u0002\u0002\u01b5\u0003",
    "\u0002\u0002\u0002\u0002\u01b7\u0003\u0002\u0002\u0002\u0002\u01b9\u0003",
    "\u0002\u0002\u0002\u0002\u01bb\u0003\u0002\u0002\u0002\u0002\u01bd\u0003",
    "\u0002\u0002\u0002\u0002\u01c1\u0003\u0002\u0002\u0002\u0002\u01c3\u0003",
    "\u0002\u0002\u0002\u0002\u01c5\u0003\u0002\u0002\u0002\u0002\u01c7\u0003",
    "\u0002\u0002\u0002\u0002\u01cf\u0003\u0002\u0002\u0002\u0002\u01db\u0003",
    "\u0002\u0002\u0002\u0002\u01dd\u0003\u0002\u0002\u0002\u0002\u01df\u0003",
    "\u0002\u0002\u0002\u0003\u01e1\u0003\u0002\u0002\u0002\u0005\u01e3\u0003",
    "\u0002\u0002\u0002\u0007\u01e5\u0003\u0002\u0002\u0002\t\u01e7\u0003",
    "\u0002\u0002\u0002\u000b\u01e9\u0003\u0002\u0002\u0002\r\u01eb\u0003",
    "\u0002\u0002\u0002\u000f\u01ed\u0003\u0002\u0002\u0002\u0011\u01ef\u0003",
    "\u0002\u0002\u0002\u0013\u01f1\u0003\u0002\u0002\u0002\u0015\u01f3\u0003",
    "\u0002\u0002\u0002\u0017\u01f5\u0003\u0002\u0002\u0002\u0019\u01f7\u0003",
    "\u0002\u0002\u0002\u001b\u01f9\u0003\u0002\u0002\u0002\u001d\u01fb\u0003",
    "\u0002\u0002\u0002\u001f\u01fd\u0003\u0002\u0002\u0002!\u01ff\u0003",
    "\u0002\u0002\u0002#\u0201\u0003\u0002\u0002\u0002%\u0203\u0003\u0002",
    "\u0002\u0002\'\u0205\u0003\u0002\u0002\u0002)\u0207\u0003\u0002\u0002",
    "\u0002+\u0209\u0003\u0002\u0002\u0002-\u020b\u0003\u0002\u0002\u0002",
    "/\u020d\u0003\u0002\u0002\u00021\u020f\u0003\u0002\u0002\u00023\u0211",
    "\u0003\u0002\u0002\u00025\u0213\u0003\u0002\u0002\u00027\u0215\u0003",
    "\u0002\u0002\u00029\u0218\u0003\u0002\u0002\u0002;\u021c\u0003\u0002",
    "\u0002\u0002=\u0220\u0003\u0002\u0002\u0002?\u0224\u0003\u0002\u0002",
    "\u0002A\u022f\u0003\u0002\u0002\u0002C\u0233\u0003\u0002\u0002\u0002",
    "E\u0238\u0003\u0002\u0002\u0002G\u023d\u0003\u0002\u0002\u0002I\u0242",
    "\u0003\u0002\u0002\u0002K\u0249\u0003\u0002\u0002\u0002M\u024f\u0003",
    "\u0002\u0002\u0002O\u0254\u0003\u0002\u0002\u0002Q\u025d\u0003\u0002",
    "\u0002\u0002S\u0261\u0003\u0002\u0002\u0002U\u0266\u0003\u0002\u0002",
    "\u0002W\u026d\u0003\u0002\u0002\u0002Y\u0273\u0003\u0002\u0002\u0002",
    "[\u0278\u0003\u0002\u0002\u0002]\u027d\u0003\u0002\u0002\u0002_\u0283",
    "\u0003\u0002\u0002\u0002a\u028a\u0003\u0002\u0002\u0002c\u0290\u0003",
    "\u0002\u0002\u0002e\u0293\u0003\u0002\u0002\u0002g\u0299\u0003\u0002",
    "\u0002\u0002i\u02a3\u0003\u0002\u0002\u0002k\u02a8\u0003\u0002\u0002",
    "\u0002m\u02ab\u0003\u0002\u0002\u0002o\u02b0\u0003\u0002\u0002\u0002",
    "q\u02b8\u0003\u0002\u0002\u0002s\u02bd\u0003\u0002\u0002\u0002u\u02c2",
    "\u0003\u0002\u0002\u0002w\u02c8\u0003\u0002\u0002\u0002y\u02d0\u0003",
    "\u0002\u0002\u0002{\u02d4\u0003\u0002\u0002\u0002}\u02d9\u0003\u0002",
    "\u0002\u0002\u007f\u02dc\u0003\u0002\u0002\u0002\u0081\u02e2\u0003\u0002",
    "\u0002\u0002\u0083\u02e5\u0003\u0002\u0002\u0002\u0085\u02eb\u0003\u0002",
    "\u0002\u0002\u0087\u02f1\u0003\u0002\u0002\u0002\u0089\u02f8\u0003\u0002",
    "\u0002\u0002\u008b\u02fd\u0003\u0002\u0002\u0002\u008d\u0307\u0003\u0002",
    "\u0002\u0002\u008f\u030d\u0003\u0002\u0002\u0002\u0091\u0312\u0003\u0002",
    "\u0002\u0002\u0093\u031b\u0003\u0002\u0002\u0002\u0095\u0320\u0003\u0002",
    "\u0002\u0002\u0097\u0326\u0003\u0002\u0002\u0002\u0099\u032d\u0003\u0002",
    "\u0002\u0002\u009b\u0333\u0003\u0002\u0002\u0002\u009d\u0338\u0003\u0002",
    "\u0002\u0002\u009f\u033e\u0003\u0002\u0002\u0002\u00a1\u0343\u0003\u0002",
    "\u0002\u0002\u00a3\u0347\u0003\u0002\u0002\u0002\u00a5\u034f\u0003\u0002",
    "\u0002\u0002\u00a7\u0352\u0003\u0002\u0002\u0002\u00a9\u035a\u0003\u0002",
    "\u0002\u0002\u00ab\u0364\u0003\u0002\u0002\u0002\u00ad\u036c\u0003\u0002",
    "\u0002\u0002\u00af\u0375\u0003\u0002\u0002\u0002\u00b1\u037c\u0003\u0002",
    "\u0002\u0002\u00b3\u0382\u0003\u0002\u0002\u0002\u00b5\u0387\u0003\u0002",
    "\u0002\u0002\u00b7\u038b\u0003\u0002\u0002\u0002\u00b9\u038f\u0003\u0002",
    "\u0002\u0002\u00bb\u0396\u0003\u0002\u0002\u0002\u00bd\u039a\u0003\u0002",
    "\u0002\u0002\u00bf\u039e\u0003\u0002\u0002\u0002\u00c1\u03a3\u0003\u0002",
    "\u0002\u0002\u00c3\u03a9\u0003\u0002\u0002\u0002\u00c5\u03af\u0003\u0002",
    "\u0002\u0002\u00c7\u03b6\u0003\u0002\u0002\u0002\u00c9\u03bf\u0003\u0002",
    "\u0002\u0002\u00cb\u03c7\u0003\u0002\u0002\u0002\u00cd\u03ce\u0003\u0002",
    "\u0002\u0002\u00cf\u03d4\u0003\u0002\u0002\u0002\u00d1\u03db\u0003\u0002",
    "\u0002\u0002\u00d3\u03e2\u0003\u0002\u0002\u0002\u00d5\u03eb\u0003\u0002",
    "\u0002\u0002\u00d7\u03f0\u0003\u0002\u0002\u0002\u00d9\u03f5\u0003\u0002",
    "\u0002\u0002\u00db\u03fb\u0003\u0002\u0002\u0002\u00dd\u0402\u0003\u0002",
    "\u0002\u0002\u00df\u040f\u0003\u0002\u0002\u0002\u00e1\u0416\u0003\u0002",
    "\u0002\u0002\u00e3\u041e\u0003\u0002\u0002\u0002\u00e5\u0423\u0003\u0002",
    "\u0002\u0002\u00e7\u0428\u0003\u0002\u0002\u0002\u00e9\u042d\u0003\u0002",
    "\u0002\u0002\u00eb\u0436\u0003\u0002\u0002\u0002\u00ed\u043a\u0003\u0002",
    "\u0002\u0002\u00ef\u0443\u0003\u0002\u0002\u0002\u00f1\u0450\u0003\u0002",
    "\u0002\u0002\u00f3\u045b\u0003\u0002\u0002\u0002\u00f5\u0468\u0003\u0002",
    "\u0002\u0002\u00f7\u046c\u0003\u0002\u0002\u0002\u00f9\u0473\u0003\u0002",
    "\u0002\u0002\u00fb\u0479\u0003\u0002\u0002\u0002\u00fd\u0482\u0003\u0002",
    "\u0002\u0002\u00ff\u0489\u0003\u0002\u0002\u0002\u0101\u0493\u0003\u0002",
    "\u0002\u0002\u0103\u049d\u0003\u0002\u0002\u0002\u0105\u04a8\u0003\u0002",
    "\u0002\u0002\u0107\u04b2\u0003\u0002\u0002\u0002\u0109\u04b8\u0003\u0002",
    "\u0002\u0002\u010b\u04c0\u0003\u0002\u0002\u0002\u010d\u04c6\u0003\u0002",
    "\u0002\u0002\u010f\u04cd\u0003\u0002\u0002\u0002\u0111\u04d3\u0003\u0002",
    "\u0002\u0002\u0113\u04da\u0003\u0002\u0002\u0002\u0115\u04e1\u0003\u0002",
    "\u0002\u0002\u0117\u04e5\u0003\u0002\u0002\u0002\u0119\u04ed\u0003\u0002",
    "\u0002\u0002\u011b\u04f8\u0003\u0002\u0002\u0002\u011d\u0504\u0003\u0002",
    "\u0002\u0002\u011f\u0511\u0003\u0002\u0002\u0002\u0121\u0515\u0003\u0002",
    "\u0002\u0002\u0123\u0520\u0003\u0002\u0002\u0002\u0125\u0525\u0003\u0002",
    "\u0002\u0002\u0127\u052e\u0003\u0002\u0002\u0002\u0129\u053c\u0003\u0002",
    "\u0002\u0002\u012b\u054c\u0003\u0002\u0002\u0002\u012d\u0551\u0003\u0002",
    "\u0002\u0002\u012f\u0554\u0003\u0002\u0002\u0002\u0131\u055c\u0003\u0002",
    "\u0002\u0002\u0133\u0563\u0003\u0002\u0002\u0002\u0135\u056c\u0003\u0002",
    "\u0002\u0002\u0137\u0574\u0003\u0002\u0002\u0002\u0139\u057c\u0003\u0002",
    "\u0002\u0002\u013b\u0581\u0003\u0002\u0002\u0002\u013d\u0586\u0003\u0002",
    "\u0002\u0002\u013f\u058b\u0003\u0002\u0002\u0002\u0141\u0593\u0003\u0002",
    "\u0002\u0002\u0143\u0598\u0003\u0002\u0002\u0002\u0145\u059c\u0003\u0002",
    "\u0002\u0002\u0147\u05a3\u0003\u0002\u0002\u0002\u0149\u05a8\u0003\u0002",
    "\u0002\u0002\u014b\u05ad\u0003\u0002\u0002\u0002\u014d\u05b2\u0003\u0002",
    "\u0002\u0002\u014f\u05b7\u0003\u0002\u0002\u0002\u0151\u05bf\u0003\u0002",
    "\u0002\u0002\u0153\u05c8\u0003\u0002\u0002\u0002\u0155\u05cc\u0003\u0002",
    "\u0002\u0002\u0157\u05d4\u0003\u0002\u0002\u0002\u0159\u05db\u0003\u0002",
    "\u0002\u0002\u015b\u05e2\u0003\u0002\u0002\u0002\u015d\u05e9\u0003\u0002",
    "\u0002\u0002\u015f\u05ee\u0003\u0002\u0002\u0002\u0161\u05f4\u0003\u0002",
    "\u0002\u0002\u0163\u05fb\u0003\u0002\u0002\u0002\u0165\u0603\u0003\u0002",
    "\u0002\u0002\u0167\u060b\u0003\u0002\u0002\u0002\u0169\u0610\u0003\u0002",
    "\u0002\u0002\u016b\u0618\u0003\u0002\u0002\u0002\u016d\u061e\u0003\u0002",
    "\u0002\u0002\u016f\u0627\u0003\u0002\u0002\u0002\u0171\u062c\u0003\u0002",
    "\u0002\u0002\u0173\u0631\u0003\u0002\u0002\u0002\u0175\u0638\u0003\u0002",
    "\u0002\u0002\u0177\u0642\u0003\u0002\u0002\u0002\u0179\u064e\u0003\u0002",
    "\u0002\u0002\u017b\u0653\u0003\u0002\u0002\u0002\u017d\u065a\u0003\u0002",
    "\u0002\u0002\u017f\u0664\u0003\u0002\u0002\u0002\u0181\u0669\u0003\u0002",
    "\u0002\u0002\u0183\u066f\u0003\u0002\u0002\u0002\u0185\u0675\u0003\u0002",
    "\u0002\u0002\u0187\u0677\u0003\u0002\u0002\u0002\u0189\u067a\u0003\u0002",
    "\u0002\u0002\u018b\u067d\u0003\u0002\u0002\u0002\u018d\u0681\u0003\u0002",
    "\u0002\u0002\u018f\u0684\u0003\u0002\u0002\u0002\u0191\u0687\u0003\u0002",
    "\u0002\u0002\u0193\u0689\u0003\u0002\u0002\u0002\u0195\u068b\u0003\u0002",
    "\u0002\u0002\u0197\u068d\u0003\u0002\u0002\u0002\u0199\u068f\u0003\u0002",
    "\u0002\u0002\u019b\u069a\u0003\u0002\u0002\u0002\u019d\u069c\u0003\u0002",
    "\u0002\u0002\u019f\u069e\u0003\u0002\u0002\u0002\u01a1\u06a1\u0003\u0002",
    "\u0002\u0002\u01a3\u06a3\u0003\u0002\u0002\u0002\u01a5\u06a6\u0003\u0002",
    "\u0002\u0002\u01a7\u06a8\u0003\u0002\u0002\u0002\u01a9\u06aa\u0003\u0002",
    "\u0002\u0002\u01ab\u06ac\u0003\u0002\u0002\u0002\u01ad\u06ae\u0003\u0002",
    "\u0002\u0002\u01af\u06b0\u0003\u0002\u0002\u0002\u01b1\u06b2\u0003\u0002",
    "\u0002\u0002\u01b3\u06b4\u0003\u0002\u0002\u0002\u01b5\u06b6\u0003\u0002",
    "\u0002\u0002\u01b7\u06b8\u0003\u0002\u0002\u0002\u01b9\u06ba\u0003\u0002",
    "\u0002\u0002\u01bb\u06bc\u0003\u0002\u0002\u0002\u01bd\u06bf\u0003\u0002",
    "\u0002\u0002\u01bf\u06c3\u0003\u0002\u0002\u0002\u01c1\u06e3\u0003\u0002",
    "\u0002\u0002\u01c3\u06e5\u0003\u0002\u0002\u0002\u01c5\u06f3\u0003\u0002",
    "\u0002\u0002\u01c7\u06fe\u0003\u0002\u0002\u0002\u01c9\u0700\u0003\u0002",
    "\u0002\u0002\u01cb\u0709\u0003\u0002\u0002\u0002\u01cd\u070b\u0003\u0002",
    "\u0002\u0002\u01cf\u070d\u0003\u0002\u0002\u0002\u01d1\u0717\u0003\u0002",
    "\u0002\u0002\u01d3\u0720\u0003\u0002\u0002\u0002\u01d5\u0726\u0003\u0002",
    "\u0002\u0002\u01d7\u0731\u0003\u0002\u0002\u0002\u01d9\u0733\u0003\u0002",
    "\u0002\u0002\u01db\u073a\u0003\u0002\u0002\u0002\u01dd\u0740\u0003\u0002",
    "\u0002\u0002\u01df\u0746\u0003\u0002\u0002\u0002\u01e1\u01e2\t\u0002",
    "\u0002\u0002\u01e2\u0004\u0003\u0002\u0002\u0002\u01e3\u01e4\t\u0003",
    "\u0002\u0002\u01e4\u0006\u0003\u0002\u0002\u0002\u01e5\u01e6\t\u0004",
    "\u0002\u0002\u01e6\b\u0003\u0002\u0002\u0002\u01e7\u01e8\t\u0005\u0002",
    "\u0002\u01e8\n\u0003\u0002\u0002\u0002\u01e9\u01ea\t\u0006\u0002\u0002",
    "\u01ea\f\u0003\u0002\u0002\u0002\u01eb\u01ec\t\u0007\u0002\u0002\u01ec",
    "\u000e\u0003\u0002\u0002\u0002\u01ed\u01ee\t\b\u0002\u0002\u01ee\u0010",
    "\u0003\u0002\u0002\u0002\u01ef\u01f0\t\t\u0002\u0002\u01f0\u0012\u0003",
    "\u0002\u0002\u0002\u01f1\u01f2\t\n\u0002\u0002\u01f2\u0014\u0003\u0002",
    "\u0002\u0002\u01f3\u01f4\t\u000b\u0002\u0002\u01f4\u0016\u0003\u0002",
    "\u0002\u0002\u01f5\u01f6\t\f\u0002\u0002\u01f6\u0018\u0003\u0002\u0002",
    "\u0002\u01f7\u01f8\t\r\u0002\u0002\u01f8\u001a\u0003\u0002\u0002\u0002",
    "\u01f9\u01fa\t\u000e\u0002\u0002\u01fa\u001c\u0003\u0002\u0002\u0002",
    "\u01fb\u01fc\t\u000f\u0002\u0002\u01fc\u001e\u0003\u0002\u0002\u0002",
    "\u01fd\u01fe\t\u0010\u0002\u0002\u01fe \u0003\u0002\u0002\u0002\u01ff",
    "\u0200\t\u0011\u0002\u0002\u0200\"\u0003\u0002\u0002\u0002\u0201\u0202",
    "\t\u0012\u0002\u0002\u0202$\u0003\u0002\u0002\u0002\u0203\u0204\t\u0013",
    "\u0002\u0002\u0204&\u0003\u0002\u0002\u0002\u0205\u0206\t\u0014\u0002",
    "\u0002\u0206(\u0003\u0002\u0002\u0002\u0207\u0208\t\u0015\u0002\u0002",
    "\u0208*\u0003\u0002\u0002\u0002\u0209\u020a\t\u0016\u0002\u0002\u020a",
    ",\u0003\u0002\u0002\u0002\u020b\u020c\t\u0017\u0002\u0002\u020c.\u0003",
    "\u0002\u0002\u0002\u020d\u020e\t\u0018\u0002\u0002\u020e0\u0003\u0002",
    "\u0002\u0002\u020f\u0210\t\u0019\u0002\u0002\u02102\u0003\u0002\u0002",
    "\u0002\u0211\u0212\t\u001a\u0002\u0002\u02124\u0003\u0002\u0002\u0002",
    "\u0213\u0214\t\u001b\u0002\u0002\u02146\u0003\u0002\u0002\u0002\u0215",
    "\u0216\u0005\u0003\u0002\u0002\u0216\u0217\u0005\'\u0014\u0002\u0217",
    "8\u0003\u0002\u0002\u0002\u0218\u0219\u0005\u0003\u0002\u0002\u0219",
    "\u021a\u0005\u0019\r\u0002\u021a\u021b\u0005\u0019\r\u0002\u021b:\u0003",
    "\u0002\u0002\u0002\u021c\u021d\u0005\u0003\u0002\u0002\u021d\u021e\u0005",
    "\u001d\u000f\u0002\u021e\u021f\u0005\t\u0005\u0002\u021f<\u0003\u0002",
    "\u0002\u0002\u0220\u0221\u0005\u0003\u0002\u0002\u0221\u0222\u0005\u001d",
    "\u000f\u0002\u0222\u0223\u00053\u001a\u0002\u0223>\u0003\u0002\u0002",
    "\u0002\u0224\u0225\u0005\u0003\u0002\u0002\u0225\u0226\u0005\'\u0014",
    "\u0002\u0226\u0227\u00053\u001a\u0002\u0227\u0228\u0005\u001b\u000e",
    "\u0002\u0228\u0229\u0005\u001b\u000e\u0002\u0229\u022a\u0005\u000b\u0006",
    "\u0002\u022a\u022b\u0005)\u0015\u0002\u022b\u022c\u0005%\u0013\u0002",
    "\u022c\u022d\u0005\u0013\n\u0002\u022d\u022e\u0005\u0007\u0004\u0002",
    "\u022e@\u0003\u0002\u0002\u0002\u022f\u0230\u0005\u0003\u0002\u0002",
    "\u0230\u0231\u0005\'\u0014\u0002\u0231\u0232\u0005\u0007\u0004\u0002",
    "\u0232B\u0003\u0002\u0002\u0002\u0233\u0234\u0005\u0005\u0003\u0002",
    "\u0234\u0235\u0005\u001f\u0010\u0002\u0235\u0236\u0005)\u0015\u0002",
    "\u0236\u0237\u0005\u0011\t\u0002\u0237D\u0003\u0002\u0002\u0002\u0238",
    "\u0239\u0005\u0007\u0004\u0002\u0239\u023a\u0005\u0003\u0002\u0002\u023a",
    "\u023b\u0005\'\u0014\u0002\u023b\u023c\u0005\u000b\u0006\u0002\u023c",
    "F\u0003\u0002\u0002\u0002\u023d\u023e\u0005\u0007\u0004\u0002\u023e",
    "\u023f\u0005\u0003\u0002\u0002\u023f\u0240\u0005\'\u0014\u0002\u0240",
    "\u0241\u0005)\u0015\u0002\u0241H\u0003\u0002\u0002\u0002\u0242\u0243",
    "\u0005\u0007\u0004\u0002\u0243\u0244\u0005%\u0013\u0002\u0244\u0245",
    "\u0005\u000b\u0006\u0002\u0245\u0246\u0005\u0003\u0002\u0002\u0246\u0247",
    "\u0005)\u0015\u0002\u0247\u0248\u0005\u000b\u0006\u0002\u0248J\u0003",
    "\u0002\u0002\u0002\u0249\u024a\u0005\u0007\u0004\u0002\u024a\u024b\u0005",
    "%\u0013\u0002\u024b\u024c\u0005\u001f\u0010\u0002\u024c\u024d\u0005",
    "\'\u0014\u0002\u024d\u024e\u0005\'\u0014\u0002\u024eL\u0003\u0002\u0002",
    "\u0002\u024f\u0250\u0005\t\u0005\u0002\u0250\u0251\u0005\u000b\u0006",
    "\u0002\u0251\u0252\u0005\'\u0014\u0002\u0252\u0253\u0005\u0007\u0004",
    "\u0002\u0253N\u0003\u0002\u0002\u0002\u0254\u0255\u0005\t\u0005\u0002",
    "\u0255\u0256\u0005\u0013\n\u0002\u0256\u0257\u0005\'\u0014\u0002\u0257",
    "\u0258\u0005)\u0015\u0002\u0258\u0259\u0005\u0013\n\u0002\u0259\u025a",
    "\u0005\u001d\u000f\u0002\u025a\u025b\u0005\u0007\u0004\u0002\u025b\u025c",
    "\u0005)\u0015\u0002\u025cP\u0003\u0002\u0002\u0002\u025d\u025e\u0005",
    "\u000b\u0006\u0002\u025e\u025f\u0005\u001d\u000f\u0002\u025f\u0260\u0005",
    "\t\u0005\u0002\u0260R\u0003\u0002\u0002\u0002\u0261\u0262\u0005\u000b",
    "\u0006\u0002\u0262\u0263\u0005\u0019\r\u0002\u0263\u0264\u0005\'\u0014",
    "\u0002\u0264\u0265\u0005\u000b\u0006\u0002\u0265T\u0003\u0002\u0002",
    "\u0002\u0266\u0267\u0005\u000b\u0006\u0002\u0267\u0268\u00051\u0019",
    "\u0002\u0268\u0269\u0005\u0007\u0004\u0002\u0269\u026a\u0005\u000b\u0006",
    "\u0002\u026a\u026b\u0005!\u0011\u0002\u026b\u026c\u0005)\u0015\u0002",
    "\u026cV\u0003\u0002\u0002\u0002\u026d\u026e\u0005\r\u0007\u0002\u026e",
    "\u026f\u0005\u0003\u0002\u0002\u026f\u0270\u0005\u0019\r\u0002\u0270",
    "\u0271\u0005\'\u0014\u0002\u0271\u0272\u0005\u000b\u0006\u0002\u0272",
    "X\u0003\u0002\u0002\u0002\u0273\u0274\u0005\r\u0007\u0002\u0274\u0275",
    "\u0005+\u0016\u0002\u0275\u0276\u0005\u0019\r\u0002\u0276\u0277\u0005",
    "\u0019\r\u0002\u0277Z\u0003\u0002\u0002\u0002\u0278\u0279\u0005\r\u0007",
    "\u0002\u0279\u027a\u0005%\u0013\u0002\u027a\u027b\u0005\u001f\u0010",
    "\u0002\u027b\u027c\u0005\u001b\u000e\u0002\u027c\\\u0003\u0002\u0002",
    "\u0002\u027d\u027e\u0005\u000f\b\u0002\u027e\u027f\u0005%\u0013\u0002",
    "\u027f\u0280\u0005\u001f\u0010\u0002\u0280\u0281\u0005+\u0016\u0002",
    "\u0281\u0282\u0005!\u0011\u0002\u0282^\u0003\u0002\u0002\u0002\u0283",
    "\u0284\u0005\u0011\t\u0002\u0284\u0285\u0005\u0003\u0002\u0002\u0285",
    "\u0286\u0005-\u0017\u0002\u0286\u0287\u0005\u0013\n\u0002\u0287\u0288",
    "\u0005\u001d\u000f\u0002\u0288\u0289\u0005\u000f\b\u0002\u0289`\u0003",
    "\u0002\u0002\u0002\u028a\u028b\u0005\u0013\n\u0002\u028b\u028c\u0005",
    "\u0019\r\u0002\u028c\u028d\u0005\u0013\n\u0002\u028d\u028e\u0005\u0017",
    "\f\u0002\u028e\u028f\u0005\u000b\u0006\u0002\u028fb\u0003\u0002\u0002",
    "\u0002\u0290\u0291\u0005\u0013\n\u0002\u0291\u0292\u0005\u001d\u000f",
    "\u0002\u0292d\u0003\u0002\u0002\u0002\u0293\u0294\u0005\u0013\n\u0002",
    "\u0294\u0295\u0005\u001d\u000f\u0002\u0295\u0296\u0005\u001d\u000f\u0002",
    "\u0296\u0297\u0005\u000b\u0006\u0002\u0297\u0298\u0005%\u0013\u0002",
    "\u0298f\u0003\u0002\u0002\u0002\u0299\u029a\u0005\u0013\n\u0002\u029a",
    "\u029b\u0005\u001d\u000f\u0002\u029b\u029c\u0005)\u0015\u0002\u029c",
    "\u029d\u0005\u000b\u0006\u0002\u029d\u029e\u0005%\u0013\u0002\u029e",
    "\u029f\u0005\'\u0014\u0002\u029f\u02a0\u0005\u000b\u0006\u0002\u02a0",
    "\u02a1\u0005\u0007\u0004\u0002\u02a1\u02a2\u0005)\u0015\u0002\u02a2",
    "h\u0003\u0002\u0002\u0002\u02a3\u02a4\u0005\u0013\n\u0002\u02a4\u02a5",
    "\u0005\u001d\u000f\u0002\u02a5\u02a6\u0005)\u0015\u0002\u02a6\u02a7",
    "\u0005\u001f\u0010\u0002\u02a7j\u0003\u0002\u0002\u0002\u02a8\u02a9",
    "\u0005\u0013\n\u0002\u02a9\u02aa\u0005\'\u0014\u0002\u02aal\u0003\u0002",
    "\u0002\u0002\u02ab\u02ac\u0005\u0015\u000b\u0002\u02ac\u02ad\u0005\u001f",
    "\u0010\u0002\u02ad\u02ae\u0005\u0013\n\u0002\u02ae\u02af\u0005\u001d",
    "\u000f\u0002\u02afn\u0003\u0002\u0002\u0002\u02b0\u02b1\u0005\u0019",
    "\r\u0002\u02b1\u02b2\u0005\u000b\u0006\u0002\u02b2\u02b3\u0005\u0003",
    "\u0002\u0002\u02b3\u02b4\u0005\t\u0005\u0002\u02b4\u02b5\u0005\u0013",
    "\n\u0002\u02b5\u02b6\u0005\u001d\u000f\u0002\u02b6\u02b7\u0005\u000f",
    "\b\u0002\u02b7p\u0003\u0002\u0002\u0002\u02b8\u02b9\u0005\u0019\r\u0002",
    "\u02b9\u02ba\u0005\u000b\u0006\u0002\u02ba\u02bb\u0005\r\u0007\u0002",
    "\u02bb\u02bc\u0005)\u0015\u0002\u02bcr\u0003\u0002\u0002\u0002\u02bd",
    "\u02be\u0005\u0019\r\u0002\u02be\u02bf\u0005\u0013\n\u0002\u02bf\u02c0",
    "\u0005\u0017\f\u0002\u02c0\u02c1\u0005\u000b\u0006\u0002\u02c1t\u0003",
    "\u0002\u0002\u0002\u02c2\u02c3\u0005\u0019\r\u0002\u02c3\u02c4\u0005",
    "\u0013\n\u0002\u02c4\u02c5\u0005\u001b\u000e\u0002\u02c5\u02c6\u0005",
    "\u0013\n\u0002\u02c6\u02c7\u0005)\u0015\u0002\u02c7v\u0003\u0002\u0002",
    "\u0002\u02c8\u02c9\u0005\u001d\u000f\u0002\u02c9\u02ca\u0005\u0003\u0002",
    "\u0002\u02ca\u02cb\u0005)\u0015\u0002\u02cb\u02cc\u0005+\u0016\u0002",
    "\u02cc\u02cd\u0005%\u0013\u0002\u02cd\u02ce\u0005\u0003\u0002\u0002",
    "\u02ce\u02cf\u0005\u0019\r\u0002\u02cfx\u0003\u0002\u0002\u0002\u02d0",
    "\u02d1\u0005\u001d\u000f\u0002\u02d1\u02d2\u0005\u001f\u0010\u0002\u02d2",
    "\u02d3\u0005)\u0015\u0002\u02d3z\u0003\u0002\u0002\u0002\u02d4\u02d5",
    "\u0005\u001d\u000f\u0002\u02d5\u02d6\u0005+\u0016\u0002\u02d6\u02d7",
    "\u0005\u0019\r\u0002\u02d7\u02d8\u0005\u0019\r\u0002\u02d8|\u0003\u0002",
    "\u0002\u0002\u02d9\u02da\u0005\u001f\u0010\u0002\u02da\u02db\u0005\u001d",
    "\u000f\u0002\u02db~\u0003\u0002\u0002\u0002\u02dc\u02dd\u0005\u001f",
    "\u0010\u0002\u02dd\u02de\u0005+\u0016\u0002\u02de\u02df\u0005)\u0015",
    "\u0002\u02df\u02e0\u0005\u000b\u0006\u0002\u02e0\u02e1\u0005%\u0013",
    "\u0002\u02e1\u0080\u0003\u0002\u0002\u0002\u02e2\u02e3\u0005\u001f\u0010",
    "\u0002\u02e3\u02e4\u0005%\u0013\u0002\u02e4\u0082\u0003\u0002\u0002",
    "\u0002\u02e5\u02e6\u0005\u001f\u0010\u0002\u02e6\u02e7\u0005%\u0013",
    "\u0002\u02e7\u02e8\u0005\t\u0005\u0002\u02e8\u02e9\u0005\u000b\u0006",
    "\u0002\u02e9\u02ea\u0005%\u0013\u0002\u02ea\u0084\u0003\u0002\u0002",
    "\u0002\u02eb\u02ec\u0005%\u0013\u0002\u02ec\u02ed\u0005\u0013\n\u0002",
    "\u02ed\u02ee\u0005\u000f\b\u0002\u02ee\u02ef\u0005\u0011\t\u0002\u02ef",
    "\u02f0\u0005)\u0015\u0002\u02f0\u0086\u0003\u0002\u0002\u0002\u02f1",
    "\u02f2\u0005\'\u0014\u0002\u02f2\u02f3\u0005\u000b\u0006\u0002\u02f3",
    "\u02f4\u0005\u0019\r\u0002\u02f4\u02f5\u0005\u000b\u0006\u0002\u02f5",
    "\u02f6\u0005\u0007\u0004\u0002\u02f6\u02f7\u0005)\u0015\u0002\u02f7",
    "\u0088\u0003\u0002\u0002\u0002\u02f8\u02f9\u0005\'\u0014\u0002\u02f9",
    "\u02fa\u0005\u001f\u0010\u0002\u02fa\u02fb\u0005\u001b\u000e\u0002\u02fb",
    "\u02fc\u0005\u000b\u0006\u0002\u02fc\u008a\u0003\u0002\u0002\u0002\u02fd",
    "\u02fe\u0005\'\u0014\u0002\u02fe\u02ff\u00053\u001a\u0002\u02ff\u0300",
    "\u0005\u001b\u000e\u0002\u0300\u0301\u0005\u001b\u000e\u0002\u0301\u0302",
    "\u0005\u000b\u0006\u0002\u0302\u0303\u0005)\u0015\u0002\u0303\u0304",
    "\u0005%\u0013\u0002\u0304\u0305\u0005\u0013\n\u0002\u0305\u0306\u0005",
    "\u0007\u0004\u0002\u0306\u008c\u0003\u0002\u0002\u0002\u0307\u0308\u0005",
    ")\u0015\u0002\u0308\u0309\u0005\u0003\u0002\u0002\u0309\u030a\u0005",
    "\u0005\u0003\u0002\u030a\u030b\u0005\u0019\r\u0002\u030b\u030c\u0005",
    "\u000b\u0006\u0002\u030c\u008e\u0003\u0002\u0002\u0002\u030d\u030e\u0005",
    ")\u0015\u0002\u030e\u030f\u0005\u0011\t\u0002\u030f\u0310\u0005\u000b",
    "\u0006\u0002\u0310\u0311\u0005\u001d\u000f\u0002\u0311\u0090\u0003\u0002",
    "\u0002\u0002\u0312\u0313\u0005)\u0015\u0002\u0313\u0314\u0005%\u0013",
    "\u0002\u0314\u0315\u0005\u0003\u0002\u0002\u0315\u0316\u0005\u0013\n",
    "\u0002\u0316\u0317\u0005\u0019\r\u0002\u0317\u0318\u0005\u0013\n\u0002",
    "\u0318\u0319\u0005\u001d\u000f\u0002\u0319\u031a\u0005\u000f\b\u0002",
    "\u031a\u0092\u0003\u0002\u0002\u0002\u031b\u031c\u0005)\u0015\u0002",
    "\u031c\u031d\u0005%\u0013\u0002\u031d\u031e\u0005+\u0016\u0002\u031e",
    "\u031f\u0005\u000b\u0006\u0002\u031f\u0094\u0003\u0002\u0002\u0002\u0320",
    "\u0321\u0005+\u0016\u0002\u0321\u0322\u0005\u001d\u000f\u0002\u0322",
    "\u0323\u0005\u0013\n\u0002\u0323\u0324\u0005\u001f\u0010\u0002\u0324",
    "\u0325\u0005\u001d\u000f\u0002\u0325\u0096\u0003\u0002\u0002\u0002\u0326",
    "\u0327\u0005+\u0016\u0002\u0327\u0328\u0005\u001d\u000f\u0002\u0328",
    "\u0329\u0005\u0013\n\u0002\u0329\u032a\u0005#\u0012\u0002\u032a\u032b",
    "\u0005+\u0016\u0002\u032b\u032c\u0005\u000b\u0006\u0002\u032c\u0098",
    "\u0003\u0002\u0002\u0002\u032d\u032e\u0005+\u0016\u0002\u032e\u032f",
    "\u0005\'\u0014\u0002\u032f\u0330\u0005\u0013\n\u0002\u0330\u0331\u0005",
    "\u001d\u000f\u0002\u0331\u0332\u0005\u000f\b\u0002\u0332\u009a\u0003",
    "\u0002\u0002\u0002\u0333\u0334\u0005/\u0018\u0002\u0334\u0335\u0005",
    "\u0011\t\u0002\u0335\u0336\u0005\u000b\u0006\u0002\u0336\u0337\u0005",
    "\u001d\u000f\u0002\u0337\u009c\u0003\u0002\u0002\u0002\u0338\u0339\u0005",
    "/\u0018\u0002\u0339\u033a\u0005\u0011\t\u0002\u033a\u033b\u0005\u000b",
    "\u0006\u0002\u033b\u033c\u0005%\u0013\u0002\u033c\u033d\u0005\u000b",
    "\u0006\u0002\u033d\u009e\u0003\u0002\u0002\u0002\u033e\u033f\u0005/",
    "\u0018\u0002\u033f\u0340\u0005\u0013\n\u0002\u0340\u0341\u0005)\u0015",
    "\u0002\u0341\u0342\u0005\u0011\t\u0002\u0342\u00a0\u0003\u0002\u0002",
    "\u0002\u0343\u0344\u0005\u0003\u0002\u0002\u0344\u0345\u0005-\u0017",
    "\u0002\u0345\u0346\u0005\u000f\b\u0002\u0346\u00a2\u0003\u0002\u0002",
    "\u0002\u0347\u0348\u0005\u0005\u0003\u0002\u0348\u0349\u0005\u000b\u0006",
    "\u0002\u0349\u034a\u0005)\u0015\u0002\u034a\u034b\u0005/\u0018\u0002",
    "\u034b\u034c\u0005\u000b\u0006\u0002\u034c\u034d\u0005\u000b\u0006\u0002",
    "\u034d\u034e\u0005\u001d\u000f\u0002\u034e\u00a4\u0003\u0002\u0002\u0002",
    "\u034f\u0350\u0005\u0005\u0003\u0002\u0350\u0351\u00053\u001a\u0002",
    "\u0351\u00a6\u0003\u0002\u0002\u0002\u0352\u0353\u0005\u0007\u0004\u0002",
    "\u0353\u0354\u0005\u000b\u0006\u0002\u0354\u0355\u0005\u001d\u000f\u0002",
    "\u0355\u0356\u0005)\u0015\u0002\u0356\u0357\u0005+\u0016\u0002\u0357",
    "\u0358\u0005%\u0013\u0002\u0358\u0359\u00053\u001a\u0002\u0359\u00a8",
    "\u0003\u0002\u0002\u0002\u035a\u035b\u0005\u0007\u0004\u0002\u035b\u035c",
    "\u0005\u0011\t\u0002\u035c\u035d\u0005\u0003\u0002\u0002\u035d\u035e",
    "\u0005%\u0013\u0002\u035e\u035f\u0005\u0003\u0002\u0002\u035f\u0360",
    "\u0005\u0007\u0004\u0002\u0360\u0361\u0005)\u0015\u0002\u0361\u0362",
    "\u0005\u000b\u0006\u0002\u0362\u0363\u0005%\u0013\u0002\u0363\u00aa",
    "\u0003\u0002\u0002\u0002\u0364\u0365\u0005\u0007\u0004\u0002\u0365\u0366",
    "\u0005\u001f\u0010\u0002\u0366\u0367\u0005\u0019\r\u0002\u0367\u0368",
    "\u0005\u0019\r\u0002\u0368\u0369\u0005\u000b\u0006\u0002\u0369\u036a",
    "\u0005\u0007\u0004\u0002\u036a\u036b\u0005)\u0015\u0002\u036b\u00ac",
    "\u0003\u0002\u0002\u0002\u036c\u036d\u0005\u0007\u0004\u0002\u036d\u036e",
    "\u0005\u001f\u0010\u0002\u036e\u036f\u0005\u0003\u0002\u0002\u036f\u0370",
    "\u0005\u0019\r\u0002\u0370\u0371\u0005\u000b\u0006\u0002\u0371\u0372",
    "\u0005\'\u0014\u0002\u0372\u0373\u0005\u0007\u0004\u0002\u0373\u0374",
    "\u0005\u000b\u0006\u0002\u0374\u00ae\u0003\u0002\u0002\u0002\u0375\u0376",
    "\u0005\u0007\u0004\u0002\u0376\u0377\u0005\u001f\u0010\u0002\u0377\u0378",
    "\u0005\u0019\r\u0002\u0378\u0379\u0005+\u0016\u0002\u0379\u037a\u0005",
    "\u001b\u000e\u0002\u037a\u037b\u0005\u001d\u000f\u0002\u037b\u00b0\u0003",
    "\u0002\u0002\u0002\u037c\u037d\u0005\u0007\u0004\u0002\u037d\u037e\u0005",
    "\u001f\u0010\u0002\u037e\u037f\u0005+\u0016\u0002\u037f\u0380\u0005",
    "\u001d\u000f\u0002\u0380\u0381\u0005)\u0015\u0002\u0381\u00b2\u0003",
    "\u0002\u0002\u0002\u0382\u0383\u0005\u0007\u0004\u0002\u0383\u0384\u0005",
    "+\u0016\u0002\u0384\u0385\u0005\u0005\u0003\u0002\u0385\u0386\u0005",
    "\u000b\u0006\u0002\u0386\u00b4\u0003\u0002\u0002\u0002\u0387\u0388\u0005",
    "\t\u0005\u0002\u0388\u0389\u0005\u0003\u0002\u0002\u0389\u038a\u0005",
    "3\u001a\u0002\u038a\u00b6\u0003\u0002\u0002\u0002\u038b\u038c\u0005",
    "\t\u0005\u0002\u038c\u038d\u0005\u000b\u0006\u0002\u038d\u038e\u0005",
    "\u0007\u0004\u0002\u038e\u00b8\u0003\u0002\u0002\u0002\u038f\u0390\u0005",
    "\t\u0005\u0002\u0390\u0391\u0005\u000b\u0006\u0002\u0391\u0392\u0005",
    "\u0007\u0004\u0002\u0392\u0393\u0005\u0003\u0002\u0002\u0393\u0394\u0005",
    "\t\u0005\u0002\u0394\u0395\u0005\u000b\u0006\u0002\u0395\u00ba\u0003",
    "\u0002\u0002\u0002\u0396\u0397\u0005\t\u0005\u0002\u0397\u0398\u0005",
    "\u001f\u0010\u0002\u0398\u0399\u0005/\u0018\u0002\u0399\u00bc\u0003",
    "\u0002\u0002\u0002\u039a\u039b\u0005\t\u0005\u0002\u039b\u039c\u0005",
    "\u001f\u0010\u0002\u039c\u039d\u00053\u001a\u0002\u039d\u00be\u0003",
    "\u0002\u0002\u0002\u039e\u039f\u0005\t\u0005\u0002\u039f\u03a0\u0005",
    "%\u0013\u0002\u03a0\u03a1\u0005\u001f\u0010\u0002\u03a1\u03a2\u0005",
    "!\u0011\u0002\u03a2\u00c0\u0003\u0002\u0002\u0002\u03a3\u03a4\u0005",
    "\u000b\u0006\u0002\u03a4\u03a5\u0005!\u0011\u0002\u03a5\u03a6\u0005",
    "\u001f\u0010\u0002\u03a6\u03a7\u0005\u0007\u0004\u0002\u03a7\u03a8\u0005",
    "\u0011\t\u0002\u03a8\u00c2\u0003\u0002\u0002\u0002\u03a9\u03aa\u0005",
    "\u000b\u0006\u0002\u03aa\u03ab\u0005-\u0017\u0002\u03ab\u03ac\u0005",
    "\u000b\u0006\u0002\u03ac\u03ad\u0005%\u0013\u0002\u03ad\u03ae\u0005",
    "3\u001a\u0002\u03ae\u00c4\u0003\u0002\u0002\u0002\u03af\u03b0\u0005",
    "\u000b\u0006\u0002\u03b0\u03b1\u00051\u0019\u0002\u03b1\u03b2\u0005",
    "\u0013\n\u0002\u03b2\u03b3\u0005\'\u0014\u0002\u03b3\u03b4\u0005)\u0015",
    "\u0002\u03b4\u03b5\u0005\'\u0014\u0002\u03b5\u00c6\u0003\u0002\u0002",
    "\u0002\u03b6\u03b7\u0005\u000b\u0006\u0002\u03b7\u03b8\u00051\u0019",
    "\u0002\u03b8\u03b9\u0005)\u0015\u0002\u03b9\u03ba\u0005\u000b\u0006",
    "\u0002\u03ba\u03bb\u0005%\u0013\u0002\u03bb\u03bc\u0005\u001d\u000f",
    "\u0002\u03bc\u03bd\u0005\u0003\u0002\u0002\u03bd\u03be\u0005\u0019\r",
    "\u0002\u03be\u00c8\u0003\u0002\u0002\u0002\u03bf\u03c0\u0005\u000b\u0006",
    "\u0002\u03c0\u03c1\u00051\u0019\u0002\u03c1\u03c2\u0005)\u0015\u0002",
    "\u03c2\u03c3\u0005%\u0013\u0002\u03c3\u03c4\u0005\u0003\u0002\u0002",
    "\u03c4\u03c5\u0005\u0007\u0004\u0002\u03c5\u03c6\u0005)\u0015\u0002",
    "\u03c6\u00ca\u0003\u0002\u0002\u0002\u03c7\u03c8\u0005\r\u0007\u0002",
    "\u03c8\u03c9\u0005\u0013\n\u0002\u03c9\u03ca\u0005\u0019\r\u0002\u03ca",
    "\u03cb\u0005)\u0015\u0002\u03cb\u03cc\u0005\u000b\u0006\u0002\u03cc",
    "\u03cd\u0005%\u0013\u0002\u03cd\u00cc\u0003\u0002\u0002\u0002\u03ce",
    "\u03cf\u0005\r\u0007\u0002\u03cf\u03d0\u0005\u0013\n\u0002\u03d0\u03d1",
    "\u0005%\u0013\u0002\u03d1\u03d2\u0005\'\u0014\u0002\u03d2\u03d3\u0005",
    ")\u0015\u0002\u03d3\u00ce\u0003\u0002\u0002\u0002\u03d4\u03d5\u0005",
    "\r\u0007\u0002\u03d5\u03d6\u0005\u001f\u0010\u0002\u03d6\u03d7\u0005",
    "%\u0013\u0002\u03d7\u03d8\u0005\u001b\u000e\u0002\u03d8\u03d9\u0005",
    "\u0003\u0002\u0002\u03d9\u03da\u0005)\u0015\u0002\u03da\u00d0\u0003",
    "\u0002\u0002\u0002\u03db\u03dc\u0005\r\u0007\u0002\u03dc\u03dd\u0005",
    "+\u0016\u0002\u03dd\u03de\u0005\'\u0014\u0002\u03de\u03df\u0005\u0013",
    "\n\u0002\u03df\u03e0\u0005\u001f\u0010\u0002\u03e0\u03e1\u0005\u001d",
    "\u000f\u0002\u03e1\u00d2\u0003\u0002\u0002\u0002\u03e2\u03e3\u0005\u000f",
    "\b\u0002\u03e3\u03e4\u0005%\u0013\u0002\u03e4\u03e5\u0005\u001f\u0010",
    "\u0002\u03e5\u03e6\u0005+\u0016\u0002\u03e6\u03e7\u0005!\u0011\u0002",
    "\u03e7\u03e8\u0005\u0013\n\u0002\u03e8\u03e9\u0005\u001d\u000f\u0002",
    "\u03e9\u03ea\u0005\u000f\b\u0002\u03ea\u00d4\u0003\u0002\u0002\u0002",
    "\u03eb\u03ec\u0005\u0011\t\u0002\u03ec\u03ed\u0005\u0003\u0002\u0002",
    "\u03ed\u03ee\u0005\'\u0014\u0002\u03ee\u03ef\u0005\u0011\t\u0002\u03ef",
    "\u00d6\u0003\u0002\u0002\u0002\u03f0\u03f1\u0005\u0011\t\u0002\u03f1",
    "\u03f2\u0005\u001f\u0010\u0002\u03f2\u03f3\u0005+\u0016\u0002\u03f3",
    "\u03f4\u0005%\u0013\u0002\u03f4\u00d8\u0003\u0002\u0002\u0002\u03f5",
    "\u03f6\u0005\u0013\n\u0002\u03f6\u03f7\u0005\u001d\u000f\u0002\u03f7",
    "\u03f8\u0005\t\u0005\u0002\u03f8\u03f9\u0005\u000b\u0006\u0002\u03f9",
    "\u03fa\u00051\u0019\u0002\u03fa\u00da\u0003\u0002\u0002\u0002\u03fb",
    "\u03fc\u0005\u0013\n\u0002\u03fc\u03fd\u0005\u001d\u000f\u0002\u03fd",
    "\u03fe\u0005\'\u0014\u0002\u03fe\u03ff\u0005\u000b\u0006\u0002\u03ff",
    "\u0400\u0005%\u0013\u0002\u0400\u0401\u0005)\u0015\u0002\u0401\u00dc",
    "\u0003\u0002\u0002\u0002\u0402\u0403\u0005\u0013\n\u0002\u0403\u0404",
    "\u0005\u001d\u000f\u0002\u0404\u0405\u0005)\u0015\u0002\u0405\u0406",
    "\u0005\u000b\u0006\u0002\u0406\u0407\u0005%\u0013\u0002\u0407\u0408",
    "\u0005\'\u0014\u0002\u0408\u0409\u0005\u000b\u0006\u0002\u0409\u040a",
    "\u0005\u0007\u0004\u0002\u040a\u040b\u0005)\u0015\u0002\u040b\u040c",
    "\u0005\u0013\n\u0002\u040c\u040d\u0005\u001f\u0010\u0002\u040d\u040e",
    "\u0005\u001d\u000f\u0002\u040e\u00de\u0003\u0002\u0002\u0002\u040f\u0410",
    "\u0005\u0013\n\u0002\u0410\u0411\u0005\'\u0014\u0002\u0411\u0412\u0005",
    "\u001f\u0010\u0002\u0412\u0413\u0005\t\u0005\u0002\u0413\u0414\u0005",
    "\u001f\u0010\u0002\u0414\u0415\u0005/\u0018\u0002\u0415\u00e0\u0003",
    "\u0002\u0002\u0002\u0416\u0417\u0005\u0013\n\u0002\u0417\u0418\u0005",
    "\'\u0014\u0002\u0418\u0419\u0005\u001f\u0010\u0002\u0419\u041a\u0005",
    "3\u001a\u0002\u041a\u041b\u0005\u000b\u0006\u0002\u041b\u041c\u0005",
    "\u0003\u0002\u0002\u041c\u041d\u0005%\u0013\u0002\u041d\u00e2\u0003",
    "\u0002\u0002\u0002\u041e\u041f\u0005\u0019\r\u0002\u041f\u0420\u0005",
    "\u0003\u0002\u0002\u0420\u0421\u0005\'\u0014\u0002\u0421\u0422\u0005",
    ")\u0015\u0002\u0422\u00e4\u0003\u0002\u0002\u0002\u0423\u0424\u0005",
    "\u0019\r\u0002\u0424\u0425\u0005\u000b\u0006\u0002\u0425\u0426\u0005",
    "\'\u0014\u0002\u0426\u0427\u0005\'\u0014\u0002\u0427\u00e6\u0003\u0002",
    "\u0002\u0002\u0428\u0429\u0005\u0019\r\u0002\u0429\u042a\u0005\u0013",
    "\n\u0002\u042a\u042b\u0005\'\u0014\u0002\u042b\u042c\u0005)\u0015\u0002",
    "\u042c\u00e8\u0003\u0002\u0002\u0002\u042d\u042e\u0005\u0019\r\u0002",
    "\u042e\u042f\u0005\u001f\u0010\u0002\u042f\u0430\u0005\u0007\u0004\u0002",
    "\u0430\u0431\u0005\u0003\u0002\u0002\u0431\u0432\u0005)\u0015\u0002",
    "\u0432\u0433\u0005\u0013\n\u0002\u0433\u0434\u0005\u001f\u0010\u0002",
    "\u0434\u0435\u0005\u001d\u000f\u0002\u0435\u00ea\u0003\u0002\u0002\u0002",
    "\u0436\u0437\u0005\u001b\u000e\u0002\u0437\u0438\u0005\u0003\u0002\u0002",
    "\u0438\u0439\u00051\u0019\u0002\u0439\u00ec\u0003\u0002\u0002\u0002",
    "\u043a\u043b\u0005\u001b\u000e\u0002\u043b\u043c\u0005\u0003\u0002\u0002",
    "\u043c\u043d\u00051\u0019\u0002\u043d\u043e\u0005-\u0017\u0002\u043e",
    "\u043f\u0005\u0003\u0002\u0002\u043f\u0440\u0005\u0019\r\u0002\u0440",
    "\u0441\u0005+\u0016\u0002\u0441\u0442\u0005\u000b\u0006\u0002\u0442",
    "\u00ee\u0003\u0002\u0002\u0002\u0443\u0444\u0005\u001b\u000e\u0002\u0444",
    "\u0445\u0005\u0013\n\u0002\u0445\u0446\u0005\u0007\u0004\u0002\u0446",
    "\u0447\u0005%\u0013\u0002\u0447\u0448\u0005\u001f\u0010\u0002\u0448",
    "\u0449\u0005\'\u0014\u0002\u0449\u044a\u0005\u000b\u0006\u0002\u044a",
    "\u044b\u0005\u0007\u0004\u0002\u044b\u044c\u0005\u001f\u0010\u0002\u044c",
    "\u044d\u0005\u001d\u000f\u0002\u044d\u044e\u0005\t\u0005\u0002\u044e",
    "\u044f\u0005\'\u0014\u0002\u044f\u00f0\u0003\u0002\u0002\u0002\u0450",
    "\u0451\u0005\u001b\u000e\u0002\u0451\u0452\u0005\u0013\n\u0002\u0452",
    "\u0453\u0005\u0019\r\u0002\u0453\u0454\u0005\u0019\r\u0002\u0454\u0455",
    "\u0005\u000b\u0006\u0002\u0455\u0456\u0005\u001d\u000f\u0002\u0456\u0457",
    "\u0005\u001d\u000f\u0002\u0457\u0458\u0005\u0013\n\u0002\u0458\u0459",
    "\u0005+\u0016\u0002\u0459\u045a\u0005\u001b\u000e\u0002\u045a\u00f2",
    "\u0003\u0002\u0002\u0002\u045b\u045c\u0005\u001b\u000e\u0002\u045c\u045d",
    "\u0005\u0013\n\u0002\u045d\u045e\u0005\u0019\r\u0002\u045e\u045f\u0005",
    "\u0019\r\u0002\u045f\u0460\u0005\u0013\n\u0002\u0460\u0461\u0005\'\u0014",
    "\u0002\u0461\u0462\u0005\u000b\u0006\u0002\u0462\u0463\u0005\u0007\u0004",
    "\u0002\u0463\u0464\u0005\u001f\u0010\u0002\u0464\u0465\u0005\u001d\u000f",
    "\u0002\u0465\u0466\u0005\t\u0005\u0002\u0466\u0467\u0005\'\u0014\u0002",
    "\u0467\u00f4\u0003\u0002\u0002\u0002\u0468\u0469\u0005\u001b\u000e\u0002",
    "\u0469\u046a\u0005\u0013\n\u0002\u046a\u046b\u0005\u001d\u000f\u0002",
    "\u046b\u00f6\u0003\u0002\u0002\u0002\u046c\u046d\u0005\u001b\u000e\u0002",
    "\u046d\u046e\u0005\u0013\n\u0002\u046e\u046f\u0005\u001d\u000f\u0002",
    "\u046f\u0470\u0005+\u0016\u0002\u0470\u0471\u0005)\u0015\u0002\u0471",
    "\u0472\u0005\u000b\u0006\u0002\u0472\u00f8\u0003\u0002\u0002\u0002\u0473",
    "\u0474\u0005\u001b\u000e\u0002\u0474\u0475\u0005\u001f\u0010\u0002\u0475",
    "\u0476\u0005\u001d\u000f\u0002\u0476\u0477\u0005)\u0015\u0002\u0477",
    "\u0478\u0005\u0011\t\u0002\u0478\u00fa\u0003\u0002\u0002\u0002\u0479",
    "\u047a\u0005\u001d\u000f\u0002\u047a\u047b\u0005\u0003\u0002\u0002\u047b",
    "\u047c\u0005)\u0015\u0002\u047c\u047d\u0005\u0013\n\u0002\u047d\u047e",
    "\u0005\u001f\u0010\u0002\u047e\u047f\u0005\u001d\u000f\u0002\u047f\u0480",
    "\u0005\u0003\u0002\u0002\u0480\u0481\u0005\u0019\r\u0002\u0481\u00fc",
    "\u0003\u0002\u0002\u0002\u0482\u0483\u0005\u001d\u000f\u0002\u0483\u0484",
    "\u0005+\u0016\u0002\u0484\u0485\u0005\u0019\r\u0002\u0485\u0486\u0005",
    "\u0019\r\u0002\u0486\u0487\u0005\u0013\n\u0002\u0487\u0488\u0005\r\u0007",
    "\u0002\u0488\u00fe\u0003\u0002\u0002\u0002\u0489\u048a\u0005\u001f\u0010",
    "\u0002\u048a\u048b\u0005-\u0017\u0002\u048b\u048c\u0005\u000b\u0006",
    "\u0002\u048c\u048d\u0005%\u0013\u0002\u048d\u048e\u0005/\u0018\u0002",
    "\u048e\u048f\u0005%\u0013\u0002\u048f\u0490\u0005\u0013\n\u0002\u0490",
    "\u0491\u0005)\u0015\u0002\u0491\u0492\u0005\u000b\u0006\u0002\u0492",
    "\u0100\u0003\u0002\u0002\u0002\u0493\u0494\u0005!\u0011\u0002\u0494",
    "\u0495\u0005\u0003\u0002\u0002\u0495\u0496\u0005%\u0013\u0002\u0496",
    "\u0497\u0005)\u0015\u0002\u0497\u0498\u0005\u0013\n\u0002\u0498\u0499",
    "\u0005)\u0015\u0002\u0499\u049a\u0005\u0013\n\u0002\u049a\u049b\u0005",
    "\u001f\u0010\u0002\u049b\u049c\u0005\u001d\u000f\u0002\u049c\u0102\u0003",
    "\u0002\u0002\u0002\u049d\u049e\u0005!\u0011\u0002\u049e\u049f\u0005",
    "\u0003\u0002\u0002\u049f\u04a0\u0005%\u0013\u0002\u04a0\u04a1\u0005",
    ")\u0015\u0002\u04a1\u04a2\u0005\u0013\n\u0002\u04a2\u04a3\u0005)\u0015",
    "\u0002\u04a3\u04a4\u0005\u0013\n\u0002\u04a4\u04a5\u0005\u001f\u0010",
    "\u0002\u04a5\u04a6\u0005\u001d\u000f\u0002\u04a6\u04a7\u0005\'\u0014",
    "\u0002\u04a7\u0104\u0003\u0002\u0002\u0002\u04a8\u04a9\u0005!\u0011",
    "\u0002\u04a9\u04aa\u0005%\u0013\u0002\u04aa\u04ab\u0005\u000b\u0006",
    "\u0002\u04ab\u04ac\u0005\u0007\u0004\u0002\u04ac\u04ad\u0005\u0013\n",
    "\u0002\u04ad\u04ae\u0005\'\u0014\u0002\u04ae\u04af\u0005\u0013\n\u0002",
    "\u04af\u04b0\u0005\u001f\u0010\u0002\u04b0\u04b1\u0005\u001d\u000f\u0002",
    "\u04b1\u0106\u0003\u0002\u0002\u0002\u04b2\u04b3\u0005!\u0011\u0002",
    "\u04b3\u04b4\u0005+\u0016\u0002\u04b4\u04b5\u0005%\u0013\u0002\u04b5",
    "\u04b6\u0005\u000f\b\u0002\u04b6\u04b7\u0005\u000b\u0006\u0002\u04b7",
    "\u0108\u0003\u0002\u0002\u0002\u04b8\u04b9\u0005#\u0012\u0002\u04b9",
    "\u04ba\u0005+\u0016\u0002\u04ba\u04bb\u0005\u0003\u0002\u0002\u04bb",
    "\u04bc\u0005%\u0013\u0002\u04bc\u04bd\u0005)\u0015\u0002\u04bd\u04be",
    "\u0005\u000b\u0006\u0002\u04be\u04bf\u0005%\u0013\u0002\u04bf\u010a",
    "\u0003\u0002\u0002\u0002\u04c0\u04c1\u0005%\u0013\u0002\u04c1\u04c2",
    "\u0005\u0003\u0002\u0002\u04c2\u04c3\u0005\u001d\u000f\u0002\u04c3\u04c4",
    "\u0005\u000f\b\u0002\u04c4\u04c5\u0005\u000b\u0006\u0002\u04c5\u010c",
    "\u0003\u0002\u0002\u0002\u04c6\u04c7\u0005%\u0013\u0002\u04c7\u04c8",
    "\u0005\u000b\u0006\u0002\u04c8\u04c9\u0005\u000f\b\u0002\u04c9\u04ca",
    "\u0005\u000b\u0006\u0002\u04ca\u04cb\u00051\u0019\u0002\u04cb\u04cc",
    "\u0005!\u0011\u0002\u04cc\u010e\u0003\u0002\u0002\u0002\u04cd\u04ce",
    "\u0005%\u0013\u0002\u04ce\u04cf\u0005\u0019\r\u0002\u04cf\u04d0\u0005",
    "\u0013\n\u0002\u04d0\u04d1\u0005\u0017\f\u0002\u04d1\u04d2\u0005\u000b",
    "\u0006\u0002\u04d2\u0110\u0003\u0002\u0002\u0002\u04d3\u04d4\u0005%",
    "\u0013\u0002\u04d4\u04d5\u0005\u001f\u0010\u0002\u04d5\u04d6\u0005\u0019",
    "\r\u0002\u04d6\u04d7\u0005\u0019\r\u0002\u04d7\u04d8\u0005+\u0016\u0002",
    "\u04d8\u04d9\u0005!\u0011\u0002\u04d9\u0112\u0003\u0002\u0002\u0002",
    "\u04da\u04db\u0005\'\u0014\u0002\u04db\u04dc\u0005\u000b\u0006\u0002",
    "\u04dc\u04dd\u0005\u0007\u0004\u0002\u04dd\u04de\u0005\u001f\u0010\u0002",
    "\u04de\u04df\u0005\u001d\u000f\u0002\u04df\u04e0\u0005\t\u0005\u0002",
    "\u04e0\u0114\u0003\u0002\u0002\u0002\u04e1\u04e2\u0005\'\u0014\u0002",
    "\u04e2\u04e3\u0005\u000b\u0006\u0002\u04e3\u04e4\u0005)\u0015\u0002",
    "\u04e4\u0116\u0003\u0002\u0002\u0002\u04e5\u04e6\u0005\'\u0014\u0002",
    "\u04e6\u04e7\u0005\u0013\n\u0002\u04e7\u04e8\u0005\u001b\u000e\u0002",
    "\u04e8\u04e9\u0005\u0013\n\u0002\u04e9\u04ea\u0005\u0019\r\u0002\u04ea",
    "\u04eb\u0005\u0003\u0002\u0002\u04eb\u04ec\u0005%\u0013\u0002\u04ec",
    "\u0118\u0003\u0002\u0002\u0002\u04ed\u04ee\u0005\'\u0014\u0002\u04ee",
    "\u04ef\u0005)\u0015\u0002\u04ef\u04f0\u0005\t\u0005\u0002\u04f0\u04f1",
    "\u0005\t\u0005\u0002\u04f1\u04f2\u0005\u000b\u0006\u0002\u04f2\u04f3",
    "\u0005-\u0017\u0002\u04f3\u04f4\u0005\u01b5\u00db\u0002\u04f4\u04f5",
    "\u0005!\u0011\u0002\u04f5\u04f6\u0005\u001f\u0010\u0002\u04f6\u04f7",
    "\u0005!\u0011\u0002\u04f7\u011a\u0003\u0002\u0002\u0002\u04f8\u04f9",
    "\u0005\'\u0014\u0002\u04f9\u04fa\u0005)\u0015\u0002\u04fa\u04fb\u0005",
    "\t\u0005\u0002\u04fb\u04fc\u0005\t\u0005\u0002\u04fc\u04fd\u0005\u000b",
    "\u0006\u0002\u04fd\u04fe\u0005-\u0017\u0002\u04fe\u04ff\u0005\u01b5",
    "\u00db\u0002\u04ff\u0500\u0005\'\u0014\u0002\u0500\u0501\u0005\u0003",
    "\u0002\u0002\u0501\u0502\u0005\u001b\u000e\u0002\u0502\u0503\u0005!",
    "\u0011\u0002\u0503\u011c\u0003\u0002\u0002\u0002\u0504\u0505\u0005\'",
    "\u0014\u0002\u0505\u0506\u0005+\u0016\u0002\u0506\u0507\u0005\u0005",
    "\u0003\u0002\u0507\u0508\u0005!\u0011\u0002\u0508\u0509\u0005\u0003",
    "\u0002\u0002\u0509\u050a\u0005%\u0013\u0002\u050a\u050b\u0005)\u0015",
    "\u0002\u050b\u050c\u0005\u0013\n\u0002\u050c\u050d\u0005)\u0015\u0002",
    "\u050d\u050e\u0005\u0013\n\u0002\u050e\u050f\u0005\u001f\u0010\u0002",
    "\u050f\u0510\u0005\u001d\u000f\u0002\u0510\u011e\u0003\u0002\u0002\u0002",
    "\u0511\u0512\u0005\'\u0014\u0002\u0512\u0513\u0005+\u0016\u0002\u0513",
    "\u0514\u0005\u001b\u000e\u0002\u0514\u0120\u0003\u0002\u0002\u0002\u0515",
    "\u0516\u0005)\u0015\u0002\u0516\u0517\u0005\u0003\u0002\u0002\u0517",
    "\u0518\u0005\u0005\u0003\u0002\u0518\u0519\u0005\u0019\r\u0002\u0519",
    "\u051a\u0005\u000b\u0006\u0002\u051a\u051b\u0005\'\u0014\u0002\u051b",
    "\u051c\u0005!\u0011\u0002\u051c\u051d\u0005\u0003\u0002\u0002\u051d",
    "\u051e\u0005\u0007\u0004\u0002\u051e\u051f\u0005\u000b\u0006\u0002\u051f",
    "\u0122\u0003\u0002\u0002\u0002\u0520\u0521\u0005)\u0015\u0002\u0521",
    "\u0522\u0005\u0011\t\u0002\u0522\u0523\u0005\u0003\u0002\u0002\u0523",
    "\u0524\u0005\u001d\u000f\u0002\u0524\u0124\u0003\u0002\u0002\u0002\u0525",
    "\u0526\u0005)\u0015\u0002\u0526\u0527\u0005\u0013\n\u0002\u0527\u0528",
    "\u0005\u001b\u000e\u0002\u0528\u0529\u0005\u000b\u0006\u0002\u0529\u052a",
    "\u00055\u001b\u0002\u052a\u052b\u0005\u001f\u0010\u0002\u052b\u052c",
    "\u0005\u001d\u000f\u0002\u052c\u052d\u0005\u000b\u0006\u0002\u052d\u0126",
    "\u0003\u0002\u0002\u0002\u052e\u052f\u0005)\u0015\u0002\u052f\u0530",
    "\u0005\u0013\n\u0002\u0530\u0531\u0005\u001b\u000e\u0002\u0531\u0532",
    "\u0005\u000b\u0006\u0002\u0532\u0533\u00055\u001b\u0002\u0533\u0534",
    "\u0005\u001f\u0010\u0002\u0534\u0535\u0005\u001d\u000f\u0002\u0535\u0536",
    "\u0005\u000b\u0006\u0002\u0536\u0537\u0005\u01b5\u00db\u0002\u0537\u0538",
    "\u0005\u0011\t\u0002\u0538\u0539\u0005\u001f\u0010\u0002\u0539\u053a",
    "\u0005+\u0016\u0002\u053a\u053b\u0005%\u0013\u0002\u053b\u0128\u0003",
    "\u0002\u0002\u0002\u053c\u053d\u0005)\u0015\u0002\u053d\u053e\u0005",
    "\u0013\n\u0002\u053e\u053f\u0005\u001b\u000e\u0002\u053f\u0540\u0005",
    "\u000b\u0006\u0002\u0540\u0541\u00055\u001b\u0002\u0541\u0542\u0005",
    "\u001f\u0010\u0002\u0542\u0543\u0005\u001d\u000f\u0002\u0543\u0544\u0005",
    "\u000b\u0006\u0002\u0544\u0545\u0005\u01b5\u00db\u0002\u0545\u0546\u0005",
    "\u001b\u000e\u0002\u0546\u0547\u0005\u0013\n\u0002\u0547\u0548\u0005",
    "\u001d\u000f\u0002\u0548\u0549\u0005+\u0016\u0002\u0549\u054a\u0005",
    ")\u0015\u0002\u054a\u054b\u0005\u000b\u0006\u0002\u054b\u012a\u0003",
    "\u0002\u0002\u0002\u054c\u054d\u0005)\u0015\u0002\u054d\u054e\u0005",
    "%\u0013\u0002\u054e\u054f\u0005\u0013\n\u0002\u054f\u0550\u0005\u001b",
    "\u000e\u0002\u0550\u012c\u0003\u0002\u0002\u0002\u0551\u0552\u0005)",
    "\u0015\u0002\u0552\u0553\u0005\u001f\u0010\u0002\u0553\u012e\u0003\u0002",
    "\u0002\u0002\u0554\u0555\u0005+\u0016\u0002\u0555\u0556\u0005\u001d",
    "\u000f\u0002\u0556\u0557\u0005\u0017\f\u0002\u0557\u0558\u0005\u001d",
    "\u000f\u0002\u0558\u0559\u0005\u001f\u0010\u0002\u0559\u055a\u0005/",
    "\u0018\u0002\u055a\u055b\u0005\u001d\u000f\u0002\u055b\u0130\u0003\u0002",
    "\u0002\u0002\u055c\u055d\u0005-\u0017\u0002\u055d\u055e\u0005\u0003",
    "\u0002\u0002\u055e\u055f\u0005\u0019\r\u0002\u055f\u0560\u0005+\u0016",
    "\u0002\u0560\u0561\u0005\u000b\u0006\u0002\u0561\u0562\u0005\'\u0014",
    "\u0002\u0562\u0132\u0003\u0002\u0002\u0002\u0563\u0564\u0005-\u0017",
    "\u0002\u0564\u0565\u0005\u0003\u0002\u0002\u0565\u0566\u0005%\u0013",
    "\u0002\u0566\u0567\u0005\u01b5\u00db\u0002\u0567\u0568\u0005\'\u0014",
    "\u0002\u0568\u0569\u0005\u0003\u0002\u0002\u0569\u056a\u0005\u001b\u000e",
    "\u0002\u056a\u056b\u0005!\u0011\u0002\u056b\u0134\u0003\u0002\u0002",
    "\u0002\u056c\u056d\u0005-\u0017\u0002\u056d\u056e\u0005\u0003\u0002",
    "\u0002\u056e\u056f\u0005%\u0013\u0002\u056f\u0570\u0005\u01b5\u00db",
    "\u0002\u0570\u0571\u0005!\u0011\u0002\u0571\u0572\u0005\u001f\u0010",
    "\u0002\u0572\u0573\u0005!\u0011\u0002\u0573\u0136\u0003\u0002\u0002",
    "\u0002\u0574\u0575\u0005-\u0017\u0002\u0575\u0576\u0005\u0003\u0002",
    "\u0002\u0576\u0577\u0005%\u0013\u0002\u0577\u0578\u00053\u001a\u0002",
    "\u0578\u0579\u0005\u0013\n\u0002\u0579\u057a\u0005\u001d\u000f\u0002",
    "\u057a\u057b\u0005\u000f\b\u0002\u057b\u0138\u0003\u0002\u0002\u0002",
    "\u057c\u057d\u0005/\u0018\u0002\u057d\u057e\u0005\u000b\u0006\u0002",
    "\u057e\u057f\u0005\u000b\u0006\u0002\u057f\u0580\u0005\u0017\f\u0002",
    "\u0580\u013a\u0003\u0002\u0002\u0002\u0581\u0582\u00053\u001a\u0002",
    "\u0582\u0583\u0005\u000b\u0006\u0002\u0583\u0584\u0005\u0003\u0002\u0002",
    "\u0584\u0585\u0005%\u0013\u0002\u0585\u013c\u0003\u0002\u0002\u0002",
    "\u0586\u0587\u00055\u001b\u0002\u0587\u0588\u0005\u001f\u0010\u0002",
    "\u0588\u0589\u0005\u001d\u000f\u0002\u0589\u058a\u0005\u000b\u0006\u0002",
    "\u058a\u013e\u0003\u0002\u0002\u0002\u058b\u058c\u0005\u0005\u0003\u0002",
    "\u058c\u058d\u0005\u001f\u0010\u0002\u058d\u058e\u0005\u001f\u0010\u0002",
    "\u058e\u058f\u0005\u0019\r\u0002\u058f\u0590\u0005\u000b\u0006\u0002",
    "\u0590\u0591\u0005\u0003\u0002\u0002\u0591\u0592\u0005\u001d\u000f\u0002",
    "\u0592\u0140\u0003\u0002\u0002\u0002\u0593\u0594\u0005\u0005\u0003\u0002",
    "\u0594\u0595\u0005\u001f\u0010\u0002\u0595\u0596\u0005\u001f\u0010\u0002",
    "\u0596\u0597\u0005\u0019\r\u0002\u0597\u0142\u0003\u0002\u0002\u0002",
    "\u0598\u0599\u0005\u0005\u0003\u0002\u0599\u059a\u0005\u0013\n\u0002",
    "\u059a\u059b\u0005)\u0015\u0002\u059b\u0144\u0003\u0002\u0002\u0002",
    "\u059c\u059d\u0005-\u0017\u0002\u059d\u059e\u0005\u0003\u0002\u0002",
    "\u059e\u059f\u0005%\u0013\u0002\u059f\u05a0\u0005\u0005\u0003\u0002",
    "\u05a0\u05a1\u0005\u0013\n\u0002\u05a1\u05a2\u0005)\u0015\u0002\u05a2",
    "\u0146\u0003\u0002\u0002\u0002\u05a3\u05a4\u0005\u0013\n\u0002\u05a4",
    "\u05a5\u0005\u001d\u000f\u0002\u05a5\u05a6\u0005)\u0015\u0002\u05a6",
    "\u05a7\u00073\u0002\u0002\u05a7\u0148\u0003\u0002\u0002\u0002\u05a8",
    "\u05a9\u0005\u0013\n\u0002\u05a9\u05aa\u0005\u001d\u000f\u0002\u05aa",
    "\u05ab\u0005)\u0015\u0002\u05ab\u05ac\u00074\u0002\u0002\u05ac\u014a",
    "\u0003\u0002\u0002\u0002\u05ad\u05ae\u0005\u0013\n\u0002\u05ae\u05af",
    "\u0005\u001d\u000f\u0002\u05af\u05b0\u0005)\u0015\u0002\u05b0\u05b1",
    "\u00076\u0002\u0002\u05b1\u014c\u0003\u0002\u0002\u0002\u05b2\u05b3",
    "\u0005\u0013\n\u0002\u05b3\u05b4\u0005\u001d\u000f\u0002\u05b4\u05b5",
    "\u0005)\u0015\u0002\u05b5\u05b6\u0007:\u0002\u0002\u05b6\u014e\u0003",
    "\u0002\u0002\u0002\u05b7\u05b8\u0005)\u0015\u0002\u05b8\u05b9\u0005",
    "\u0013\n\u0002\u05b9\u05ba\u0005\u001d\u000f\u0002\u05ba\u05bb\u0005",
    "3\u001a\u0002\u05bb\u05bc\u0005\u0013\n\u0002\u05bc\u05bd\u0005\u001d",
    "\u000f\u0002\u05bd\u05be\u0005)\u0015\u0002\u05be\u0150\u0003\u0002",
    "\u0002\u0002\u05bf\u05c0\u0005\'\u0014\u0002\u05c0\u05c1\u0005\u001b",
    "\u000e\u0002\u05c1\u05c2\u0005\u0003\u0002\u0002\u05c2\u05c3\u0005\u0019",
    "\r\u0002\u05c3\u05c4\u0005\u0019\r\u0002\u05c4\u05c5\u0005\u0013\n\u0002",
    "\u05c5\u05c6\u0005\u001d\u000f\u0002\u05c6\u05c7\u0005)\u0015\u0002",
    "\u05c7\u0152\u0003\u0002\u0002\u0002\u05c8\u05c9\u0005\u0013\n\u0002",
    "\u05c9\u05ca\u0005\u001d\u000f\u0002\u05ca\u05cb\u0005)\u0015\u0002",
    "\u05cb\u0154\u0003\u0002\u0002\u0002\u05cc\u05cd\u0005\u0013\n\u0002",
    "\u05cd\u05ce\u0005\u001d\u000f\u0002\u05ce\u05cf\u0005)\u0015\u0002",
    "\u05cf\u05d0\u0005\u000b\u0006\u0002\u05d0\u05d1\u0005\u000f\b\u0002",
    "\u05d1\u05d2\u0005\u000b\u0006\u0002\u05d2\u05d3\u0005%\u0013\u0002",
    "\u05d3\u0156\u0003\u0002\u0002\u0002\u05d4\u05d5\u0005\u0005\u0003\u0002",
    "\u05d5\u05d6\u0005\u0013\n\u0002\u05d6\u05d7\u0005\u000f\b\u0002\u05d7",
    "\u05d8\u0005\u0013\n\u0002\u05d8\u05d9\u0005\u001d\u000f\u0002\u05d9",
    "\u05da\u0005)\u0015\u0002\u05da\u0158\u0003\u0002\u0002\u0002\u05db",
    "\u05dc\u0005\r\u0007\u0002\u05dc\u05dd\u0005\u0019\r\u0002\u05dd\u05de",
    "\u0005\u001f\u0010\u0002\u05de\u05df\u0005\u0003\u0002\u0002\u05df\u05e0",
    "\u0005)\u0015\u0002\u05e0\u05e1\u00076\u0002\u0002\u05e1\u015a\u0003",
    "\u0002\u0002\u0002\u05e2\u05e3\u0005\r\u0007\u0002\u05e3\u05e4\u0005",
    "\u0019\r\u0002\u05e4\u05e5\u0005\u001f\u0010\u0002\u05e5\u05e6\u0005",
    "\u0003\u0002\u0002\u05e6\u05e7\u0005)\u0015\u0002\u05e7\u05e8\u0007",
    ":\u0002\u0002\u05e8\u015c\u0003\u0002\u0002\u0002\u05e9\u05ea\u0005",
    "%\u0013\u0002\u05ea\u05eb\u0005\u000b\u0006\u0002\u05eb\u05ec\u0005",
    "\u0003\u0002\u0002\u05ec\u05ed\u0005\u0019\r\u0002\u05ed\u015e\u0003",
    "\u0002\u0002\u0002\u05ee\u05ef\u0005\r\u0007\u0002\u05ef\u05f0\u0005",
    "\u0019\r\u0002\u05f0\u05f1\u0005\u001f\u0010\u0002\u05f1\u05f2\u0005",
    "\u0003\u0002\u0002\u05f2\u05f3\u0005)\u0015\u0002\u05f3\u0160\u0003",
    "\u0002\u0002\u0002\u05f4\u05f5\u0005\t\u0005\u0002\u05f5\u05f6\u0005",
    "\u001f\u0010\u0002\u05f6\u05f7\u0005+\u0016\u0002\u05f7\u05f8\u0005",
    "\u0005\u0003\u0002\u05f8\u05f9\u0005\u0019\r\u0002\u05f9\u05fa\u0005",
    "\u000b\u0006\u0002\u05fa\u0162\u0003\u0002\u0002\u0002\u05fb\u05fc\u0005",
    "\u001d\u000f\u0002\u05fc\u05fd\u0005+\u0016\u0002\u05fd\u05fe\u0005",
    "\u001b\u000e\u0002\u05fe\u05ff\u0005\u000b\u0006\u0002\u05ff\u0600\u0005",
    "%\u0013\u0002\u0600\u0601\u0005\u0013\n\u0002\u0601\u0602\u0005\u0007",
    "\u0004\u0002\u0602\u0164\u0003\u0002\u0002\u0002\u0603\u0604\u0005\t",
    "\u0005\u0002\u0604\u0605\u0005\u000b\u0006\u0002\u0605\u0606\u0005\u0007",
    "\u0004\u0002\u0606\u0607\u0005\u0013\n\u0002\u0607\u0608\u0005\u001b",
    "\u000e\u0002\u0608\u0609\u0005\u0003\u0002\u0002\u0609\u060a\u0005\u0019",
    "\r\u0002\u060a\u0166\u0003\u0002\u0002\u0002\u060b\u060c\u0005\u0007",
    "\u0004\u0002\u060c\u060d\u0005\u0011\t\u0002\u060d\u060e\u0005\u0003",
    "\u0002\u0002\u060e\u060f\u0005%\u0013\u0002\u060f\u0168\u0003\u0002",
    "\u0002\u0002\u0610\u0611\u0005-\u0017\u0002\u0611\u0612\u0005\u0003",
    "\u0002\u0002\u0612\u0613\u0005%\u0013\u0002\u0613\u0614\u0005\u0007",
    "\u0004\u0002\u0614\u0615\u0005\u0011\t\u0002\u0615\u0616\u0005\u0003",
    "\u0002\u0002\u0616\u0617\u0005%\u0013\u0002\u0617\u016a\u0003\u0002",
    "\u0002\u0002\u0618\u0619\u0005\u001d\u000f\u0002\u0619\u061a\u0005\u0007",
    "\u0004\u0002\u061a\u061b\u0005\u0011\t\u0002\u061b\u061c\u0005\u0003",
    "\u0002\u0002\u061c\u061d\u0005%\u0013\u0002\u061d\u016c\u0003\u0002",
    "\u0002\u0002\u061e\u061f\u0005\u001d\u000f\u0002\u061f\u0620\u0005-",
    "\u0017\u0002\u0620\u0621\u0005\u0003\u0002\u0002\u0621\u0622\u0005%",
    "\u0013\u0002\u0622\u0623\u0005\u0007\u0004\u0002\u0623\u0624\u0005\u0011",
    "\t\u0002\u0624\u0625\u0005\u0003\u0002\u0002\u0625\u0626\u0005%\u0013",
    "\u0002\u0626\u016e\u0003\u0002\u0002\u0002\u0627\u0628\u0005\t\u0005",
    "\u0002\u0628\u0629\u0005\u0003\u0002\u0002\u0629\u062a\u0005)\u0015",
    "\u0002\u062a\u062b\u0005\u000b\u0006\u0002\u062b\u0170\u0003\u0002\u0002",
    "\u0002\u062c\u062d\u0005)\u0015\u0002\u062d\u062e\u0005\u0013\n\u0002",
    "\u062e\u062f\u0005\u001b\u000e\u0002\u062f\u0630\u0005\u000b\u0006\u0002",
    "\u0630\u0172\u0003\u0002\u0002\u0002\u0631\u0632\u0005)\u0015\u0002",
    "\u0632\u0633\u0005\u0013\n\u0002\u0633\u0634\u0005\u001b\u000e\u0002",
    "\u0634\u0635\u0005\u000b\u0006\u0002\u0635\u0636\u0005)\u0015\u0002",
    "\u0636\u0637\u00055\u001b\u0002\u0637\u0174\u0003\u0002\u0002\u0002",
    "\u0638\u0639\u0005)\u0015\u0002\u0639\u063a\u0005\u0013\n\u0002\u063a",
    "\u063b\u0005\u001b\u000e\u0002\u063b\u063c\u0005\u000b\u0006\u0002\u063c",
    "\u063d\u0005\'\u0014\u0002\u063d\u063e\u0005)\u0015\u0002\u063e\u063f",
    "\u0005\u0003\u0002\u0002\u063f\u0640\u0005\u001b\u000e\u0002\u0640\u0641",
    "\u0005!\u0011\u0002\u0641\u0176\u0003\u0002\u0002\u0002\u0642\u0643",
    "\u0005)\u0015\u0002\u0643\u0644\u0005\u0013\n\u0002\u0644\u0645\u0005",
    "\u001b\u000e\u0002\u0645\u0646\u0005\u000b\u0006\u0002\u0646\u0647\u0005",
    "\'\u0014\u0002\u0647\u0648\u0005)\u0015\u0002\u0648\u0649\u0005\u0003",
    "\u0002\u0002\u0649\u064a\u0005\u001b\u000e\u0002\u064a\u064b\u0005!",
    "\u0011\u0002\u064b\u064c\u0005)\u0015\u0002\u064c\u064d\u00055\u001b",
    "\u0002\u064d\u0178\u0003\u0002\u0002\u0002\u064e\u064f\u0005)\u0015",
    "\u0002\u064f\u0650\u0005\u000b\u0006\u0002\u0650\u0651\u00051\u0019",
    "\u0002\u0651\u0652\u0005)\u0015\u0002\u0652\u017a\u0003\u0002\u0002",
    "\u0002\u0653\u0654\u0005\u0005\u0003\u0002\u0654\u0655\u0005\u0013\n",
    "\u0002\u0655\u0656\u0005\u001d\u000f\u0002\u0656\u0657\u0005\u0003\u0002",
    "\u0002\u0657\u0658\u0005%\u0013\u0002\u0658\u0659\u00053\u001a\u0002",
    "\u0659\u017c\u0003\u0002\u0002\u0002\u065a\u065b\u0005-\u0017\u0002",
    "\u065b\u065c\u0005\u0003\u0002\u0002\u065c\u065d\u0005%\u0013\u0002",
    "\u065d\u065e\u0005\u0005\u0003\u0002\u065e\u065f\u0005\u0013\n\u0002",
    "\u065f\u0660\u0005\u001d\u000f\u0002\u0660\u0661\u0005\u0003\u0002\u0002",
    "\u0661\u0662\u0005%\u0013\u0002\u0662\u0663\u00053\u001a\u0002\u0663",
    "\u017e\u0003\u0002\u0002\u0002\u0664\u0665\u0005\u0005\u0003\u0002\u0665",
    "\u0666\u0005\u0019\r\u0002\u0666\u0667\u0005\u001f\u0010\u0002\u0667",
    "\u0668\u0005\u0005\u0003\u0002\u0668\u0180\u0003\u0002\u0002\u0002\u0669",
    "\u066a\u0005\u0005\u0003\u0002\u066a\u066b\u00053\u001a\u0002\u066b",
    "\u066c\u0005)\u0015\u0002\u066c\u066d\u0005\u000b\u0006\u0002\u066d",
    "\u066e\u0005\u0003\u0002\u0002\u066e\u0182\u0003\u0002\u0002\u0002\u066f",
    "\u0670\u0005\u0013\n\u0002\u0670\u0671\u0005\u001d\u000f\u0002\u0671",
    "\u0672\u0005\u000b\u0006\u0002\u0672\u0673\u0005)\u0015\u0002\u0673",
    "\u0674\u00076\u0002\u0002\u0674\u0184\u0003\u0002\u0002\u0002\u0675",
    "\u0676\u0007\u0080\u0002\u0002\u0676\u0186\u0003\u0002\u0002\u0002\u0677",
    "\u0678\u0007#\u0002\u0002\u0678\u0679\u0007\u0080\u0002\u0002\u0679",
    "\u0188\u0003\u0002\u0002\u0002\u067a\u067b\u0007\u0080\u0002\u0002\u067b",
    "\u067c\u0007,\u0002\u0002\u067c\u018a\u0003\u0002\u0002\u0002\u067d",
    "\u067e\u0007#\u0002\u0002\u067e\u067f\u0007\u0080\u0002\u0002\u067f",
    "\u0680\u0007,\u0002\u0002\u0680\u018c\u0003\u0002\u0002\u0002\u0681",
    "\u0682\u0005\u0193\u00ca\u0002\u0682\u0683\u0005\u0193\u00ca\u0002\u0683",
    "\u018e\u0003\u0002\u0002\u0002\u0684\u0685\u0007<\u0002\u0002\u0685",
    "\u0686\u0007?\u0002\u0002\u0686\u0190\u0003\u0002\u0002\u0002\u0687",
    "\u0688\u0007?\u0002\u0002\u0688\u0192\u0003\u0002\u0002\u0002\u0689",
    "\u068a\u0007<\u0002\u0002\u068a\u0194\u0003\u0002\u0002\u0002\u068b",
    "\u068c\u0007=\u0002\u0002\u068c\u0196\u0003\u0002\u0002\u0002\u068d",
    "\u068e\u0007.\u0002\u0002\u068e\u0198\u0003\u0002\u0002\u0002\u068f",
    "\u0690\u0005\u01b7\u00dc\u0002\u0690\u0691\u0005\u01b7\u00dc\u0002\u0691",
    "\u019a\u0003\u0002\u0002\u0002\u0692\u0693\u0007>\u0002\u0002\u0693",
    "\u069b\u0007@\u0002\u0002\u0694\u0695\u0007#\u0002\u0002\u0695\u069b",
    "\u0007?\u0002\u0002\u0696\u0697\u0007\u0080\u0002\u0002\u0697\u069b",
    "\u0007?\u0002\u0002\u0698\u0699\u0007`\u0002\u0002\u0699\u069b\u0007",
    "?\u0002\u0002\u069a\u0692\u0003\u0002\u0002\u0002\u069a\u0694\u0003",
    "\u0002\u0002\u0002\u069a\u0696\u0003\u0002\u0002\u0002\u069a\u0698\u0003",
    "\u0002\u0002\u0002\u069b\u019c\u0003\u0002\u0002\u0002\u069c\u069d\u0007",
    ">\u0002\u0002\u069d\u019e\u0003\u0002\u0002\u0002\u069e\u069f\u0007",
    ">\u0002\u0002\u069f\u06a0\u0007?\u0002\u0002\u06a0\u01a0\u0003\u0002",
    "\u0002\u0002\u06a1\u06a2\u0007@\u0002\u0002\u06a2\u01a2\u0003\u0002",
    "\u0002\u0002\u06a3\u06a4\u0007@\u0002\u0002\u06a4\u06a5\u0007?\u0002",
    "\u0002\u06a5\u01a4\u0003\u0002\u0002\u0002\u06a6\u06a7\u0007*\u0002",
    "\u0002\u06a7\u01a6\u0003\u0002\u0002\u0002\u06a8\u06a9\u0007+\u0002",
    "\u0002\u06a9\u01a8\u0003\u0002\u0002\u0002\u06aa\u06ab\u0007-\u0002",
    "\u0002\u06ab\u01aa\u0003\u0002\u0002\u0002\u06ac\u06ad\u0007/\u0002",
    "\u0002\u06ad\u01ac\u0003\u0002\u0002\u0002\u06ae\u06af\u0007,\u0002",
    "\u0002\u06af\u01ae\u0003\u0002\u0002\u0002\u06b0\u06b1\u00071\u0002",
    "\u0002\u06b1\u01b0\u0003\u0002\u0002\u0002\u06b2\u06b3\u0007\'\u0002",
    "\u0002\u06b3\u01b2\u0003\u0002\u0002\u0002\u06b4\u06b5\u00070\u0002",
    "\u0002\u06b5\u01b4\u0003\u0002\u0002\u0002\u06b6\u06b7\u0007a\u0002",
    "\u0002\u06b7\u01b6\u0003\u0002\u0002\u0002\u06b8\u06b9\u0007~\u0002",
    "\u0002\u06b9\u01b8\u0003\u0002\u0002\u0002\u06ba\u06bb\u0007)\u0002",
    "\u0002\u06bb\u01ba\u0003\u0002\u0002\u0002\u06bc\u06bd\u0007$\u0002",
    "\u0002\u06bd\u01bc\u0003\u0002\u0002\u0002\u06be\u06c0\u0005\u01bf\u00e0",
    "\u0002\u06bf\u06be\u0003\u0002\u0002\u0002\u06c0\u06c1\u0003\u0002\u0002",
    "\u0002\u06c1\u06bf\u0003\u0002\u0002\u0002\u06c1\u06c2\u0003\u0002\u0002",
    "\u0002\u06c2\u01be\u0003\u0002\u0002\u0002\u06c3\u06c4\u00042;\u0002",
    "\u06c4\u01c0\u0003\u0002\u0002\u0002\u06c5\u06c7\u00042;\u0002\u06c6",
    "\u06c5\u0003\u0002\u0002\u0002\u06c7\u06c8\u0003\u0002\u0002\u0002\u06c8",
    "\u06c6\u0003\u0002\u0002\u0002\u06c8\u06c9\u0003\u0002\u0002\u0002\u06c9",
    "\u06ca\u0003\u0002\u0002\u0002\u06ca\u06ce\u00070\u0002\u0002\u06cb",
    "\u06cd\u00042;\u0002\u06cc\u06cb\u0003\u0002\u0002\u0002\u06cd\u06d0",
    "\u0003\u0002\u0002\u0002\u06ce\u06cc\u0003\u0002\u0002\u0002\u06ce\u06cf",
    "\u0003\u0002\u0002\u0002\u06cf\u06d2\u0003\u0002\u0002\u0002\u06d0\u06ce",
    "\u0003\u0002\u0002\u0002\u06d1\u06d3\u0005\u01d1\u00e9\u0002\u06d2\u06d1",
    "\u0003\u0002\u0002\u0002\u06d2\u06d3\u0003\u0002\u0002\u0002\u06d3\u06e4",
    "\u0003\u0002\u0002\u0002\u06d4\u06d6\u00070\u0002\u0002\u06d5\u06d7",
    "\u00042;\u0002\u06d6\u06d5\u0003\u0002\u0002\u0002\u06d7\u06d8\u0003",
    "\u0002\u0002\u0002\u06d8\u06d6\u0003\u0002\u0002\u0002\u06d8\u06d9\u0003",
    "\u0002\u0002\u0002\u06d9\u06db\u0003\u0002\u0002\u0002\u06da\u06dc\u0005",
    "\u01d1\u00e9\u0002\u06db\u06da\u0003\u0002\u0002\u0002\u06db\u06dc\u0003",
    "\u0002\u0002\u0002\u06dc\u06e4\u0003\u0002\u0002\u0002\u06dd\u06df\u0004",
    "2;\u0002\u06de\u06dd\u0003\u0002\u0002\u0002\u06df\u06e0\u0003\u0002",
    "\u0002\u0002\u06e0\u06de\u0003\u0002\u0002\u0002\u06e0\u06e1\u0003\u0002",
    "\u0002\u0002\u06e1\u06e2\u0003\u0002\u0002\u0002\u06e2\u06e4\u0005\u01d1",
    "\u00e9\u0002\u06e3\u06c6\u0003\u0002\u0002\u0002\u06e3\u06d4\u0003\u0002",
    "\u0002\u0002\u06e3\u06de\u0003\u0002\u0002\u0002\u06e4\u01c2\u0003\u0002",
    "\u0002\u0002\u06e5\u06e6\u00071\u0002\u0002\u06e6\u06e7\u0007,\u0002",
    "\u0002\u06e7\u06eb\u0003\u0002\u0002\u0002\u06e8\u06ea\u000b\u0002\u0002",
    "\u0002\u06e9\u06e8\u0003\u0002\u0002\u0002\u06ea\u06ed\u0003\u0002\u0002",
    "\u0002\u06eb\u06ec\u0003\u0002\u0002\u0002\u06eb\u06e9\u0003\u0002\u0002",
    "\u0002\u06ec\u06ee\u0003\u0002\u0002\u0002\u06ed\u06eb\u0003\u0002\u0002",
    "\u0002\u06ee\u06ef\u0007,\u0002\u0002\u06ef\u06f0\u00071\u0002\u0002",
    "\u06f0\u06f1\u0003\u0002\u0002\u0002\u06f1\u06f2\b\u00e2\u0002\u0002",
    "\u06f2\u01c4\u0003\u0002\u0002\u0002\u06f3\u06f4\u0007/\u0002\u0002",
    "\u06f4\u06f5\u0007/\u0002\u0002\u06f5\u06f9\u0003\u0002\u0002\u0002",
    "\u06f6\u06f8\n\u001c\u0002\u0002\u06f7\u06f6\u0003\u0002\u0002\u0002",
    "\u06f8\u06fb\u0003\u0002\u0002\u0002\u06f9\u06f7\u0003\u0002\u0002\u0002",
    "\u06f9\u06fa\u0003\u0002\u0002\u0002\u06fa\u06fc\u0003\u0002\u0002\u0002",
    "\u06fb\u06f9\u0003\u0002\u0002\u0002\u06fc\u06fd\b\u00e3\u0002\u0002",
    "\u06fd\u01c6\u0003\u0002\u0002\u0002\u06fe\u06ff\u0005\u01c9\u00e5\u0002",
    "\u06ff\u01c8\u0003\u0002\u0002\u0002\u0700\u0706\t\u001d\u0002\u0002",
    "\u0701\u0705\t\u001e\u0002\u0002\u0702\u0705\u0005\u01bf\u00e0\u0002",
    "\u0703\u0705\u0007a\u0002\u0002\u0704\u0701\u0003\u0002\u0002\u0002",
    "\u0704\u0702\u0003\u0002\u0002\u0002\u0704\u0703\u0003\u0002\u0002\u0002",
    "\u0705\u0708\u0003\u0002\u0002\u0002\u0706\u0704\u0003\u0002\u0002\u0002",
    "\u0706\u0707\u0003\u0002\u0002\u0002\u0707\u01ca\u0003\u0002\u0002\u0002",
    "\u0708\u0706\u0003\u0002\u0002\u0002\u0709\u070a\u0004\u0003!\u0002",
    "\u070a\u01cc\u0003\u0002\u0002\u0002\u070b\u070c\u0004\u0082\u00a1\u0002",
    "\u070c\u01ce\u0003\u0002\u0002\u0002\u070d\u0712\u0005\u01b9\u00dd\u0002",
    "\u070e\u0711\u0005\u01d5\u00eb\u0002\u070f\u0711\n\u001f\u0002\u0002",
    "\u0710\u070e\u0003\u0002\u0002\u0002\u0710\u070f\u0003\u0002\u0002\u0002",
    "\u0711\u0714\u0003\u0002\u0002\u0002\u0712\u0710\u0003\u0002\u0002\u0002",
    "\u0712\u0713\u0003\u0002\u0002\u0002\u0713\u0715\u0003\u0002\u0002\u0002",
    "\u0714\u0712\u0003\u0002\u0002\u0002\u0715\u0716\u0005\u01b9\u00dd\u0002",
    "\u0716\u01d0\u0003\u0002\u0002\u0002\u0717\u0719\t\u0006\u0002\u0002",
    "\u0718\u071a\t \u0002\u0002\u0719\u0718\u0003\u0002\u0002\u0002\u0719",
    "\u071a\u0003\u0002\u0002\u0002\u071a\u071c\u0003\u0002\u0002\u0002\u071b",
    "\u071d\u00042;\u0002\u071c\u071b\u0003\u0002\u0002\u0002\u071d\u071e",
    "\u0003\u0002\u0002\u0002\u071e\u071c\u0003\u0002\u0002\u0002\u071e\u071f",
    "\u0003\u0002\u0002\u0002\u071f\u01d2\u0003\u0002\u0002\u0002\u0720\u0721",
    "\t!\u0002\u0002\u0721\u01d4\u0003\u0002\u0002\u0002\u0722\u0723\u0007",
    "^\u0002\u0002\u0723\u0727\t\"\u0002\u0002\u0724\u0727\u0005\u01d9\u00ed",
    "\u0002\u0725\u0727\u0005\u01d7\u00ec\u0002\u0726\u0722\u0003\u0002\u0002",
    "\u0002\u0726\u0724\u0003\u0002\u0002\u0002\u0726\u0725\u0003\u0002\u0002",
    "\u0002\u0727\u01d6\u0003\u0002\u0002\u0002\u0728\u0729\u0007^\u0002",
    "\u0002\u0729\u072a\u000425\u0002\u072a\u072b\u000429\u0002\u072b\u0732",
    "\u000429\u0002\u072c\u072d\u0007^\u0002\u0002\u072d\u072e\u000429\u0002",
    "\u072e\u0732\u000429\u0002\u072f\u0730\u0007^\u0002\u0002\u0730\u0732",
    "\u000429\u0002\u0731\u0728\u0003\u0002\u0002\u0002\u0731\u072c\u0003",
    "\u0002\u0002\u0002\u0731\u072f\u0003\u0002\u0002\u0002\u0732\u01d8\u0003",
    "\u0002\u0002\u0002\u0733\u0734\u0007^\u0002\u0002\u0734\u0735\u0007",
    "w\u0002\u0002\u0735\u0736\u0005\u01d3\u00ea\u0002\u0736\u0737\u0005",
    "\u01d3\u00ea\u0002\u0737\u0738\u0005\u01d3\u00ea\u0002\u0738\u0739\u0005",
    "\u01d3\u00ea\u0002\u0739\u01da\u0003\u0002\u0002\u0002\u073a\u073b\u0007",
    "\"\u0002\u0002\u073b\u073c\u0003\u0002\u0002\u0002\u073c\u073d\b\u00ee",
    "\u0002\u0002\u073d\u01dc\u0003\u0002\u0002\u0002\u073e\u0741\u0005\u01cb",
    "\u00e6\u0002\u073f\u0741\u0005\u01cd\u00e7\u0002\u0740\u073e\u0003\u0002",
    "\u0002\u0002\u0740\u073f\u0003\u0002\u0002\u0002\u0741\u0742\u0003\u0002",
    "\u0002\u0002\u0742\u0740\u0003\u0002\u0002\u0002\u0742\u0743\u0003\u0002",
    "\u0002\u0002\u0743\u0744\u0003\u0002\u0002\u0002\u0744\u0745\b\u00ef",
    "\u0002\u0002\u0745\u01de\u0003\u0002\u0002\u0002\u0746\u0747\u000b\u0002",
    "\u0002\u0002\u0747\u0748\u0003\u0002\u0002\u0002\u0748\u0749\b\u00f0",
    "\u0002\u0002\u0749\u01e0\u0003\u0002\u0002\u0002\u0018\u0002\u069a\u06c1",
    "\u06c8\u06ce\u06d2\u06d8\u06db\u06e0\u06e3\u06eb\u06f9\u0704\u0706\u0710",
    "\u0712\u0719\u071e\u0726\u0731\u0740\u0742\u0003\b\u0002\u0002"].join("");



function SQLLexer(input) {
    //NOTE: changed by SIREn Solutions
    var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
    var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });
    // end changes

	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

SQLLexer.prototype = Object.create(antlr4.Lexer.prototype);
SQLLexer.prototype.constructor = SQLLexer;

SQLLexer.EOF = antlr4.Token.EOF;
SQLLexer.AS = 1;
SQLLexer.ALL = 2;
SQLLexer.AND = 3;
SQLLexer.ANY = 4;
SQLLexer.ASYMMETRIC = 5;
SQLLexer.ASC = 6;
SQLLexer.BOTH = 7;
SQLLexer.CASE = 8;
SQLLexer.CAST = 9;
SQLLexer.CREATE = 10;
SQLLexer.CROSS = 11;
SQLLexer.DESC = 12;
SQLLexer.DISTINCT = 13;
SQLLexer.END = 14;
SQLLexer.ELSE = 15;
SQLLexer.EXCEPT = 16;
SQLLexer.FALSE = 17;
SQLLexer.FULL = 18;
SQLLexer.FROM = 19;
SQLLexer.GROUP = 20;
SQLLexer.HAVING = 21;
SQLLexer.ILIKE = 22;
SQLLexer.IN = 23;
SQLLexer.INNER = 24;
SQLLexer.INTERSECT = 25;
SQLLexer.INTO = 26;
SQLLexer.IS = 27;
SQLLexer.JOIN = 28;
SQLLexer.LEADING = 29;
SQLLexer.LEFT = 30;
SQLLexer.LIKE = 31;
SQLLexer.LIMIT = 32;
SQLLexer.NATURAL = 33;
SQLLexer.NOT = 34;
SQLLexer.NULL = 35;
SQLLexer.ON = 36;
SQLLexer.OUTER = 37;
SQLLexer.OR = 38;
SQLLexer.ORDER = 39;
SQLLexer.RIGHT = 40;
SQLLexer.SELECT = 41;
SQLLexer.SOME = 42;
SQLLexer.SYMMETRIC = 43;
SQLLexer.TABLE = 44;
SQLLexer.THEN = 45;
SQLLexer.TRAILING = 46;
SQLLexer.TRUE = 47;
SQLLexer.UNION = 48;
SQLLexer.UNIQUE = 49;
SQLLexer.USING = 50;
SQLLexer.WHEN = 51;
SQLLexer.WHERE = 52;
SQLLexer.WITH = 53;
SQLLexer.AVG = 54;
SQLLexer.BETWEEN = 55;
SQLLexer.BY = 56;
SQLLexer.CENTURY = 57;
SQLLexer.CHARACTER = 58;
SQLLexer.COLLECT = 59;
SQLLexer.COALESCE = 60;
SQLLexer.COLUMN = 61;
SQLLexer.COUNT = 62;
SQLLexer.CUBE = 63;
SQLLexer.DAY = 64;
SQLLexer.DEC = 65;
SQLLexer.DECADE = 66;
SQLLexer.DOW = 67;
SQLLexer.DOY = 68;
SQLLexer.DROP = 69;
SQLLexer.EPOCH = 70;
SQLLexer.EVERY = 71;
SQLLexer.EXISTS = 72;
SQLLexer.EXTERNAL = 73;
SQLLexer.EXTRACT = 74;
SQLLexer.FILTER = 75;
SQLLexer.FIRST = 76;
SQLLexer.FORMAT = 77;
SQLLexer.FUSION = 78;
SQLLexer.GROUPING = 79;
SQLLexer.HASH = 80;
SQLLexer.HOUR = 81;
SQLLexer.INDEX = 82;
SQLLexer.INSERT = 83;
SQLLexer.INTERSECTION = 84;
SQLLexer.ISODOW = 85;
SQLLexer.ISOYEAR = 86;
SQLLexer.LAST = 87;
SQLLexer.LESS = 88;
SQLLexer.LIST = 89;
SQLLexer.LOCATION = 90;
SQLLexer.MAX = 91;
SQLLexer.MAXVALUE = 92;
SQLLexer.MICROSECONDS = 93;
SQLLexer.MILLENNIUM = 94;
SQLLexer.MILLISECONDS = 95;
SQLLexer.MIN = 96;
SQLLexer.MINUTE = 97;
SQLLexer.MONTH = 98;
SQLLexer.NATIONAL = 99;
SQLLexer.NULLIF = 100;
SQLLexer.OVERWRITE = 101;
SQLLexer.PARTITION = 102;
SQLLexer.PARTITIONS = 103;
SQLLexer.PRECISION = 104;
SQLLexer.PURGE = 105;
SQLLexer.QUARTER = 106;
SQLLexer.RANGE = 107;
SQLLexer.REGEXP = 108;
SQLLexer.RLIKE = 109;
SQLLexer.ROLLUP = 110;
SQLLexer.SECOND = 111;
SQLLexer.SET = 112;
SQLLexer.SIMILAR = 113;
SQLLexer.STDDEV_POP = 114;
SQLLexer.STDDEV_SAMP = 115;
SQLLexer.SUBPARTITION = 116;
SQLLexer.SUM = 117;
SQLLexer.TABLESPACE = 118;
SQLLexer.THAN = 119;
SQLLexer.TIMEZONE = 120;
SQLLexer.TIMEZONE_HOUR = 121;
SQLLexer.TIMEZONE_MINUTE = 122;
SQLLexer.TRIM = 123;
SQLLexer.TO = 124;
SQLLexer.UNKNOWN = 125;
SQLLexer.VALUES = 126;
SQLLexer.VAR_SAMP = 127;
SQLLexer.VAR_POP = 128;
SQLLexer.VARYING = 129;
SQLLexer.WEEK = 130;
SQLLexer.YEAR = 131;
SQLLexer.ZONE = 132;
SQLLexer.BOOLEAN = 133;
SQLLexer.BOOL = 134;
SQLLexer.BIT = 135;
SQLLexer.VARBIT = 136;
SQLLexer.INT1 = 137;
SQLLexer.INT2 = 138;
SQLLexer.INT4 = 139;
SQLLexer.INT8 = 140;
SQLLexer.TINYINT = 141;
SQLLexer.SMALLINT = 142;
SQLLexer.INT = 143;
SQLLexer.INTEGER = 144;
SQLLexer.BIGINT = 145;
SQLLexer.FLOAT4 = 146;
SQLLexer.FLOAT8 = 147;
SQLLexer.REAL = 148;
SQLLexer.FLOAT = 149;
SQLLexer.DOUBLE = 150;
SQLLexer.NUMERIC = 151;
SQLLexer.DECIMAL = 152;
SQLLexer.CHAR = 153;
SQLLexer.VARCHAR = 154;
SQLLexer.NCHAR = 155;
SQLLexer.NVARCHAR = 156;
SQLLexer.DATE = 157;
SQLLexer.TIME = 158;
SQLLexer.TIMETZ = 159;
SQLLexer.TIMESTAMP = 160;
SQLLexer.TIMESTAMPTZ = 161;
SQLLexer.TEXT = 162;
SQLLexer.BINARY = 163;
SQLLexer.VARBINARY = 164;
SQLLexer.BLOB = 165;
SQLLexer.BYTEA = 166;
SQLLexer.INET4 = 167;
SQLLexer.Similar_To = 168;
SQLLexer.Not_Similar_To = 169;
SQLLexer.Similar_To_Case_Insensitive = 170;
SQLLexer.Not_Similar_To_Case_Insensitive = 171;
SQLLexer.CAST_EXPRESSION = 172;
SQLLexer.ASSIGN = 173;
SQLLexer.EQUAL = 174;
SQLLexer.COLON = 175;
SQLLexer.SEMI_COLON = 176;
SQLLexer.COMMA = 177;
SQLLexer.CONCATENATION_OPERATOR = 178;
SQLLexer.NOT_EQUAL = 179;
SQLLexer.LTH = 180;
SQLLexer.LEQ = 181;
SQLLexer.GTH = 182;
SQLLexer.GEQ = 183;
SQLLexer.LEFT_PAREN = 184;
SQLLexer.RIGHT_PAREN = 185;
SQLLexer.PLUS = 186;
SQLLexer.MINUS = 187;
SQLLexer.MULTIPLY = 188;
SQLLexer.DIVIDE = 189;
SQLLexer.MODULAR = 190;
SQLLexer.DOT = 191;
SQLLexer.UNDERLINE = 192;
SQLLexer.VERTICAL_BAR = 193;
SQLLexer.QUOTE = 194;
SQLLexer.DOUBLE_QUOTE = 195;
SQLLexer.NUMBER = 196;
SQLLexer.REAL_NUMBER = 197;
SQLLexer.BlockComment = 198;
SQLLexer.LineComment = 199;
SQLLexer.Identifier = 200;
SQLLexer.Character_String_Literal = 201;
SQLLexer.Space = 202;
SQLLexer.White_Space = 203;
SQLLexer.BAD = 204;


SQLLexer.modeNames = [ "DEFAULT_MODE" ];

SQLLexer.literalNames = [ 'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          'null', 'null', 'null', 'null', 'null', 'null', 
                          "'~'", "'!~'", "'~*'", "'!~*'", 'null', "':='", 
                          "'='", "':'", "';'", "','", 'null', 'null', "'<'", 
                          "'<='", "'>'", "'>='", "'('", "')'", "'+'", "'-'", 
                          "'*'", "'/'", "'%'", "'.'", "'_'", "'|'", "'''", 
                          "'\"'", 'null', 'null', 'null', 'null', 'null', 
                          'null', "' '" ];

SQLLexer.symbolicNames = [ 'null', "AS", "ALL", "AND", "ANY", "ASYMMETRIC", 
                           "ASC", "BOTH", "CASE", "CAST", "CREATE", "CROSS", 
                           "DESC", "DISTINCT", "END", "ELSE", "EXCEPT", 
                           "FALSE", "FULL", "FROM", "GROUP", "HAVING", "ILIKE", 
                           "IN", "INNER", "INTERSECT", "INTO", "IS", "JOIN", 
                           "LEADING", "LEFT", "LIKE", "LIMIT", "NATURAL", 
                           "NOT", "NULL", "ON", "OUTER", "OR", "ORDER", 
                           "RIGHT", "SELECT", "SOME", "SYMMETRIC", "TABLE", 
                           "THEN", "TRAILING", "TRUE", "UNION", "UNIQUE", 
                           "USING", "WHEN", "WHERE", "WITH", "AVG", "BETWEEN", 
                           "BY", "CENTURY", "CHARACTER", "COLLECT", "COALESCE", 
                           "COLUMN", "COUNT", "CUBE", "DAY", "DEC", "DECADE", 
                           "DOW", "DOY", "DROP", "EPOCH", "EVERY", "EXISTS", 
                           "EXTERNAL", "EXTRACT", "FILTER", "FIRST", "FORMAT", 
                           "FUSION", "GROUPING", "HASH", "HOUR", "INDEX", 
                           "INSERT", "INTERSECTION", "ISODOW", "ISOYEAR", 
                           "LAST", "LESS", "LIST", "LOCATION", "MAX", "MAXVALUE", 
                           "MICROSECONDS", "MILLENNIUM", "MILLISECONDS", 
                           "MIN", "MINUTE", "MONTH", "NATIONAL", "NULLIF", 
                           "OVERWRITE", "PARTITION", "PARTITIONS", "PRECISION", 
                           "PURGE", "QUARTER", "RANGE", "REGEXP", "RLIKE", 
                           "ROLLUP", "SECOND", "SET", "SIMILAR", "STDDEV_POP", 
                           "STDDEV_SAMP", "SUBPARTITION", "SUM", "TABLESPACE", 
                           "THAN", "TIMEZONE", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                           "TRIM", "TO", "UNKNOWN", "VALUES", "VAR_SAMP", 
                           "VAR_POP", "VARYING", "WEEK", "YEAR", "ZONE", 
                           "BOOLEAN", "BOOL", "BIT", "VARBIT", "INT1", "INT2", 
                           "INT4", "INT8", "TINYINT", "SMALLINT", "INT", 
                           "INTEGER", "BIGINT", "FLOAT4", "FLOAT8", "REAL", 
                           "FLOAT", "DOUBLE", "NUMERIC", "DECIMAL", "CHAR", 
                           "VARCHAR", "NCHAR", "NVARCHAR", "DATE", "TIME", 
                           "TIMETZ", "TIMESTAMP", "TIMESTAMPTZ", "TEXT", 
                           "BINARY", "VARBINARY", "BLOB", "BYTEA", "INET4", 
                           "Similar_To", "Not_Similar_To", "Similar_To_Case_Insensitive", 
                           "Not_Similar_To_Case_Insensitive", "CAST_EXPRESSION", 
                           "ASSIGN", "EQUAL", "COLON", "SEMI_COLON", "COMMA", 
                           "CONCATENATION_OPERATOR", "NOT_EQUAL", "LTH", 
                           "LEQ", "GTH", "GEQ", "LEFT_PAREN", "RIGHT_PAREN", 
                           "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULAR", 
                           "DOT", "UNDERLINE", "VERTICAL_BAR", "QUOTE", 
                           "DOUBLE_QUOTE", "NUMBER", "REAL_NUMBER", "BlockComment", 
                           "LineComment", "Identifier", "Character_String_Literal", 
                           "Space", "White_Space", "BAD" ];

SQLLexer.ruleNames = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", 
                       "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", 
                       "U", "V", "W", "X", "Y", "Z", "AS", "ALL", "AND", 
                       "ANY", "ASYMMETRIC", "ASC", "BOTH", "CASE", "CAST", 
                       "CREATE", "CROSS", "DESC", "DISTINCT", "END", "ELSE", 
                       "EXCEPT", "FALSE", "FULL", "FROM", "GROUP", "HAVING", 
                       "ILIKE", "IN", "INNER", "INTERSECT", "INTO", "IS", 
                       "JOIN", "LEADING", "LEFT", "LIKE", "LIMIT", "NATURAL", 
                       "NOT", "NULL", "ON", "OUTER", "OR", "ORDER", "RIGHT", 
                       "SELECT", "SOME", "SYMMETRIC", "TABLE", "THEN", "TRAILING", 
                       "TRUE", "UNION", "UNIQUE", "USING", "WHEN", "WHERE", 
                       "WITH", "AVG", "BETWEEN", "BY", "CENTURY", "CHARACTER", 
                       "COLLECT", "COALESCE", "COLUMN", "COUNT", "CUBE", 
                       "DAY", "DEC", "DECADE", "DOW", "DOY", "DROP", "EPOCH", 
                       "EVERY", "EXISTS", "EXTERNAL", "EXTRACT", "FILTER", 
                       "FIRST", "FORMAT", "FUSION", "GROUPING", "HASH", 
                       "HOUR", "INDEX", "INSERT", "INTERSECTION", "ISODOW", 
                       "ISOYEAR", "LAST", "LESS", "LIST", "LOCATION", "MAX", 
                       "MAXVALUE", "MICROSECONDS", "MILLENNIUM", "MILLISECONDS", 
                       "MIN", "MINUTE", "MONTH", "NATIONAL", "NULLIF", "OVERWRITE", 
                       "PARTITION", "PARTITIONS", "PRECISION", "PURGE", 
                       "QUARTER", "RANGE", "REGEXP", "RLIKE", "ROLLUP", 
                       "SECOND", "SET", "SIMILAR", "STDDEV_POP", "STDDEV_SAMP", 
                       "SUBPARTITION", "SUM", "TABLESPACE", "THAN", "TIMEZONE", 
                       "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TRIM", "TO", 
                       "UNKNOWN", "VALUES", "VAR_SAMP", "VAR_POP", "VARYING", 
                       "WEEK", "YEAR", "ZONE", "BOOLEAN", "BOOL", "BIT", 
                       "VARBIT", "INT1", "INT2", "INT4", "INT8", "TINYINT", 
                       "SMALLINT", "INT", "INTEGER", "BIGINT", "FLOAT4", 
                       "FLOAT8", "REAL", "FLOAT", "DOUBLE", "NUMERIC", "DECIMAL", 
                       "CHAR", "VARCHAR", "NCHAR", "NVARCHAR", "DATE", "TIME", 
                       "TIMETZ", "TIMESTAMP", "TIMESTAMPTZ", "TEXT", "BINARY", 
                       "VARBINARY", "BLOB", "BYTEA", "INET4", "Similar_To", 
                       "Not_Similar_To", "Similar_To_Case_Insensitive", 
                       "Not_Similar_To_Case_Insensitive", "CAST_EXPRESSION", 
                       "ASSIGN", "EQUAL", "COLON", "SEMI_COLON", "COMMA", 
                       "CONCATENATION_OPERATOR", "NOT_EQUAL", "LTH", "LEQ", 
                       "GTH", "GEQ", "LEFT_PAREN", "RIGHT_PAREN", "PLUS", 
                       "MINUS", "MULTIPLY", "DIVIDE", "MODULAR", "DOT", 
                       "UNDERLINE", "VERTICAL_BAR", "QUOTE", "DOUBLE_QUOTE", 
                       "NUMBER", "Digit", "REAL_NUMBER", "BlockComment", 
                       "LineComment", "Identifier", "Regular_Identifier", 
                       "Control_Characters", "Extended_Control_Characters", 
                       "Character_String_Literal", "EXPONENT", "HEX_DIGIT", 
                       "ESC_SEQ", "OCTAL_ESC", "UNICODE_ESC", "Space", "White_Space", 
                       "BAD" ];

SQLLexer.grammarFileName = "SQLLexer.g4";

return SQLLexer;
};
},{}],3:[function(require,module,exports){
// Generated from grammars/sql/SQLParser.g4 by ANTLR 4.5.1
// jshint ignore: start

module.exports = function (antlr4, SQLParserListener) {

var grammarFileName = "SQLParser.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003\u00ce\u06ae\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0003\u0002\u0003\u0002",
    "\u0005\u0002\u0197\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u019f\n\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0005\u0006",
    "\u01a7\n\u0006\u0003\u0007\u0003\u0007\u0005\u0007\u01ab\n\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u01b2",
    "\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007",
    "\u01b8\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u01c2\n\b\u0003\b\u0005\b\u01c5\n\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u01d0",
    "\n\b\u0003\b\u0005\b\u01d3\n\b\u0003\b\u0005\b\u01d6\n\b\u0003\b\u0003",
    "\b\u0005\b\u01da\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b",
    "\u01e1\n\b\u0003\b\u0005\b\u01e4\n\b\u0003\b\u0005\b\u01e7\n\b\u0003",
    "\b\u0003\b\u0003\b\u0005\b\u01ec\n\b\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0007\t\u01f2\n\t\f\t\u000e\t\u01f5\u000b\t\u0003\t\u0003\t\u0003\n",
    "\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0007\f\u0203\n\f\f\f\u000e\f\u0206\u000b\f\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u021a\n\u0011\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0007\u0013\u0229\n\u0013\f\u0013\u000e\u0013\u022c\u000b\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0238\n",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u023c\n\u0014\u0005\u0014",
    "\u023e\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u024b\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0007\u0016\u0250\n\u0016\f\u0016\u000e\u0016\u0253\u000b\u0016\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0007\u001a\u0268\n\u001a\f\u001a\u000e\u001a\u026b\u000b\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0271\n",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0282\n\u001e",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u0286\n\u001f\u0003 \u0003 \u0003",
    "!\u0003!\u0005!\u028c\n!\u0003\"\u0003\"\u0003\"\u0005\"\u0291\n\"\u0003",
    "#\u0003#\u0003#\u0005#\u0296\n#\u0003$\u0003$\u0003$\u0003%\u0003%\u0003",
    "%\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003(\u0003(\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u02ae\n)\u0003*\u0003",
    "*\u0003+\u0003+\u0005+\u02b4\n+\u0003+\u0003+\u0005+\u02b8\n+\u0003",
    "+\u0003+\u0003+\u0005+\u02bd\n+\u0003+\u0003+\u0003+\u0005+\u02c2\n",
    "+\u0003+\u0003+\u0005+\u02c6\n+\u0003+\u0005+\u02c9\n+\u0003,\u0003",
    ",\u0003,\u0003,\u0003-\u0003-\u0003-\u0005-\u02d2\n-\u0003-\u0003-\u0003",
    "-\u0005-\u02d7\n-\u0003-\u0003-\u0005-\u02db\n-\u0003-\u0003-\u0003",
    "-\u0003-\u0005-\u02e1\n-\u0003-\u0003-\u0003-\u0003-\u0005-\u02e7\n",
    "-\u0003-\u0003-\u0003-\u0005-\u02ec\n-\u0003-\u0003-\u0005-\u02f0\n",
    "-\u0005-\u02f2\n-\u0003.\u0003.\u0005.\u02f6\n.\u0003.\u0003.\u0005",
    ".\u02fa\n.\u0005.\u02fc\n.\u0003/\u0003/\u0005/\u0300\n/\u00030\u0003",
    "0\u00050\u0304\n0\u00030\u00030\u00050\u0308\n0\u00030\u00030\u0005",
    "0\u030c\n0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00050\u0317\n0\u00031\u00031\u00051\u031b\n1\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00051\u0323\n1\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00052\u032d\n2\u00033\u00033\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00054\u033e\n4\u00035\u00035\u00055\u0342\n5\u00035\u00035\u0005",
    "5\u0346\n5\u00035\u00035\u00035\u00055\u034b\n5\u00055\u034d\n5\u0003",
    "6\u00036\u00056\u0351\n6\u00036\u00036\u00036\u00056\u0356\n6\u0003",
    "6\u00036\u00056\u035a\n6\u00056\u035c\n6\u00037\u00037\u00057\u0360",
    "\n7\u00038\u00038\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00059\u036d\n9\u0003:\u0003:\u0003;\u0003;\u0003<\u0005<\u0374",
    "\n<\u0003<\u0003<\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0005>\u0380\n>\u0005>\u0382\n>\u0003?\u0003?\u0003?\u0005?\u0387",
    "\n?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0006D\u03a7\nD\rD\u000eD\u03a8\u0003D\u0003D\u0005D\u03ad\nD\u0003",
    "E\u0003E\u0005E\u03b1\nE\u0003F\u0003F\u0003F\u0006F\u03b6\nF\rF\u000e",
    "F\u03b7\u0003F\u0005F\u03bb\nF\u0003F\u0003F\u0003G\u0003G\u0006G\u03c1",
    "\nG\rG\u000eG\u03c2\u0003G\u0005G\u03c6\nG\u0003G\u0003G\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003I\u0003J\u0003",
    "J\u0003J\u0003K\u0003K\u0005K\u03d9\nK\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003M\u0003M\u0003N\u0003N\u0003O\u0003O\u0003O\u0005",
    "O\u03e9\nO\u0003P\u0003P\u0003P\u0005P\u03ee\nP\u0003Q\u0003Q\u0003",
    "Q\u0007Q\u03f3\nQ\fQ\u000eQ\u03f6\u000bQ\u0003R\u0003R\u0003R\u0007",
    "R\u03fb\nR\fR\u000eR\u03fe\u000bR\u0003S\u0005S\u0401\nS\u0003S\u0003",
    "S\u0003T\u0003T\u0003T\u0003T\u0007T\u0409\nT\fT\u000eT\u040c\u000b",
    "T\u0003T\u0003T\u0003U\u0003U\u0003U\u0007U\u0413\nU\fU\u000eU\u0416",
    "\u000bU\u0003U\u0005U\u0419\nU\u0003V\u0003V\u0003W\u0003W\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0005Y\u0429",
    "\nY\u0003Z\u0003Z\u0003[\u0003[\u0005[\u042f\n[\u0003\\\u0003\\\u0003",
    "]\u0003]\u0003]\u0007]\u0436\n]\f]\u000e]\u0439\u000b]\u0003^\u0003",
    "^\u0003_\u0003_\u0005_\u043f\n_\u0003`\u0003`\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003b\u0005b\u0449\nb\u0003b\u0005b\u044c\nb\u0003b\u0005",
    "b\u044f\nb\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u0456\nb\u0003",
    "c\u0003c\u0003d\u0003d\u0003e\u0003e\u0003e\u0007e\u045f\ne\fe\u000e",
    "e\u0462\u000be\u0003f\u0003f\u0003f\u0007f\u0467\nf\ff\u000ef\u046a",
    "\u000bf\u0003g\u0003g\u0003g\u0005g\u046f\ng\u0003h\u0003h\u0005h\u0473",
    "\nh\u0003i\u0003i\u0005i\u0477\ni\u0003i\u0003i\u0003j\u0003j\u0003",
    "k\u0003k\u0005k\u047f\nk\u0003l\u0003l\u0005l\u0483\nl\u0003m\u0003",
    "m\u0003m\u0003m\u0003n\u0003n\u0005n\u048b\nn\u0003o\u0003o\u0003p\u0003",
    "p\u0003q\u0003q\u0005q\u0493\nq\u0003r\u0003r\u0005r\u0497\nr\u0003",
    "s\u0003s\u0005s\u049b\ns\u0003s\u0005s\u049e\ns\u0003s\u0005s\u04a1",
    "\ns\u0003s\u0005s\u04a4\ns\u0003s\u0005s\u04a7\ns\u0003t\u0003t\u0003",
    "t\u0003u\u0003u\u0003u\u0007u\u04af\nu\fu\u000eu\u04b2\u000bu\u0003",
    "v\u0003v\u0005v\u04b6\nv\u0003w\u0003w\u0006w\u04ba\nw\rw\u000ew\u04bb",
    "\u0003x\u0003x\u0003x\u0003x\u0005x\u04c2\nx\u0003x\u0003x\u0003x\u0003",
    "x\u0003x\u0003x\u0005x\u04ca\nx\u0003x\u0003x\u0003x\u0003x\u0003x\u0005",
    "x\u04d1\nx\u0003y\u0003y\u0003y\u0003y\u0003z\u0005z\u04d8\nz\u0003",
    "z\u0003z\u0003z\u0003z\u0003{\u0003{\u0005{\u04e0\n{\u0003{\u0003{\u0003",
    "{\u0003|\u0003|\u0003|\u0003|\u0003}\u0003}\u0005}\u04eb\n}\u0003~\u0003",
    "~\u0005~\u04ef\n~\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0005",
    "\u0080\u04f5\n\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083",
    "\u0005\u0083\u0501\n\u0083\u0003\u0083\u0005\u0083\u0504\n\u0083\u0003",
    "\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u050a\n\u0083",
    "\u0003\u0083\u0003\u0083\u0005\u0083\u050e\n\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0515\n\u0083",
    "\u0005\u0083\u0517\n\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0007",
    "\u0084\u051c\n\u0084\f\u0084\u000e\u0084\u051f\u000b\u0084\u0003\u0085",
    "\u0003\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087",
    "\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0007\u0089\u052f\n\u0089\f\u0089\u000e\u0089\u0532\u000b",
    "\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a\u0538",
    "\n\u008a\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b",
    "\u0005\u008b\u053f\n\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0007",
    "\u008c\u0544\n\u008c\f\u008c\u000e\u008c\u0547\u000b\u008c\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0007\u0091\u055c\n\u0091\f\u0091\u000e\u0091\u055f\u000b\u0091\u0003",
    "\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0005\u0093\u0565\n\u0093",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u056b\n",
    "\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u056f\n\u0094\u0003\u0094",
    "\u0003\u0094\u0005\u0094\u0573\n\u0094\u0003\u0094\u0007\u0094\u0576",
    "\n\u0094\f\u0094\u000e\u0094\u0579\u000b\u0094\u0003\u0095\u0003\u0095",
    "\u0005\u0095\u057d\n\u0095\u0003\u0096\u0003\u0096\u0003\u0096\u0003",
    "\u0096\u0005\u0096\u0583\n\u0096\u0003\u0096\u0003\u0096\u0005\u0096",
    "\u0587\n\u0096\u0003\u0096\u0003\u0096\u0005\u0096\u058b\n\u0096\u0003",
    "\u0096\u0007\u0096\u058e\n\u0096\f\u0096\u000e\u0096\u0591\u000b\u0096",
    "\u0003\u0097\u0003\u0097\u0005\u0097\u0595\n\u0097\u0003\u0098\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u059c\n\u0098",
    "\u0003\u0099\u0003\u0099\u0005\u0099\u05a0\n\u0099\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0005\u009b\u05a7\n\u009b",
    "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c",
    "\u05ae\n\u009c\u0005\u009c\u05b0\n\u009c\u0003\u009d\u0003\u009d\u0005",
    "\u009d\u05b4\n\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u05b8\n\u009d",
    "\u0003\u009e\u0003\u009e\u0003\u009e\u0007\u009e\u05bd\n\u009e\f\u009e",
    "\u000e\u009e\u05c0\u000b\u009e\u0003\u009f\u0003\u009f\u0005\u009f\u05c4",
    "\n\u009f\u0003\u00a0\u0003\u00a0\u0005\u00a0\u05c8\n\u00a0\u0003\u00a1",
    "\u0003\u00a1\u0005\u00a1\u05cc\n\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0005\u00a3\u05d5",
    "\n\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0005\u00a4\u05da\n\u00a4",
    "\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0007\u00a5",
    "\u05e1\n\u00a5\f\u00a5\u000e\u00a5\u05e4\u000b\u00a5\u0003\u00a6\u0003",
    "\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0005\u00aa\u05f6\n\u00aa\u0003\u00ab",
    "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0005\u00ae\u0602\n\u00ae\u0003",
    "\u00ae\u0003\u00ae\u0005\u00ae\u0606\n\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af\u0005\u00af\u060e\n",
    "\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u0618\n\u00b0\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0007\u00b1\u061d\n\u00b1\f\u00b1\u000e\u00b1",
    "\u0620\u000b\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b3\u0005\u00b3\u0627\n\u00b3\u0003\u00b3\u0003\u00b3\u0005\u00b3",
    "\u062b\n\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0005\u00b4\u0633\n\u00b4\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u063a\n\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b8\u0003\u00b8\u0005\u00b8\u0645\n\u00b8\u0003\u00b9",
    "\u0003\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00bb\u0005\u00bb\u064c\n",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0656\n\u00bd\u0003\u00be",
    "\u0003\u00be\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c0",
    "\u0005\u00c0\u065f\n\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c2\u0003\u00c2\u0005\u00c2\u0667\n\u00c2\u0003\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0007\u00c3\u066c\n\u00c3\f\u00c3\u000e\u00c3",
    "\u066f\u000b\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c5\u0007\u00c5\u0678\n\u00c5\f\u00c5\u000e",
    "\u00c5\u067b\u000b\u00c5\u0003\u00c6\u0003\u00c6\u0005\u00c6\u067f\n",
    "\u00c6\u0003\u00c6\u0005\u00c6\u0682\n\u00c6\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0005\u00c9\u068d\n\u00c9\u0003\u00ca\u0003\u00ca\u0005",
    "\u00ca\u0691\n\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0699\n\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u069f\n\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca",
    "\u06a7\n\u00ca\u0005\u00ca\u06a9\n\u00ca\u0003\u00ca\u0005\u00ca\u06ac",
    "\n\u00ca\u0003\u00ca\u0002\u0002\u00cb\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2",
    "\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba",
    "\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2",
    "\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea",
    "\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102",
    "\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a",
    "\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132",
    "\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a",
    "\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162",
    "\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a",
    "\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192",
    "\u0002\u0016\u0005\u00028RT\u00a4\u00a6\u00a9\u0005\u0002\u0013\u0013",
    "11\u007f\u007f\u0003\u0002\u0087\u0088\u0003\u0002\u00c6\u00c7\u000f",
    "\u0002\u0006\u0006,,88==@@IIPPVV]]bbtuww\u0081\u0082\u0003\u0002\u00bc",
    "\u00bd\u0003\u0002\u00be\u00c0\u0003\u0002z|\u0005\u0002\t\t\u001f\u001f",
    "00\u0005\u0002\u0014\u0014  **\u0004\u0002\u0012\u001222\u0004\u0002",
    "\u0004\u0004\u000f\u000f\u0004\u0002\u00b0\u00b0\u00b5\u00b9\u0004\u0002",
    "\u0007\u0007--\u0003\u0002\u00aa\u00ad\u0004\u0002\u0006\u0006,,\u0006",
    "\u0002BBSScd\u0085\u0085\t\u0002;;DFHHWX_all\u0084\u0084\u0004\u0002",
    "  **\u0004\u0002\b\b\u000e\u000e\u06dd\u0002\u0194\u0003\u0002\u0002",
    "\u0002\u0004\u019e\u0003\u0002\u0002\u0002\u0006\u01a0\u0003\u0002\u0002",
    "\u0002\b\u01a2\u0003\u0002\u0002\u0002\n\u01a6\u0003\u0002\u0002\u0002",
    "\f\u01a8\u0003\u0002\u0002\u0002\u000e\u01eb\u0003\u0002\u0002\u0002",
    "\u0010\u01ed\u0003\u0002\u0002\u0002\u0012\u01f8\u0003\u0002\u0002\u0002",
    "\u0014\u01fb\u0003\u0002\u0002\u0002\u0016\u01fd\u0003\u0002\u0002\u0002",
    "\u0018\u0209\u0003\u0002\u0002\u0002\u001a\u020d\u0003\u0002\u0002\u0002",
    "\u001c\u0210\u0003\u0002\u0002\u0002\u001e\u0213\u0003\u0002\u0002\u0002",
    " \u0219\u0003\u0002\u0002\u0002\"\u021b\u0003\u0002\u0002\u0002$\u0225",
    "\u0003\u0002\u0002\u0002&\u022d\u0003\u0002\u0002\u0002(\u023f\u0003",
    "\u0002\u0002\u0002*\u024c\u0003\u0002\u0002\u0002,\u0254\u0003\u0002",
    "\u0002\u0002.\u0257\u0003\u0002\u0002\u00020\u025a\u0003\u0002\u0002",
    "\u00022\u0264\u0003\u0002\u0002\u00024\u026c\u0003\u0002\u0002\u0002",
    "6\u0276\u0003\u0002\u0002\u00028\u027b\u0003\u0002\u0002\u0002:\u027d",
    "\u0003\u0002\u0002\u0002<\u0285\u0003\u0002\u0002\u0002>\u0287\u0003",
    "\u0002\u0002\u0002@\u028b\u0003\u0002\u0002\u0002B\u0290\u0003\u0002",
    "\u0002\u0002D\u0295\u0003\u0002\u0002\u0002F\u0297\u0003\u0002\u0002",
    "\u0002H\u029a\u0003\u0002\u0002\u0002J\u029d\u0003\u0002\u0002\u0002",
    "L\u02a0\u0003\u0002\u0002\u0002N\u02a2\u0003\u0002\u0002\u0002P\u02ad",
    "\u0003\u0002\u0002\u0002R\u02af\u0003\u0002\u0002\u0002T\u02c8\u0003",
    "\u0002\u0002\u0002V\u02ca\u0003\u0002\u0002\u0002X\u02f1\u0003\u0002",
    "\u0002\u0002Z\u02fb\u0003\u0002\u0002\u0002\\\u02ff\u0003\u0002\u0002",
    "\u0002^\u0316\u0003\u0002\u0002\u0002`\u0322\u0003\u0002\u0002\u0002",
    "b\u032c\u0003\u0002\u0002\u0002d\u032e\u0003\u0002\u0002\u0002f\u033d",
    "\u0003\u0002\u0002\u0002h\u034c\u0003\u0002\u0002\u0002j\u035b\u0003",
    "\u0002\u0002\u0002l\u035f\u0003\u0002\u0002\u0002n\u0361\u0003\u0002",
    "\u0002\u0002p\u036c\u0003\u0002\u0002\u0002r\u036e\u0003\u0002\u0002",
    "\u0002t\u0370\u0003\u0002\u0002\u0002v\u0373\u0003\u0002\u0002\u0002",
    "x\u0377\u0003\u0002\u0002\u0002z\u0381\u0003\u0002\u0002\u0002|\u0383",
    "\u0003\u0002\u0002\u0002~\u038b\u0003\u0002\u0002\u0002\u0080\u038d",
    "\u0003\u0002\u0002\u0002\u0082\u0393\u0003\u0002\u0002\u0002\u0084\u0398",
    "\u0003\u0002\u0002\u0002\u0086\u03ac\u0003\u0002\u0002\u0002\u0088\u03b0",
    "\u0003\u0002\u0002\u0002\u008a\u03b2\u0003\u0002\u0002\u0002\u008c\u03be",
    "\u0003\u0002\u0002\u0002\u008e\u03c9\u0003\u0002\u0002\u0002\u0090\u03ce",
    "\u0003\u0002\u0002\u0002\u0092\u03d3\u0003\u0002\u0002\u0002\u0094\u03d8",
    "\u0003\u0002\u0002\u0002\u0096\u03da\u0003\u0002\u0002\u0002\u0098\u03e1",
    "\u0003\u0002\u0002\u0002\u009a\u03e3\u0003\u0002\u0002\u0002\u009c\u03e8",
    "\u0003\u0002\u0002\u0002\u009e\u03ed\u0003\u0002\u0002\u0002\u00a0\u03ef",
    "\u0003\u0002\u0002\u0002\u00a2\u03f7\u0003\u0002\u0002\u0002\u00a4\u0400",
    "\u0003\u0002\u0002\u0002\u00a6\u0404\u0003\u0002\u0002\u0002\u00a8\u0418",
    "\u0003\u0002\u0002\u0002\u00aa\u041a\u0003\u0002\u0002\u0002\u00ac\u041c",
    "\u0003\u0002\u0002\u0002\u00ae\u041e\u0003\u0002\u0002\u0002\u00b0\u0428",
    "\u0003\u0002\u0002\u0002\u00b2\u042a\u0003\u0002\u0002\u0002\u00b4\u042e",
    "\u0003\u0002\u0002\u0002\u00b6\u0430\u0003\u0002\u0002\u0002\u00b8\u0432",
    "\u0003\u0002\u0002\u0002\u00ba\u043a\u0003\u0002\u0002\u0002\u00bc\u043e",
    "\u0003\u0002\u0002\u0002\u00be\u0440\u0003\u0002\u0002\u0002\u00c0\u0442",
    "\u0003\u0002\u0002\u0002\u00c2\u0455\u0003\u0002\u0002\u0002\u00c4\u0457",
    "\u0003\u0002\u0002\u0002\u00c6\u0459\u0003\u0002\u0002\u0002\u00c8\u045b",
    "\u0003\u0002\u0002\u0002\u00ca\u0463\u0003\u0002\u0002\u0002\u00cc\u046e",
    "\u0003\u0002\u0002\u0002\u00ce\u0470\u0003\u0002\u0002\u0002\u00d0\u0474",
    "\u0003\u0002\u0002\u0002\u00d2\u047a\u0003\u0002\u0002\u0002\u00d4\u047e",
    "\u0003\u0002\u0002\u0002\u00d6\u0482\u0003\u0002\u0002\u0002\u00d8\u0484",
    "\u0003\u0002\u0002\u0002\u00da\u048a\u0003\u0002\u0002\u0002\u00dc\u048c",
    "\u0003\u0002\u0002\u0002\u00de\u048e\u0003\u0002\u0002\u0002\u00e0\u0492",
    "\u0003\u0002\u0002\u0002\u00e2\u0496\u0003\u0002\u0002\u0002\u00e4\u0498",
    "\u0003\u0002\u0002\u0002\u00e6\u04a8\u0003\u0002\u0002\u0002\u00e8\u04ab",
    "\u0003\u0002\u0002\u0002\u00ea\u04b5\u0003\u0002\u0002\u0002\u00ec\u04b7",
    "\u0003\u0002\u0002\u0002\u00ee\u04d0\u0003\u0002\u0002\u0002\u00f0\u04d2",
    "\u0003\u0002\u0002\u0002\u00f2\u04d7\u0003\u0002\u0002\u0002\u00f4\u04dd",
    "\u0003\u0002\u0002\u0002\u00f6\u04e4\u0003\u0002\u0002\u0002\u00f8\u04ea",
    "\u0003\u0002\u0002\u0002\u00fa\u04ec\u0003\u0002\u0002\u0002\u00fc\u04f0",
    "\u0003\u0002\u0002\u0002\u00fe\u04f4\u0003\u0002\u0002\u0002\u0100\u04f6",
    "\u0003\u0002\u0002\u0002\u0102\u04f9\u0003\u0002\u0002\u0002\u0104\u0516",
    "\u0003\u0002\u0002\u0002\u0106\u0518\u0003\u0002\u0002\u0002\u0108\u0520",
    "\u0003\u0002\u0002\u0002\u010a\u0522\u0003\u0002\u0002\u0002\u010c\u0525",
    "\u0003\u0002\u0002\u0002\u010e\u0527\u0003\u0002\u0002\u0002\u0110\u052b",
    "\u0003\u0002\u0002\u0002\u0112\u0537\u0003\u0002\u0002\u0002\u0114\u053e",
    "\u0003\u0002\u0002\u0002\u0116\u0540\u0003\u0002\u0002\u0002\u0118\u0548",
    "\u0003\u0002\u0002\u0002\u011a\u054d\u0003\u0002\u0002\u0002\u011c\u0552",
    "\u0003\u0002\u0002\u0002\u011e\u0555\u0003\u0002\u0002\u0002\u0120\u0558",
    "\u0003\u0002\u0002\u0002\u0122\u0560\u0003\u0002\u0002\u0002\u0124\u0564",
    "\u0003\u0002\u0002\u0002\u0126\u056e\u0003\u0002\u0002\u0002\u0128\u057c",
    "\u0003\u0002\u0002\u0002\u012a\u0586\u0003\u0002\u0002\u0002\u012c\u0594",
    "\u0003\u0002\u0002\u0002\u012e\u059b\u0003\u0002\u0002\u0002\u0130\u059f",
    "\u0003\u0002\u0002\u0002\u0132\u05a1\u0003\u0002\u0002\u0002\u0134\u05a6",
    "\u0003\u0002\u0002\u0002\u0136\u05a8\u0003\u0002\u0002\u0002\u0138\u05b1",
    "\u0003\u0002\u0002\u0002\u013a\u05b9\u0003\u0002\u0002\u0002\u013c\u05c3",
    "\u0003\u0002\u0002\u0002\u013e\u05c5\u0003\u0002\u0002\u0002\u0140\u05cb",
    "\u0003\u0002\u0002\u0002\u0142\u05cf\u0003\u0002\u0002\u0002\u0144\u05d4",
    "\u0003\u0002\u0002\u0002\u0146\u05d9\u0003\u0002\u0002\u0002\u0148\u05dd",
    "\u0003\u0002\u0002\u0002\u014a\u05e5\u0003\u0002\u0002\u0002\u014c\u05e7",
    "\u0003\u0002\u0002\u0002\u014e\u05e9\u0003\u0002\u0002\u0002\u0150\u05eb",
    "\u0003\u0002\u0002\u0002\u0152\u05f5\u0003\u0002\u0002\u0002\u0154\u05f7",
    "\u0003\u0002\u0002\u0002\u0156\u05fb\u0003\u0002\u0002\u0002\u0158\u05fd",
    "\u0003\u0002\u0002\u0002\u015a\u0601\u0003\u0002\u0002\u0002\u015c\u060b",
    "\u0003\u0002\u0002\u0002\u015e\u0617\u0003\u0002\u0002\u0002\u0160\u0619",
    "\u0003\u0002\u0002\u0002\u0162\u0621\u0003\u0002\u0002\u0002\u0164\u062a",
    "\u0003\u0002\u0002\u0002\u0166\u0632\u0003\u0002\u0002\u0002\u0168\u0634",
    "\u0003\u0002\u0002\u0002\u016a\u0636\u0003\u0002\u0002\u0002\u016c\u063d",
    "\u0003\u0002\u0002\u0002\u016e\u0644\u0003\u0002\u0002\u0002\u0170\u0646",
    "\u0003\u0002\u0002\u0002\u0172\u0648\u0003\u0002\u0002\u0002\u0174\u064b",
    "\u0003\u0002\u0002\u0002\u0176\u0650\u0003\u0002\u0002\u0002\u0178\u0655",
    "\u0003\u0002\u0002\u0002\u017a\u0657\u0003\u0002\u0002\u0002\u017c\u0659",
    "\u0003\u0002\u0002\u0002\u017e\u065b\u0003\u0002\u0002\u0002\u0180\u0662",
    "\u0003\u0002\u0002\u0002\u0182\u0666\u0003\u0002\u0002\u0002\u0184\u0668",
    "\u0003\u0002\u0002\u0002\u0186\u0670\u0003\u0002\u0002\u0002\u0188\u0674",
    "\u0003\u0002\u0002\u0002\u018a\u067c\u0003\u0002\u0002\u0002\u018c\u0683",
    "\u0003\u0002\u0002\u0002\u018e\u0685\u0003\u0002\u0002\u0002\u0190\u068c",
    "\u0003\u0002\u0002\u0002\u0192\u06ab\u0003\u0002\u0002\u0002\u0194\u0196",
    "\u0005\u0004\u0003\u0002\u0195\u0197\u0007\u00b2\u0002\u0002\u0196\u0195",
    "\u0003\u0002\u0002\u0002\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u0198",
    "\u0003\u0002\u0002\u0002\u0198\u0199\u0007\u0002\u0002\u0003\u0199\u0003",
    "\u0003\u0002\u0002\u0002\u019a\u019f\u0005\u0006\u0004\u0002\u019b\u019f",
    "\u0005\b\u0005\u0002\u019c\u019f\u0005\n\u0006\u0002\u019d\u019f\u0005",
    "\f\u0007\u0002\u019e\u019a\u0003\u0002\u0002\u0002\u019e\u019b\u0003",
    "\u0002\u0002\u0002\u019e\u019c\u0003\u0002\u0002\u0002\u019e\u019d\u0003",
    "\u0002\u0002\u0002\u019f\u0005\u0003\u0002\u0002\u0002\u01a0\u01a1\u0005",
    "\u0122\u0092\u0002\u01a1\u0007\u0003\u0002\u0002\u0002\u01a2\u01a3\u0005",
    "\u0192\u00ca\u0002\u01a3\t\u0003\u0002\u0002\u0002\u01a4\u01a7\u0005",
    "\u000e\b\u0002\u01a5\u01a7\u0005:\u001e\u0002\u01a6\u01a4\u0003\u0002",
    "\u0002\u0002\u01a6\u01a5\u0003\u0002\u0002\u0002\u01a7\u000b\u0003\u0002",
    "\u0002\u0002\u01a8\u01aa\u0007\f\u0002\u0002\u01a9\u01ab\u00073\u0002",
    "\u0002\u01aa\u01a9\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002",
    "\u0002\u01ab\u01ac\u0003\u0002\u0002\u0002\u01ac\u01ad\u0007T\u0002",
    "\u0002\u01ad\u01ae\u0005<\u001f\u0002\u01ae\u01af\u0007&\u0002\u0002",
    "\u01af\u01b1\u0005\u0136\u009c\u0002\u01b0\u01b2\u0005\u001a\u000e\u0002",
    "\u01b1\u01b0\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002",
    "\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b4\u0007\u00ba\u0002\u0002",
    "\u01b4\u01b5\u0005\u0188\u00c5\u0002\u01b5\u01b7\u0007\u00bb\u0002\u0002",
    "\u01b6\u01b8\u0005\u0016\f\u0002\u01b7\u01b6\u0003\u0002\u0002\u0002",
    "\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\r\u0003\u0002\u0002\u0002",
    "\u01b9\u01ba\u0007\f\u0002\u0002\u01ba\u01bb\u0007K\u0002\u0002\u01bb",
    "\u01bc\u0007.\u0002\u0002\u01bc\u01bd\u0005\u0136\u009c\u0002\u01bd",
    "\u01be\u0005\u0010\t\u0002\u01be\u01bf\u00074\u0002\u0002\u01bf\u01c1",
    "\u0005<\u001f\u0002\u01c0\u01c2\u0005\u0016\f\u0002\u01c1\u01c0\u0003",
    "\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c4\u0003",
    "\u0002\u0002\u0002\u01c3\u01c5\u0005 \u0011\u0002\u01c4\u01c3\u0003",
    "\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5\u01c6\u0003",
    "\u0002\u0002\u0002\u01c6\u01c7\u0007\\\u0002\u0002\u01c7\u01c8\u0007",
    "\u00cb\u0002\u0002\u01c8\u01ec\u0003\u0002\u0002\u0002\u01c9\u01ca\u0007",
    "\f\u0002\u0002\u01ca\u01cb\u0007.\u0002\u0002\u01cb\u01cc\u0005\u0136",
    "\u009c\u0002\u01cc\u01cf\u0005\u0010\t\u0002\u01cd\u01ce\u00074\u0002",
    "\u0002\u01ce\u01d0\u0005<\u001f\u0002\u01cf\u01cd\u0003\u0002\u0002",
    "\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d2\u0003\u0002\u0002",
    "\u0002\u01d1\u01d3\u0005\u0016\f\u0002\u01d2\u01d1\u0003\u0002\u0002",
    "\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d5\u0003\u0002\u0002",
    "\u0002\u01d4\u01d6\u0005 \u0011\u0002\u01d5\u01d4\u0003\u0002\u0002",
    "\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6\u01d9\u0003\u0002\u0002",
    "\u0002\u01d7\u01d8\u0007\u0003\u0002\u0002\u01d8\u01da\u0005\u0122\u0092",
    "\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002",
    "\u0002\u01da\u01ec\u0003\u0002\u0002\u0002\u01db\u01dc\u0007\f\u0002",
    "\u0002\u01dc\u01dd\u0007.\u0002\u0002\u01dd\u01e0\u0005\u0136\u009c",
    "\u0002\u01de\u01df\u00074\u0002\u0002\u01df\u01e1\u0005<\u001f\u0002",
    "\u01e0\u01de\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002",
    "\u01e1\u01e3\u0003\u0002\u0002\u0002\u01e2\u01e4\u0005\u0016\f\u0002",
    "\u01e3\u01e2\u0003\u0002\u0002\u0002\u01e3\u01e4\u0003\u0002\u0002\u0002",
    "\u01e4\u01e6\u0003\u0002\u0002\u0002\u01e5\u01e7\u0005 \u0011\u0002",
    "\u01e6\u01e5\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002",
    "\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u01e9\u0007\u0003\u0002\u0002",
    "\u01e9\u01ea\u0005\u0122\u0092\u0002\u01ea\u01ec\u0003\u0002\u0002\u0002",
    "\u01eb\u01b9\u0003\u0002\u0002\u0002\u01eb\u01c9\u0003\u0002\u0002\u0002",
    "\u01eb\u01db\u0003\u0002\u0002\u0002\u01ec\u000f\u0003\u0002\u0002\u0002",
    "\u01ed\u01ee\u0007\u00ba\u0002\u0002\u01ee\u01f3\u0005\u0012\n\u0002",
    "\u01ef\u01f0\u0007\u00b3\u0002\u0002\u01f0\u01f2\u0005\u0012\n\u0002",
    "\u01f1\u01ef\u0003\u0002\u0002\u0002\u01f2\u01f5\u0003\u0002\u0002\u0002",
    "\u01f3\u01f1\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002",
    "\u01f4\u01f6\u0003\u0002\u0002\u0002\u01f5\u01f3\u0003\u0002\u0002\u0002",
    "\u01f6\u01f7\u0007\u00bb\u0002\u0002\u01f7\u0011\u0003\u0002\u0002\u0002",
    "\u01f8\u01f9\u0005<\u001f\u0002\u01f9\u01fa\u0005\u0014\u000b\u0002",
    "\u01fa\u0013\u0003\u0002\u0002\u0002\u01fb\u01fc\u0005N(\u0002\u01fc",
    "\u0015\u0003\u0002\u0002\u0002\u01fd\u01fe\u00077\u0002\u0002\u01fe",
    "\u01ff\u0007\u00ba\u0002\u0002\u01ff\u0204\u0005\u0018\r\u0002\u0200",
    "\u0201\u0007\u00b3\u0002\u0002\u0201\u0203\u0005\u0018\r\u0002\u0202",
    "\u0200\u0003\u0002\u0002\u0002\u0203\u0206\u0003\u0002\u0002\u0002\u0204",
    "\u0202\u0003\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002\u0002\u0205",
    "\u0207\u0003\u0002\u0002\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0207",
    "\u0208\u0007\u00bb\u0002\u0002\u0208\u0017\u0003\u0002\u0002\u0002\u0209",
    "\u020a\u0007\u00cb\u0002\u0002\u020a\u020b\u0007\u00b0\u0002\u0002\u020b",
    "\u020c\u0005\u00a0Q\u0002\u020c\u0019\u0003\u0002\u0002\u0002\u020d",
    "\u020e\u00074\u0002\u0002\u020e\u020f\u0005<\u001f\u0002\u020f\u001b",
    "\u0003\u0002\u0002\u0002\u0210\u0211\u0007x\u0002\u0002\u0211\u0212",
    "\u0005\u001e\u0010\u0002\u0212\u001d\u0003\u0002\u0002\u0002\u0213\u0214",
    "\u0005<\u001f\u0002\u0214\u001f\u0003\u0002\u0002\u0002\u0215\u021a",
    "\u0005\"\u0012\u0002\u0216\u021a\u0005(\u0015\u0002\u0217\u021a\u0005",
    "0\u0019\u0002\u0218\u021a\u00056\u001c\u0002\u0219\u0215\u0003\u0002",
    "\u0002\u0002\u0219\u0216\u0003\u0002\u0002\u0002\u0219\u0217\u0003\u0002",
    "\u0002\u0002\u0219\u0218\u0003\u0002\u0002\u0002\u021a!\u0003\u0002",
    "\u0002\u0002\u021b\u021c\u0007h\u0002\u0002\u021c\u021d\u0007:\u0002",
    "\u0002\u021d\u021e\u0007m\u0002\u0002\u021e\u021f\u0007\u00ba\u0002",
    "\u0002\u021f\u0220\u0005\u0148\u00a5\u0002\u0220\u0221\u0007\u00bb\u0002",
    "\u0002\u0221\u0222\u0007\u00ba\u0002\u0002\u0222\u0223\u0005$\u0013",
    "\u0002\u0223\u0224\u0007\u00bb\u0002\u0002\u0224#\u0003\u0002\u0002",
    "\u0002\u0225\u022a\u0005&\u0014\u0002\u0226\u0227\u0007\u00b3\u0002",
    "\u0002\u0227\u0229\u0005&\u0014\u0002\u0228\u0226\u0003\u0002\u0002",
    "\u0002\u0229\u022c\u0003\u0002\u0002\u0002\u022a\u0228\u0003\u0002\u0002",
    "\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b%\u0003\u0002\u0002",
    "\u0002\u022c\u022a\u0003\u0002\u0002\u0002\u022d\u022e\u0007h\u0002",
    "\u0002\u022e\u022f\u00058\u001d\u0002\u022f\u0230\u0007\u0080\u0002",
    "\u0002\u0230\u0231\u0007Z\u0002\u0002\u0231\u023d\u0007y\u0002\u0002",
    "\u0232\u0233\u0007\u00ba\u0002\u0002\u0233\u0234\u0005\u009cO\u0002",
    "\u0234\u0235\u0007\u00bb\u0002\u0002\u0235\u023e\u0003\u0002\u0002\u0002",
    "\u0236\u0238\u0007\u00ba\u0002\u0002\u0237\u0236\u0003\u0002\u0002\u0002",
    "\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002",
    "\u0239\u023b\u0007^\u0002\u0002\u023a\u023c\u0007\u00bb\u0002\u0002",
    "\u023b\u023a\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002",
    "\u023c\u023e\u0003\u0002\u0002\u0002\u023d\u0232\u0003\u0002\u0002\u0002",
    "\u023d\u0237\u0003\u0002\u0002\u0002\u023e\'\u0003\u0002\u0002\u0002",
    "\u023f\u0240\u0007h\u0002\u0002\u0240\u0241\u0007:\u0002\u0002\u0241",
    "\u0242\u0007R\u0002\u0002\u0242\u0243\u0007\u00ba\u0002\u0002\u0243",
    "\u0244\u0005\u0148\u00a5\u0002\u0244\u024a\u0007\u00bb\u0002\u0002\u0245",
    "\u0246\u0007\u00ba\u0002\u0002\u0246\u0247\u0005*\u0016\u0002\u0247",
    "\u0248\u0007\u00bb\u0002\u0002\u0248\u024b\u0003\u0002\u0002\u0002\u0249",
    "\u024b\u0005.\u0018\u0002\u024a\u0245\u0003\u0002\u0002\u0002\u024a",
    "\u0249\u0003\u0002\u0002\u0002\u024b)\u0003\u0002\u0002\u0002\u024c",
    "\u0251\u0005,\u0017\u0002\u024d\u024e\u0007\u00b3\u0002\u0002\u024e",
    "\u0250\u0005,\u0017\u0002\u024f\u024d\u0003\u0002\u0002\u0002\u0250",
    "\u0253\u0003\u0002\u0002\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0251",
    "\u0252\u0003\u0002\u0002\u0002\u0252+\u0003\u0002\u0002\u0002\u0253",
    "\u0251\u0003\u0002\u0002\u0002\u0254\u0255\u0007h\u0002\u0002\u0255",
    "\u0256\u00058\u001d\u0002\u0256-\u0003\u0002\u0002\u0002\u0257\u0258",
    "\u0007i\u0002\u0002\u0258\u0259\u0005\u00a0Q\u0002\u0259/\u0003\u0002",
    "\u0002\u0002\u025a\u025b\u0007h\u0002\u0002\u025b\u025c\u0007:\u0002",
    "\u0002\u025c\u025d\u0007[\u0002\u0002\u025d\u025e\u0007\u00ba\u0002",
    "\u0002\u025e\u025f\u0005\u0148\u00a5\u0002\u025f\u0260\u0007\u00bb\u0002",
    "\u0002\u0260\u0261\u0007\u00ba\u0002\u0002\u0261\u0262\u00052\u001a",
    "\u0002\u0262\u0263\u0007\u00bb\u0002\u0002\u02631\u0003\u0002\u0002",
    "\u0002\u0264\u0269\u00054\u001b\u0002\u0265\u0266\u0007\u00b3\u0002",
    "\u0002\u0266\u0268\u00054\u001b\u0002\u0267\u0265\u0003\u0002\u0002",
    "\u0002\u0268\u026b\u0003\u0002\u0002\u0002\u0269\u0267\u0003\u0002\u0002",
    "\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a3\u0003\u0002\u0002",
    "\u0002\u026b\u0269\u0003\u0002\u0002\u0002\u026c\u026d\u0007h\u0002",
    "\u0002\u026d\u026e\u00058\u001d\u0002\u026e\u0270\u0007\u0080\u0002",
    "\u0002\u026f\u0271\u0007\u0019\u0002\u0002\u0270\u026f\u0003\u0002\u0002",
    "\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0272\u0003\u0002\u0002",
    "\u0002\u0272\u0273\u0007\u00ba\u0002\u0002\u0273\u0274\u0005\u0160\u00b1",
    "\u0002\u0274\u0275\u0007\u00bb\u0002\u0002\u02755\u0003\u0002\u0002",
    "\u0002\u0276\u0277\u0007h\u0002\u0002\u0277\u0278\u0007:\u0002\u0002",
    "\u0278\u0279\u0007?\u0002\u0002\u0279\u027a\u0005\u0010\t\u0002\u027a",
    "7\u0003\u0002\u0002\u0002\u027b\u027c\u0005<\u001f\u0002\u027c9\u0003",
    "\u0002\u0002\u0002\u027d\u027e\u0007G\u0002\u0002\u027e\u027f\u0007",
    ".\u0002\u0002\u027f\u0281\u0005\u0136\u009c\u0002\u0280\u0282\u0007",
    "k\u0002\u0002\u0281\u0280\u0003\u0002\u0002\u0002\u0281\u0282\u0003",
    "\u0002\u0002\u0002\u0282;\u0003\u0002\u0002\u0002\u0283\u0286\u0007",
    "\u00ca\u0002\u0002\u0284\u0286\u0005> \u0002\u0285\u0283\u0003\u0002",
    "\u0002\u0002\u0285\u0284\u0003\u0002\u0002\u0002\u0286=\u0003\u0002",
    "\u0002\u0002\u0287\u0288\t\u0002\u0002\u0002\u0288?\u0003\u0002\u0002",
    "\u0002\u0289\u028c\u0005t;\u0002\u028a\u028c\u0005B\"\u0002\u028b\u0289",
    "\u0003\u0002\u0002\u0002\u028b\u028a\u0003\u0002\u0002\u0002\u028cA",
    "\u0003\u0002\u0002\u0002\u028d\u0291\u0007\u00cb\u0002\u0002\u028e\u0291",
    "\u0005D#\u0002\u028f\u0291\u0005L\'\u0002\u0290\u028d\u0003\u0002\u0002",
    "\u0002\u0290\u028e\u0003\u0002\u0002\u0002\u0290\u028f\u0003\u0002\u0002",
    "\u0002\u0291C\u0003\u0002\u0002\u0002\u0292\u0296\u0005H%\u0002\u0293",
    "\u0296\u0005F$\u0002\u0294\u0296\u0005J&\u0002\u0295\u0292\u0003\u0002",
    "\u0002\u0002\u0295\u0293\u0003\u0002\u0002\u0002\u0295\u0294\u0003\u0002",
    "\u0002\u0002\u0296E\u0003\u0002\u0002\u0002\u0297\u0298\u0007\u00a0",
    "\u0002\u0002\u0298\u0299\u0007\u00cb\u0002\u0002\u0299G\u0003\u0002",
    "\u0002\u0002\u029a\u029b\u0007\u00a2\u0002\u0002\u029b\u029c\u0007\u00cb",
    "\u0002\u0002\u029cI\u0003\u0002\u0002\u0002\u029d\u029e\u0007\u009f",
    "\u0002\u0002\u029e\u029f\u0007\u00cb\u0002\u0002\u029fK\u0003\u0002",
    "\u0002\u0002\u02a0\u02a1\t\u0003\u0002\u0002\u02a1M\u0003\u0002\u0002",
    "\u0002\u02a2\u02a3\u0005P)\u0002\u02a3O\u0003\u0002\u0002\u0002\u02a4",
    "\u02ae\u0005T+\u0002\u02a5\u02ae\u0005X-\u0002\u02a6\u02ae\u0005Z.\u0002",
    "\u02a7\u02ae\u0005\\/\u0002\u02a8\u02ae\u0005d3\u0002\u02a9\u02ae\u0005",
    "f4\u0002\u02aa\u02ae\u0005h5\u0002\u02ab\u02ae\u0005j6\u0002\u02ac\u02ae",
    "\u0005R*\u0002\u02ad\u02a4\u0003\u0002\u0002\u0002\u02ad\u02a5\u0003",
    "\u0002\u0002\u0002\u02ad\u02a6\u0003\u0002\u0002\u0002\u02ad\u02a7\u0003",
    "\u0002\u0002\u0002\u02ad\u02a8\u0003\u0002\u0002\u0002\u02ad\u02a9\u0003",
    "\u0002\u0002\u0002\u02ad\u02aa\u0003\u0002\u0002\u0002\u02ad\u02ab\u0003",
    "\u0002\u0002\u0002\u02ad\u02ac\u0003\u0002\u0002\u0002\u02aeQ\u0003",
    "\u0002\u0002\u0002\u02af\u02b0\u0007\u00a9\u0002\u0002\u02b0S\u0003",
    "\u0002\u0002\u0002\u02b1\u02b3\u0007<\u0002\u0002\u02b2\u02b4\u0005",
    "V,\u0002\u02b3\u02b2\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002",
    "\u0002\u0002\u02b4\u02c9\u0003\u0002\u0002\u0002\u02b5\u02b7\u0007\u009b",
    "\u0002\u0002\u02b6\u02b8\u0005V,\u0002\u02b7\u02b6\u0003\u0002\u0002",
    "\u0002\u02b7\u02b8\u0003\u0002\u0002\u0002\u02b8\u02c9\u0003\u0002\u0002",
    "\u0002\u02b9\u02ba\u0007<\u0002\u0002\u02ba\u02bc\u0007\u0083\u0002",
    "\u0002\u02bb\u02bd\u0005V,\u0002\u02bc\u02bb\u0003\u0002\u0002\u0002",
    "\u02bc\u02bd\u0003\u0002\u0002\u0002\u02bd\u02c9\u0003\u0002\u0002\u0002",
    "\u02be\u02bf\u0007\u009b\u0002\u0002\u02bf\u02c1\u0007\u0083\u0002\u0002",
    "\u02c0\u02c2\u0005V,\u0002\u02c1\u02c0\u0003\u0002\u0002\u0002\u02c1",
    "\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c9\u0003\u0002\u0002\u0002\u02c3",
    "\u02c5\u0007\u009c\u0002\u0002\u02c4\u02c6\u0005V,\u0002\u02c5\u02c4",
    "\u0003\u0002\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c9",
    "\u0003\u0002\u0002\u0002\u02c7\u02c9\u0007\u00a4\u0002\u0002\u02c8\u02b1",
    "\u0003\u0002\u0002\u0002\u02c8\u02b5\u0003\u0002\u0002\u0002\u02c8\u02b9",
    "\u0003\u0002\u0002\u0002\u02c8\u02be\u0003\u0002\u0002\u0002\u02c8\u02c3",
    "\u0003\u0002\u0002\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002\u02c9U",
    "\u0003\u0002\u0002\u0002\u02ca\u02cb\u0007\u00ba\u0002\u0002\u02cb\u02cc",
    "\u0007\u00c6\u0002\u0002\u02cc\u02cd\u0007\u00bb\u0002\u0002\u02cdW",
    "\u0003\u0002\u0002\u0002\u02ce\u02cf\u0007e\u0002\u0002\u02cf\u02d1",
    "\u0007<\u0002\u0002\u02d0\u02d2\u0005V,\u0002\u02d1\u02d0\u0003\u0002",
    "\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2\u02f2\u0003\u0002",
    "\u0002\u0002\u02d3\u02d4\u0007e\u0002\u0002\u02d4\u02d6\u0007\u009b",
    "\u0002\u0002\u02d5\u02d7\u0005V,\u0002\u02d6\u02d5\u0003\u0002\u0002",
    "\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002\u02d7\u02f2\u0003\u0002\u0002",
    "\u0002\u02d8\u02da\u0007\u009d\u0002\u0002\u02d9\u02db\u0005V,\u0002",
    "\u02da\u02d9\u0003\u0002\u0002\u0002\u02da\u02db\u0003\u0002\u0002\u0002",
    "\u02db\u02f2\u0003\u0002\u0002\u0002\u02dc\u02dd\u0007e\u0002\u0002",
    "\u02dd\u02de\u0007<\u0002\u0002\u02de\u02e0\u0007\u0083\u0002\u0002",
    "\u02df\u02e1\u0005V,\u0002\u02e0\u02df\u0003\u0002\u0002\u0002\u02e0",
    "\u02e1\u0003\u0002\u0002\u0002\u02e1\u02f2\u0003\u0002\u0002\u0002\u02e2",
    "\u02e3\u0007e\u0002\u0002\u02e3\u02e4\u0007\u009b\u0002\u0002\u02e4",
    "\u02e6\u0007\u0083\u0002\u0002\u02e5\u02e7\u0005V,\u0002\u02e6\u02e5",
    "\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7\u02f2",
    "\u0003\u0002\u0002\u0002\u02e8\u02e9\u0007\u009d\u0002\u0002\u02e9\u02eb",
    "\u0007\u0083\u0002\u0002\u02ea\u02ec\u0005V,\u0002\u02eb\u02ea\u0003",
    "\u0002\u0002\u0002\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02f2\u0003",
    "\u0002\u0002\u0002\u02ed\u02ef\u0007\u009e\u0002\u0002\u02ee\u02f0\u0005",
    "V,\u0002\u02ef\u02ee\u0003\u0002\u0002\u0002\u02ef\u02f0\u0003\u0002",
    "\u0002\u0002\u02f0\u02f2\u0003\u0002\u0002\u0002\u02f1\u02ce\u0003\u0002",
    "\u0002\u0002\u02f1\u02d3\u0003\u0002\u0002\u0002\u02f1\u02d8\u0003\u0002",
    "\u0002\u0002\u02f1\u02dc\u0003\u0002\u0002\u0002\u02f1\u02e2\u0003\u0002",
    "\u0002\u0002\u02f1\u02e8\u0003\u0002\u0002\u0002\u02f1\u02ed\u0003\u0002",
    "\u0002\u0002\u02f2Y\u0003\u0002\u0002\u0002\u02f3\u02f5\u0007\u00a7",
    "\u0002\u0002\u02f4\u02f6\u0005V,\u0002\u02f5\u02f4\u0003\u0002\u0002",
    "\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u02fc\u0003\u0002\u0002",
    "\u0002\u02f7\u02f9\u0007\u00a8\u0002\u0002\u02f8\u02fa\u0005V,\u0002",
    "\u02f9\u02f8\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002",
    "\u02fa\u02fc\u0003\u0002\u0002\u0002\u02fb\u02f3\u0003\u0002\u0002\u0002",
    "\u02fb\u02f7\u0003\u0002\u0002\u0002\u02fc[\u0003\u0002\u0002\u0002",
    "\u02fd\u0300\u0005^0\u0002\u02fe\u0300\u0005`1\u0002\u02ff\u02fd\u0003",
    "\u0002\u0002\u0002\u02ff\u02fe\u0003\u0002\u0002\u0002\u0300]\u0003",
    "\u0002\u0002\u0002\u0301\u0303\u0007\u0099\u0002\u0002\u0302\u0304\u0005",
    "b2\u0002\u0303\u0302\u0003\u0002\u0002\u0002\u0303\u0304\u0003\u0002",
    "\u0002\u0002\u0304\u0317\u0003\u0002\u0002\u0002\u0305\u0307\u0007\u009a",
    "\u0002\u0002\u0306\u0308\u0005b2\u0002\u0307\u0306\u0003\u0002\u0002",
    "\u0002\u0307\u0308\u0003\u0002\u0002\u0002\u0308\u0317\u0003\u0002\u0002",
    "\u0002\u0309\u030b\u0007C\u0002\u0002\u030a\u030c\u0005b2\u0002\u030b",
    "\u030a\u0003\u0002\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030c",
    "\u0317\u0003\u0002\u0002\u0002\u030d\u0317\u0007\u008b\u0002\u0002\u030e",
    "\u0317\u0007\u008f\u0002\u0002\u030f\u0317\u0007\u008c\u0002\u0002\u0310",
    "\u0317\u0007\u0090\u0002\u0002\u0311\u0317\u0007\u008d\u0002\u0002\u0312",
    "\u0317\u0007\u0091\u0002\u0002\u0313\u0317\u0007\u0092\u0002\u0002\u0314",
    "\u0317\u0007\u008e\u0002\u0002\u0315\u0317\u0007\u0093\u0002\u0002\u0316",
    "\u0301\u0003\u0002\u0002\u0002\u0316\u0305\u0003\u0002\u0002\u0002\u0316",
    "\u0309\u0003\u0002\u0002\u0002\u0316\u030d\u0003\u0002\u0002\u0002\u0316",
    "\u030e\u0003\u0002\u0002\u0002\u0316\u030f\u0003\u0002\u0002\u0002\u0316",
    "\u0310\u0003\u0002\u0002\u0002\u0316\u0311\u0003\u0002\u0002\u0002\u0316",
    "\u0312\u0003\u0002\u0002\u0002\u0316\u0313\u0003\u0002\u0002\u0002\u0316",
    "\u0314\u0003\u0002\u0002\u0002\u0316\u0315\u0003\u0002\u0002\u0002\u0317",
    "_\u0003\u0002\u0002\u0002\u0318\u031a\u0007\u0097\u0002\u0002\u0319",
    "\u031b\u0005b2\u0002\u031a\u0319\u0003\u0002\u0002\u0002\u031a\u031b",
    "\u0003\u0002\u0002\u0002\u031b\u0323\u0003\u0002\u0002\u0002\u031c\u0323",
    "\u0007\u0094\u0002\u0002\u031d\u0323\u0007\u0096\u0002\u0002\u031e\u0323",
    "\u0007\u0095\u0002\u0002\u031f\u0323\u0007\u0098\u0002\u0002\u0320\u0321",
    "\u0007\u0098\u0002\u0002\u0321\u0323\u0007j\u0002\u0002\u0322\u0318",
    "\u0003\u0002\u0002\u0002\u0322\u031c\u0003\u0002\u0002\u0002\u0322\u031d",
    "\u0003\u0002\u0002\u0002\u0322\u031e\u0003\u0002\u0002\u0002\u0322\u031f",
    "\u0003\u0002\u0002\u0002\u0322\u0320\u0003\u0002\u0002\u0002\u0323a",
    "\u0003\u0002\u0002\u0002\u0324\u0325\u0007\u00ba\u0002\u0002\u0325\u0326",
    "\u0007\u00c6\u0002\u0002\u0326\u032d\u0007\u00bb\u0002\u0002\u0327\u0328",
    "\u0007\u00ba\u0002\u0002\u0328\u0329\u0007\u00c6\u0002\u0002\u0329\u032a",
    "\u0007\u00b3\u0002\u0002\u032a\u032b\u0007\u00c6\u0002\u0002\u032b\u032d",
    "\u0007\u00bb\u0002\u0002\u032c\u0324\u0003\u0002\u0002\u0002\u032c\u0327",
    "\u0003\u0002\u0002\u0002\u032dc\u0003\u0002\u0002\u0002\u032e\u032f",
    "\t\u0004\u0002\u0002\u032fe\u0003\u0002\u0002\u0002\u0330\u033e\u0007",
    "\u009f\u0002\u0002\u0331\u033e\u0007\u00a0\u0002\u0002\u0332\u0333\u0007",
    "\u00a0\u0002\u0002\u0333\u0334\u00077\u0002\u0002\u0334\u0335\u0007",
    "\u00a0\u0002\u0002\u0335\u033e\u0007\u0086\u0002\u0002\u0336\u033e\u0007",
    "\u00a1\u0002\u0002\u0337\u033e\u0007\u00a2\u0002\u0002\u0338\u0339\u0007",
    "\u00a2\u0002\u0002\u0339\u033a\u00077\u0002\u0002\u033a\u033b\u0007",
    "\u00a0\u0002\u0002\u033b\u033e\u0007\u0086\u0002\u0002\u033c\u033e\u0007",
    "\u00a3\u0002\u0002\u033d\u0330\u0003\u0002\u0002\u0002\u033d\u0331\u0003",
    "\u0002\u0002\u0002\u033d\u0332\u0003\u0002\u0002\u0002\u033d\u0336\u0003",
    "\u0002\u0002\u0002\u033d\u0337\u0003\u0002\u0002\u0002\u033d\u0338\u0003",
    "\u0002\u0002\u0002\u033d\u033c\u0003\u0002\u0002\u0002\u033eg\u0003",
    "\u0002\u0002\u0002\u033f\u0341\u0007\u0089\u0002\u0002\u0340\u0342\u0005",
    "V,\u0002\u0341\u0340\u0003\u0002\u0002\u0002\u0341\u0342\u0003\u0002",
    "\u0002\u0002\u0342\u034d\u0003\u0002\u0002\u0002\u0343\u0345\u0007\u008a",
    "\u0002\u0002\u0344\u0346\u0005V,\u0002\u0345\u0344\u0003\u0002\u0002",
    "\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u034d\u0003\u0002\u0002",
    "\u0002\u0347\u0348\u0007\u0089\u0002\u0002\u0348\u034a\u0007\u0083\u0002",
    "\u0002\u0349\u034b\u0005V,\u0002\u034a\u0349\u0003\u0002\u0002\u0002",
    "\u034a\u034b\u0003\u0002\u0002\u0002\u034b\u034d\u0003\u0002\u0002\u0002",
    "\u034c\u033f\u0003\u0002\u0002\u0002\u034c\u0343\u0003\u0002\u0002\u0002",
    "\u034c\u0347\u0003\u0002\u0002\u0002\u034di\u0003\u0002\u0002\u0002",
    "\u034e\u0350\u0007\u00a5\u0002\u0002\u034f\u0351\u0005V,\u0002\u0350",
    "\u034f\u0003\u0002\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002\u0351",
    "\u035c\u0003\u0002\u0002\u0002\u0352\u0353\u0007\u00a5\u0002\u0002\u0353",
    "\u0355\u0007\u0083\u0002\u0002\u0354\u0356\u0005V,\u0002\u0355\u0354",
    "\u0003\u0002\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356\u035c",
    "\u0003\u0002\u0002\u0002\u0357\u0359\u0007\u00a6\u0002\u0002\u0358\u035a",
    "\u0005V,\u0002\u0359\u0358\u0003\u0002\u0002\u0002\u0359\u035a\u0003",
    "\u0002\u0002\u0002\u035a\u035c\u0003\u0002\u0002\u0002\u035b\u034e\u0003",
    "\u0002\u0002\u0002\u035b\u0352\u0003\u0002\u0002\u0002\u035b\u0357\u0003",
    "\u0002\u0002\u0002\u035ck\u0003\u0002\u0002\u0002\u035d\u0360\u0005",
    "n8\u0002\u035e\u0360\u0005p9\u0002\u035f\u035d\u0003\u0002\u0002\u0002",
    "\u035f\u035e\u0003\u0002\u0002\u0002\u0360m\u0003\u0002\u0002\u0002",
    "\u0361\u0362\u0007\u00ba\u0002\u0002\u0362\u0363\u0005\u009cO\u0002",
    "\u0363\u0364\u0007\u00bb\u0002\u0002\u0364o\u0003\u0002\u0002\u0002",
    "\u0365\u036d\u0005r:\u0002\u0366\u036d\u0005\u0144\u00a3\u0002\u0367",
    "\u036d\u0005x=\u0002\u0368\u036d\u0005\u014a\u00a6\u0002\u0369\u036d",
    "\u0005\u0084C\u0002\u036a\u036d\u0005\u0096L\u0002\u036b\u036d\u0005",
    "\u017e\u00c0\u0002\u036c\u0365\u0003\u0002\u0002\u0002\u036c\u0366\u0003",
    "\u0002\u0002\u0002\u036c\u0367\u0003\u0002\u0002\u0002\u036c\u0368\u0003",
    "\u0002\u0002\u0002\u036c\u0369\u0003\u0002\u0002\u0002\u036c\u036a\u0003",
    "\u0002\u0002\u0002\u036c\u036b\u0003\u0002\u0002\u0002\u036dq\u0003",
    "\u0002\u0002\u0002\u036e\u036f\u0005@!\u0002\u036fs\u0003\u0002\u0002",
    "\u0002\u0370\u0371\t\u0005\u0002\u0002\u0371u\u0003\u0002\u0002\u0002",
    "\u0372\u0374\u0005\u00aaV\u0002\u0373\u0372\u0003\u0002\u0002\u0002",
    "\u0373\u0374\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002\u0002\u0002",
    "\u0375\u0376\u0005t;\u0002\u0376w\u0003\u0002\u0002\u0002\u0377\u0378",
    "\u0005z>\u0002\u0378y\u0003\u0002\u0002\u0002\u0379\u037a\u0007@\u0002",
    "\u0002\u037a\u037b\u0007\u00ba\u0002\u0002\u037b\u037c\u0007\u00be\u0002",
    "\u0002\u037c\u0382\u0007\u00bb\u0002\u0002\u037d\u037f\u0005|?\u0002",
    "\u037e\u0380\u0005\u0080A\u0002\u037f\u037e\u0003\u0002\u0002\u0002",
    "\u037f\u0380\u0003\u0002\u0002\u0002\u0380\u0382\u0003\u0002\u0002\u0002",
    "\u0381\u0379\u0003\u0002\u0002\u0002\u0381\u037d\u0003\u0002\u0002\u0002",
    "\u0382{\u0003\u0002\u0002\u0002\u0383\u0384\u0005~@\u0002\u0384\u0386",
    "\u0007\u00ba\u0002\u0002\u0385\u0387\u0005\u0142\u00a2\u0002\u0386\u0385",
    "\u0003\u0002\u0002\u0002\u0386\u0387\u0003\u0002\u0002\u0002\u0387\u0388",
    "\u0003\u0002\u0002\u0002\u0388\u0389\u0005\u009cO\u0002\u0389\u038a",
    "\u0007\u00bb\u0002\u0002\u038a}\u0003\u0002\u0002\u0002\u038b\u038c",
    "\t\u0006\u0002\u0002\u038c\u007f\u0003\u0002\u0002\u0002\u038d\u038e",
    "\u0007M\u0002\u0002\u038e\u038f\u0007\u00ba\u0002\u0002\u038f\u0390",
    "\u00076\u0002\u0002\u0390\u0391\u0005\u010c\u0087\u0002\u0391\u0392",
    "\u0007\u00bb\u0002\u0002\u0392\u0081\u0003\u0002\u0002\u0002\u0393\u0394",
    "\u0007Q\u0002\u0002\u0394\u0395\u0007\u00ba\u0002\u0002\u0395\u0396",
    "\u0005\u0148\u00a5\u0002\u0396\u0397\u0007\u00bb\u0002\u0002\u0397\u0083",
    "\u0003\u0002\u0002\u0002\u0398\u0399\u0005\u0088E\u0002\u0399\u0085",
    "\u0003\u0002\u0002\u0002\u039a\u039b\u0007f\u0002\u0002\u039b\u039c",
    "\u0007\u00ba\u0002\u0002\u039c\u039d\u0005\u00a0Q\u0002\u039d\u039e",
    "\u0007\u00b3\u0002\u0002\u039e\u039f\u0005\u00c6d\u0002\u039f\u03a0",
    "\u0007\u00bb\u0002\u0002\u03a0\u03ad\u0003\u0002\u0002\u0002\u03a1\u03a2",
    "\u0007>\u0002\u0002\u03a2\u03a3\u0007\u00ba\u0002\u0002\u03a3\u03a6",
    "\u0005\u00a0Q\u0002\u03a4\u03a5\u0007\u00b3\u0002\u0002\u03a5\u03a7",
    "\u0005\u00c6d\u0002\u03a6\u03a4\u0003\u0002\u0002\u0002\u03a7\u03a8",
    "\u0003\u0002\u0002\u0002\u03a8\u03a6\u0003\u0002\u0002\u0002\u03a8\u03a9",
    "\u0003\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa\u03ab",
    "\u0007\u00bb\u0002\u0002\u03ab\u03ad\u0003\u0002\u0002\u0002\u03ac\u039a",
    "\u0003\u0002\u0002\u0002\u03ac\u03a1\u0003\u0002\u0002\u0002\u03ad\u0087",
    "\u0003\u0002\u0002\u0002\u03ae\u03b1\u0005\u008aF\u0002\u03af\u03b1",
    "\u0005\u008cG\u0002\u03b0\u03ae\u0003\u0002\u0002\u0002\u03b0\u03af",
    "\u0003\u0002\u0002\u0002\u03b1\u0089\u0003\u0002\u0002\u0002\u03b2\u03b3",
    "\u0007\n\u0002\u0002\u03b3\u03b5\u0005\u00c6d\u0002\u03b4\u03b6\u0005",
    "\u008eH\u0002\u03b5\u03b4\u0003\u0002\u0002\u0002\u03b6\u03b7\u0003",
    "\u0002\u0002\u0002\u03b7\u03b5\u0003\u0002\u0002\u0002\u03b7\u03b8\u0003",
    "\u0002\u0002\u0002\u03b8\u03ba\u0003\u0002\u0002\u0002\u03b9\u03bb\u0005",
    "\u0092J\u0002\u03ba\u03b9\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003",
    "\u0002\u0002\u0002\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03bd\u0007",
    "\u0010\u0002\u0002\u03bd\u008b\u0003\u0002\u0002\u0002\u03be\u03c0\u0007",
    "\n\u0002\u0002\u03bf\u03c1\u0005\u0090I\u0002\u03c0\u03bf\u0003\u0002",
    "\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002\u03c2\u03c0\u0003\u0002",
    "\u0002\u0002\u03c2\u03c3\u0003\u0002\u0002\u0002\u03c3\u03c5\u0003\u0002",
    "\u0002\u0002\u03c4\u03c6\u0005\u0092J\u0002\u03c5\u03c4\u0003\u0002",
    "\u0002\u0002\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002",
    "\u0002\u0002\u03c7\u03c8\u0007\u0010\u0002\u0002\u03c8\u008d\u0003\u0002",
    "\u0002\u0002\u03c9\u03ca\u00075\u0002\u0002\u03ca\u03cb\u0005\u010c",
    "\u0087\u0002\u03cb\u03cc\u0007/\u0002\u0002\u03cc\u03cd\u0005\u0094",
    "K\u0002\u03cd\u008f\u0003\u0002\u0002\u0002\u03ce\u03cf\u00075\u0002",
    "\u0002\u03cf\u03d0\u0005\u010c\u0087\u0002\u03d0\u03d1\u0007/\u0002",
    "\u0002\u03d1\u03d2\u0005\u0094K\u0002\u03d2\u0091\u0003\u0002\u0002",
    "\u0002\u03d3\u03d4\u0007\u0011\u0002\u0002\u03d4\u03d5\u0005\u0094K",
    "\u0002\u03d5\u0093\u0003\u0002\u0002\u0002\u03d6\u03d9\u0005\u009cO",
    "\u0002\u03d7\u03d9\u0007%\u0002\u0002\u03d8\u03d6\u0003\u0002\u0002",
    "\u0002\u03d8\u03d7\u0003\u0002\u0002\u0002\u03d9\u0095\u0003\u0002\u0002",
    "\u0002\u03da\u03db\u0007\u000b\u0002\u0002\u03db\u03dc\u0007\u00ba\u0002",
    "\u0002\u03dc\u03dd\u0005\u0098M\u0002\u03dd\u03de\u0007\u0003\u0002",
    "\u0002\u03de\u03df\u0005\u009aN\u0002\u03df\u03e0\u0007\u00bb\u0002",
    "\u0002\u03e0\u0097\u0003\u0002\u0002\u0002\u03e1\u03e2\u0005\u009cO",
    "\u0002\u03e2\u0099\u0003\u0002\u0002\u0002\u03e3\u03e4\u0005N(\u0002",
    "\u03e4\u009b\u0003\u0002\u0002\u0002\u03e5\u03e9\u0005\u009eP\u0002",
    "\u03e6\u03e9\u0005\u00dan\u0002\u03e7\u03e9\u0005\u00c6d\u0002\u03e8",
    "\u03e5\u0003\u0002\u0002\u0002\u03e8\u03e6\u0003\u0002\u0002\u0002\u03e8",
    "\u03e7\u0003\u0002\u0002\u0002\u03e9\u009d\u0003\u0002\u0002\u0002\u03ea",
    "\u03ee\u0005\u00a0Q\u0002\u03eb\u03ee\u0005\u00b6\\\u0002\u03ec\u03ee",
    "\u0007%\u0002\u0002\u03ed\u03ea\u0003\u0002\u0002\u0002\u03ed\u03eb",
    "\u0003\u0002\u0002\u0002\u03ed\u03ec\u0003\u0002\u0002\u0002\u03ee\u009f",
    "\u0003\u0002\u0002\u0002\u03ef\u03f4\u0005\u00a2R\u0002\u03f0\u03f1",
    "\t\u0007\u0002\u0002\u03f1\u03f3\u0005\u00a2R\u0002\u03f2\u03f0\u0003",
    "\u0002\u0002\u0002\u03f3\u03f6\u0003\u0002\u0002\u0002\u03f4\u03f2\u0003",
    "\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002\u0002\u03f5\u00a1\u0003",
    "\u0002\u0002\u0002\u03f6\u03f4\u0003\u0002\u0002\u0002\u03f7\u03fc\u0005",
    "\u00a4S\u0002\u03f8\u03f9\t\b\u0002\u0002\u03f9\u03fb\u0005\u00a4S\u0002",
    "\u03fa\u03f8\u0003\u0002\u0002\u0002\u03fb\u03fe\u0003\u0002\u0002\u0002",
    "\u03fc\u03fa\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002",
    "\u03fd\u00a3\u0003\u0002\u0002\u0002\u03fe\u03fc\u0003\u0002\u0002\u0002",
    "\u03ff\u0401\u0005\u00aaV\u0002\u0400\u03ff\u0003\u0002\u0002\u0002",
    "\u0400\u0401\u0003\u0002\u0002\u0002\u0401\u0402\u0003\u0002\u0002\u0002",
    "\u0402\u0403\u0005\u00a8U\u0002\u0403\u00a5\u0003\u0002\u0002\u0002",
    "\u0404\u0405\u0007\u00ba\u0002\u0002\u0405\u040a\u0005\u00a0Q\u0002",
    "\u0406\u0407\u0007\u00b3\u0002\u0002\u0407\u0409\u0005\u00a0Q\u0002",
    "\u0408\u0406\u0003\u0002\u0002\u0002\u0409\u040c\u0003\u0002\u0002\u0002",
    "\u040a\u0408\u0003\u0002\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002",
    "\u040b\u040d\u0003\u0002\u0002\u0002\u040c\u040a\u0003\u0002\u0002\u0002",
    "\u040d\u040e\u0007\u00bb\u0002\u0002\u040e\u00a7\u0003\u0002\u0002\u0002",
    "\u040f\u0414\u0005l7\u0002\u0410\u0411\u0007\u00ae\u0002\u0002\u0411",
    "\u0413\u0005\u009aN\u0002\u0412\u0410\u0003\u0002\u0002\u0002\u0413",
    "\u0416\u0003\u0002\u0002\u0002\u0414\u0412\u0003\u0002\u0002\u0002\u0414",
    "\u0415\u0003\u0002\u0002\u0002\u0415\u0419\u0003\u0002\u0002\u0002\u0416",
    "\u0414\u0003\u0002\u0002\u0002\u0417\u0419\u0005\u00acW\u0002\u0418",
    "\u040f\u0003\u0002\u0002\u0002\u0418\u0417\u0003\u0002\u0002\u0002\u0419",
    "\u00a9\u0003\u0002\u0002\u0002\u041a\u041b\t\u0007\u0002\u0002\u041b",
    "\u00ab\u0003\u0002\u0002\u0002\u041c\u041d\u0005\u00aeX\u0002\u041d",
    "\u00ad\u0003\u0002\u0002\u0002\u041e\u041f\u0007L\u0002\u0002\u041f",
    "\u0420\u0007\u00ba\u0002\u0002\u0420\u0421\u0005\u00b0Y\u0002\u0421",
    "\u0422\u0007\u0015\u0002\u0002\u0422\u0423\u0005\u00b4[\u0002\u0423",
    "\u0424\u0007\u00bb\u0002\u0002\u0424\u00af\u0003\u0002\u0002\u0002\u0425",
    "\u0429\u0005\u0178\u00bd\u0002\u0426\u0429\u0005\u00b2Z\u0002\u0427",
    "\u0429\u0005\u017c\u00bf\u0002\u0428\u0425\u0003\u0002\u0002\u0002\u0428",
    "\u0426\u0003\u0002\u0002\u0002\u0428\u0427\u0003\u0002\u0002\u0002\u0429",
    "\u00b1\u0003\u0002\u0002\u0002\u042a\u042b\t\t\u0002\u0002\u042b\u00b3",
    "\u0003\u0002\u0002\u0002\u042c\u042f\u0005\u0144\u00a3\u0002\u042d\u042f",
    "\u0005D#\u0002\u042e\u042c\u0003\u0002\u0002\u0002\u042e\u042d\u0003",
    "\u0002\u0002\u0002\u042f\u00b5\u0003\u0002\u0002\u0002\u0430\u0431\u0005",
    "\u00b8]\u0002\u0431\u00b7\u0003\u0002\u0002\u0002\u0432\u0437\u0005",
    "\u00ba^\u0002\u0433\u0434\u0007\u00b4\u0002\u0002\u0434\u0436\u0005",
    "\u00ba^\u0002\u0435\u0433\u0003\u0002\u0002\u0002\u0436\u0439\u0003",
    "\u0002\u0002\u0002\u0437\u0435\u0003\u0002\u0002\u0002\u0437\u0438\u0003",
    "\u0002\u0002\u0002\u0438\u00b9\u0003\u0002\u0002\u0002\u0439\u0437\u0003",
    "\u0002\u0002\u0002\u043a\u043b\u0005\u00bc_\u0002\u043b\u00bb\u0003",
    "\u0002\u0002\u0002\u043c\u043f\u0005l7\u0002\u043d\u043f\u0005\u00be",
    "`\u0002\u043e\u043c\u0003\u0002\u0002\u0002\u043e\u043d\u0003\u0002",
    "\u0002\u0002\u043f\u00bd\u0003\u0002\u0002\u0002\u0440\u0441\u0005\u00c0",
    "a\u0002\u0441\u00bf\u0003\u0002\u0002\u0002\u0442\u0443\u0007}\u0002",
    "\u0002\u0443\u0444\u0007\u00ba\u0002\u0002\u0444\u0445\u0005\u00c2b",
    "\u0002\u0445\u0446\u0007\u00bb\u0002\u0002\u0446\u00c1\u0003\u0002\u0002",
    "\u0002\u0447\u0449\u0005\u00c4c\u0002\u0448\u0447\u0003\u0002\u0002",
    "\u0002\u0448\u0449\u0003\u0002\u0002\u0002\u0449\u044b\u0003\u0002\u0002",
    "\u0002\u044a\u044c\u0005\u00b8]\u0002\u044b\u044a\u0003\u0002\u0002",
    "\u0002\u044b\u044c\u0003\u0002\u0002\u0002\u044c\u044d\u0003\u0002\u0002",
    "\u0002\u044d\u044f\u0007\u0015\u0002\u0002\u044e\u0448\u0003\u0002\u0002",
    "\u0002\u044e\u044f\u0003\u0002\u0002\u0002\u044f\u0450\u0003\u0002\u0002",
    "\u0002\u0450\u0456\u0005\u00b8]\u0002\u0451\u0452\u0005\u00b8]\u0002",
    "\u0452\u0453\u0007\u00b3\u0002\u0002\u0453\u0454\u0005\u00b8]\u0002",
    "\u0454\u0456\u0003\u0002\u0002\u0002\u0455\u044e\u0003\u0002\u0002\u0002",
    "\u0455\u0451\u0003\u0002\u0002\u0002\u0456\u00c3\u0003\u0002\u0002\u0002",
    "\u0457\u0458\t\n\u0002\u0002\u0458\u00c5\u0003\u0002\u0002\u0002\u0459",
    "\u045a\u0005\u00c8e\u0002\u045a\u00c7\u0003\u0002\u0002\u0002\u045b",
    "\u0460\u0005\u00caf\u0002\u045c\u045d\u0007(\u0002\u0002\u045d\u045f",
    "\u0005\u00c8e\u0002\u045e\u045c\u0003\u0002\u0002\u0002\u045f\u0462",
    "\u0003\u0002\u0002\u0002\u0460\u045e\u0003\u0002\u0002\u0002\u0460\u0461",
    "\u0003\u0002\u0002\u0002\u0461\u00c9\u0003\u0002\u0002\u0002\u0462\u0460",
    "\u0003\u0002\u0002\u0002\u0463\u0468\u0005\u00ccg\u0002\u0464\u0465",
    "\u0007\u0005\u0002\u0002\u0465\u0467\u0005\u00caf\u0002\u0466\u0464",
    "\u0003\u0002\u0002\u0002\u0467\u046a\u0003\u0002\u0002\u0002\u0468\u0466",
    "\u0003\u0002\u0002\u0002\u0468\u0469\u0003\u0002\u0002\u0002\u0469\u00cb",
    "\u0003\u0002\u0002\u0002\u046a\u0468\u0003\u0002\u0002\u0002\u046b\u046f",
    "\u0005\u00ceh\u0002\u046c\u046d\u0007$\u0002\u0002\u046d\u046f\u0005",
    "\u00ceh\u0002\u046e\u046b\u0003\u0002\u0002\u0002\u046e\u046c\u0003",
    "\u0002\u0002\u0002\u046f\u00cd\u0003\u0002\u0002\u0002\u0470\u0472\u0005",
    "\u00d4k\u0002\u0471\u0473\u0005\u00d0i\u0002\u0472\u0471\u0003\u0002",
    "\u0002\u0002\u0472\u0473\u0003\u0002\u0002\u0002\u0473\u00cf\u0003\u0002",
    "\u0002\u0002\u0474\u0476\u0007\u001d\u0002\u0002\u0475\u0477\u0007$",
    "\u0002\u0002\u0476\u0475\u0003\u0002\u0002\u0002\u0476\u0477\u0003\u0002",
    "\u0002\u0002\u0477\u0478\u0003\u0002\u0002\u0002\u0478\u0479\u0005\u00d2",
    "j\u0002\u0479\u00d1\u0003\u0002\u0002\u0002\u047a\u047b\t\u0003\u0002",
    "\u0002\u047b\u00d3\u0003\u0002\u0002\u0002\u047c\u047f\u0005\u0152\u00aa",
    "\u0002\u047d\u047f\u0005\u00d6l\u0002\u047e\u047c\u0003\u0002\u0002",
    "\u0002\u047e\u047d\u0003\u0002\u0002\u0002\u047f\u00d5\u0003\u0002\u0002",
    "\u0002\u0480\u0483\u0005\u00d8m\u0002\u0481\u0483\u0005p9\u0002\u0482",
    "\u0480\u0003\u0002\u0002\u0002\u0482\u0481\u0003\u0002\u0002\u0002\u0483",
    "\u00d7\u0003\u0002\u0002\u0002\u0484\u0485\u0007\u00ba\u0002\u0002\u0485",
    "\u0486\u0005\u00c6d\u0002\u0486\u0487\u0007\u00bb\u0002\u0002\u0487",
    "\u00d9\u0003\u0002\u0002\u0002\u0488\u048b\u0005\u00dco\u0002\u0489",
    "\u048b\u0005\u00dep\u0002\u048a\u0488\u0003\u0002\u0002\u0002\u048a",
    "\u0489\u0003\u0002\u0002\u0002\u048b\u00db\u0003\u0002\u0002\u0002\u048c",
    "\u048d\u0005p9\u0002\u048d\u00dd\u0003\u0002\u0002\u0002\u048e\u048f",
    "\u0007%\u0002\u0002\u048f\u00df\u0003\u0002\u0002\u0002\u0490\u0493",
    "\u0005\u00dco\u0002\u0491\u0493\u0005\u00e2r\u0002\u0492\u0490\u0003",
    "\u0002\u0002\u0002\u0492\u0491\u0003\u0002\u0002\u0002\u0493\u00e1\u0003",
    "\u0002\u0002\u0002\u0494\u0497\u0005\u009eP\u0002\u0495\u0497\u0005",
    "\u00d6l\u0002\u0496\u0494\u0003\u0002\u0002\u0002\u0496\u0495\u0003",
    "\u0002\u0002\u0002\u0497\u00e3\u0003\u0002\u0002\u0002\u0498\u049a\u0005",
    "\u00e6t\u0002\u0499\u049b\u0005\u010a\u0086\u0002\u049a\u0499\u0003",
    "\u0002\u0002\u0002\u049a\u049b\u0003\u0002\u0002\u0002\u049b\u049d\u0003",
    "\u0002\u0002\u0002\u049c\u049e\u0005\u010e\u0088\u0002\u049d\u049c\u0003",
    "\u0002\u0002\u0002\u049d\u049e\u0003\u0002\u0002\u0002\u049e\u04a0\u0003",
    "\u0002\u0002\u0002\u049f\u04a1\u0005\u011e\u0090\u0002\u04a0\u049f\u0003",
    "\u0002\u0002\u0002\u04a0\u04a1\u0003\u0002\u0002\u0002\u04a1\u04a3\u0003",
    "\u0002\u0002\u0002\u04a2\u04a4\u0005\u0186\u00c4\u0002\u04a3\u04a2\u0003",
    "\u0002\u0002\u0002\u04a3\u04a4\u0003\u0002\u0002\u0002\u04a4\u04a6\u0003",
    "\u0002\u0002\u0002\u04a5\u04a7\u0005\u018e\u00c8\u0002\u04a6\u04a5\u0003",
    "\u0002\u0002\u0002\u04a6\u04a7\u0003\u0002\u0002\u0002\u04a7\u00e5\u0003",
    "\u0002\u0002\u0002\u04a8\u04a9\u0007\u0015\u0002\u0002\u04a9\u04aa\u0005",
    "\u00e8u\u0002\u04aa\u00e7\u0003\u0002\u0002\u0002\u04ab\u04b0\u0005",
    "\u00eav\u0002\u04ac\u04ad\u0007\u00b3\u0002\u0002\u04ad\u04af\u0005",
    "\u00eav\u0002\u04ae\u04ac\u0003\u0002\u0002\u0002\u04af\u04b2\u0003",
    "\u0002\u0002\u0002\u04b0\u04ae\u0003\u0002\u0002\u0002\u04b0\u04b1\u0003",
    "\u0002\u0002\u0002\u04b1\u00e9\u0003\u0002\u0002\u0002\u04b2\u04b0\u0003",
    "\u0002\u0002\u0002\u04b3\u04b6\u0005\u00ecw\u0002\u04b4\u04b6\u0005",
    "\u0104\u0083\u0002\u04b5\u04b3\u0003\u0002\u0002\u0002\u04b5\u04b4\u0003",
    "\u0002\u0002\u0002\u04b6\u00eb\u0003\u0002\u0002\u0002\u04b7\u04b9\u0005",
    "\u0104\u0083\u0002\u04b8\u04ba\u0005\u00eex\u0002\u04b9\u04b8\u0003",
    "\u0002\u0002\u0002\u04ba\u04bb\u0003\u0002\u0002\u0002\u04bb\u04b9\u0003",
    "\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc\u00ed\u0003",
    "\u0002\u0002\u0002\u04bd\u04be\u0007\r\u0002\u0002\u04be\u04bf\u0007",
    "\u001e\u0002\u0002\u04bf\u04d1\u0005\u0104\u0083\u0002\u04c0\u04c2\u0005",
    "\u00f8}\u0002\u04c1\u04c0\u0003\u0002\u0002\u0002\u04c1\u04c2\u0003",
    "\u0002\u0002\u0002\u04c2\u04c3\u0003\u0002\u0002\u0002\u04c3\u04c4\u0007",
    "\u001e\u0002\u0002\u04c4\u04c5\u0005\u0104\u0083\u0002\u04c5\u04c6\u0005",
    "\u00fe\u0080\u0002\u04c6\u04d1\u0003\u0002\u0002\u0002\u04c7\u04c9\u0007",
    "#\u0002\u0002\u04c8\u04ca\u0005\u00f8}\u0002\u04c9\u04c8\u0003\u0002",
    "\u0002\u0002\u04c9\u04ca\u0003\u0002\u0002\u0002\u04ca\u04cb\u0003\u0002",
    "\u0002\u0002\u04cb\u04cc\u0007\u001e\u0002\u0002\u04cc\u04d1\u0005\u0104",
    "\u0083\u0002\u04cd\u04ce\u00072\u0002\u0002\u04ce\u04cf\u0007\u001e",
    "\u0002\u0002\u04cf\u04d1\u0005\u0104\u0083\u0002\u04d0\u04bd\u0003\u0002",
    "\u0002\u0002\u04d0\u04c1\u0003\u0002\u0002\u0002\u04d0\u04c7\u0003\u0002",
    "\u0002\u0002\u04d0\u04cd\u0003\u0002\u0002\u0002\u04d1\u00ef\u0003\u0002",
    "\u0002\u0002\u04d2\u04d3\u0007\r\u0002\u0002\u04d3\u04d4\u0007\u001e",
    "\u0002\u0002\u04d4\u04d5\u0005\u0104\u0083\u0002\u04d5\u00f1\u0003\u0002",
    "\u0002\u0002\u04d6\u04d8\u0005\u00f8}\u0002\u04d7\u04d6\u0003\u0002",
    "\u0002\u0002\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8\u04d9\u0003\u0002",
    "\u0002\u0002\u04d9\u04da\u0007\u001e\u0002\u0002\u04da\u04db\u0005\u0104",
    "\u0083\u0002\u04db\u04dc\u0005\u00fe\u0080\u0002\u04dc\u00f3\u0003\u0002",
    "\u0002\u0002\u04dd\u04df\u0007#\u0002\u0002\u04de\u04e0\u0005\u00f8",
    "}\u0002\u04df\u04de\u0003\u0002\u0002\u0002\u04df\u04e0\u0003\u0002",
    "\u0002\u0002\u04e0\u04e1\u0003\u0002\u0002\u0002\u04e1\u04e2\u0007\u001e",
    "\u0002\u0002\u04e2\u04e3\u0005\u0104\u0083\u0002\u04e3\u00f5\u0003\u0002",
    "\u0002\u0002\u04e4\u04e5\u00072\u0002\u0002\u04e5\u04e6\u0007\u001e",
    "\u0002\u0002\u04e6\u04e7\u0005\u0104\u0083\u0002\u04e7\u00f7\u0003\u0002",
    "\u0002\u0002\u04e8\u04eb\u0007\u001a\u0002\u0002\u04e9\u04eb\u0005\u00fa",
    "~\u0002\u04ea\u04e8\u0003\u0002\u0002\u0002\u04ea\u04e9\u0003\u0002",
    "\u0002\u0002\u04eb\u00f9\u0003\u0002\u0002\u0002\u04ec\u04ee\u0005\u00fc",
    "\u007f\u0002\u04ed\u04ef\u0007\'\u0002\u0002\u04ee\u04ed\u0003\u0002",
    "\u0002\u0002\u04ee\u04ef\u0003\u0002\u0002\u0002\u04ef\u00fb\u0003\u0002",
    "\u0002\u0002\u04f0\u04f1\t\u000b\u0002\u0002\u04f1\u00fd\u0003\u0002",
    "\u0002\u0002\u04f2\u04f5\u0005\u0100\u0081\u0002\u04f3\u04f5\u0005\u0102",
    "\u0082\u0002\u04f4\u04f2\u0003\u0002\u0002\u0002\u04f4\u04f3\u0003\u0002",
    "\u0002\u0002\u04f5\u00ff\u0003\u0002\u0002\u0002\u04f6\u04f7\u0007&",
    "\u0002\u0002\u04f7\u04f8\u0005\u010c\u0087\u0002\u04f8\u0101\u0003\u0002",
    "\u0002\u0002\u04f9\u04fa\u00074\u0002\u0002\u04fa\u04fb\u0007\u00ba",
    "\u0002\u0002\u04fb\u04fc\u0005\u0148\u00a5\u0002\u04fc\u04fd\u0007\u00bb",
    "\u0002\u0002\u04fd\u0103\u0003\u0002\u0002\u0002\u04fe\u0503\u0005\u0134",
    "\u009b\u0002\u04ff\u0501\u0007\u0003\u0002\u0002\u0500\u04ff\u0003\u0002",
    "\u0002\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501\u0502\u0003\u0002",
    "\u0002\u0002\u0502\u0504\u0005<\u001f\u0002\u0503\u0500\u0003\u0002",
    "\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504\u0509\u0003\u0002",
    "\u0002\u0002\u0505\u0506\u0007\u00ba\u0002\u0002\u0506\u0507\u0005\u0106",
    "\u0084\u0002\u0507\u0508\u0007\u00bb\u0002\u0002\u0508\u050a\u0003\u0002",
    "\u0002\u0002\u0509\u0505\u0003\u0002\u0002\u0002\u0509\u050a\u0003\u0002",
    "\u0002\u0002\u050a\u0517\u0003\u0002\u0002\u0002\u050b\u050d\u0005\u0108",
    "\u0085\u0002\u050c\u050e\u0007\u0003\u0002\u0002\u050d\u050c\u0003\u0002",
    "\u0002\u0002\u050d\u050e\u0003\u0002\u0002\u0002\u050e\u050f\u0003\u0002",
    "\u0002\u0002\u050f\u0514\u0005<\u001f\u0002\u0510\u0511\u0007\u00ba",
    "\u0002\u0002\u0511\u0512\u0005\u0106\u0084\u0002\u0512\u0513\u0007\u00bb",
    "\u0002\u0002\u0513\u0515\u0003\u0002\u0002\u0002\u0514\u0510\u0003\u0002",
    "\u0002\u0002\u0514\u0515\u0003\u0002\u0002\u0002\u0515\u0517\u0003\u0002",
    "\u0002\u0002\u0516\u04fe\u0003\u0002\u0002\u0002\u0516\u050b\u0003\u0002",
    "\u0002\u0002\u0517\u0105\u0003\u0002\u0002\u0002\u0518\u051d\u0005<",
    "\u001f\u0002\u0519\u051a\u0007\u00b3\u0002\u0002\u051a\u051c\u0005<",
    "\u001f\u0002\u051b\u0519\u0003\u0002\u0002\u0002\u051c\u051f\u0003\u0002",
    "\u0002\u0002\u051d\u051b\u0003\u0002\u0002\u0002\u051d\u051e\u0003\u0002",
    "\u0002\u0002\u051e\u0107\u0003\u0002\u0002\u0002\u051f\u051d\u0003\u0002",
    "\u0002\u0002\u0520\u0521\u0005\u014e\u00a8\u0002\u0521\u0109\u0003\u0002",
    "\u0002\u0002\u0522\u0523\u00076\u0002\u0002\u0523\u0524\u0005\u010c",
    "\u0087\u0002\u0524\u010b\u0003\u0002\u0002\u0002\u0525\u0526\u0005\u009c",
    "O\u0002\u0526\u010d\u0003\u0002\u0002\u0002\u0527\u0528\u0007\u0016",
    "\u0002\u0002\u0528\u0529\u0007:\u0002\u0002\u0529\u052a\u0005\u0110",
    "\u0089\u0002\u052a\u010f\u0003\u0002\u0002\u0002\u052b\u0530\u0005\u0112",
    "\u008a\u0002\u052c\u052d\u0007\u00b3\u0002\u0002\u052d\u052f\u0005\u0112",
    "\u008a\u0002\u052e\u052c\u0003\u0002\u0002\u0002\u052f\u0532\u0003\u0002",
    "\u0002\u0002\u0530\u052e\u0003\u0002\u0002\u0002\u0530\u0531\u0003\u0002",
    "\u0002\u0002\u0531\u0111\u0003\u0002\u0002\u0002\u0532\u0530\u0003\u0002",
    "\u0002\u0002\u0533\u0538\u0005\u0118\u008d\u0002\u0534\u0538\u0005\u011a",
    "\u008e\u0002\u0535\u0538\u0005\u011c\u008f\u0002\u0536\u0538\u0005\u0114",
    "\u008b\u0002\u0537\u0533\u0003\u0002\u0002\u0002\u0537\u0534\u0003\u0002",
    "\u0002\u0002\u0537\u0535\u0003\u0002\u0002\u0002\u0537\u0536\u0003\u0002",
    "\u0002\u0002\u0538\u0113\u0003\u0002\u0002\u0002\u0539\u053f\u0005\u00e0",
    "q\u0002\u053a\u053b\u0007\u00ba\u0002\u0002\u053b\u053c\u0005\u0120",
    "\u0091\u0002\u053c\u053d\u0007\u00bb\u0002\u0002\u053d\u053f\u0003\u0002",
    "\u0002\u0002\u053e\u0539\u0003\u0002\u0002\u0002\u053e\u053a\u0003\u0002",
    "\u0002\u0002\u053f\u0115\u0003\u0002\u0002\u0002\u0540\u0545\u0005\u0114",
    "\u008b\u0002\u0541\u0542\u0007\u00b3\u0002\u0002\u0542\u0544\u0005\u0114",
    "\u008b\u0002\u0543\u0541\u0003\u0002\u0002\u0002\u0544\u0547\u0003\u0002",
    "\u0002\u0002\u0545\u0543\u0003\u0002\u0002\u0002\u0545\u0546\u0003\u0002",
    "\u0002\u0002\u0546\u0117\u0003\u0002\u0002\u0002\u0547\u0545\u0003\u0002",
    "\u0002\u0002\u0548\u0549\u0007p\u0002\u0002\u0549\u054a\u0007\u00ba",
    "\u0002\u0002\u054a\u054b\u0005\u0116\u008c\u0002\u054b\u054c\u0007\u00bb",
    "\u0002\u0002\u054c\u0119\u0003\u0002\u0002\u0002\u054d\u054e\u0007A",
    "\u0002\u0002\u054e\u054f\u0007\u00ba\u0002\u0002\u054f\u0550\u0005\u0116",
    "\u008c\u0002\u0550\u0551\u0007\u00bb\u0002\u0002\u0551\u011b\u0003\u0002",
    "\u0002\u0002\u0552\u0553\u0007\u00ba\u0002\u0002\u0553\u0554\u0007\u00bb",
    "\u0002\u0002\u0554\u011d\u0003\u0002\u0002\u0002\u0555\u0556\u0007\u0017",
    "\u0002\u0002\u0556\u0557\u0005\u00c6d\u0002\u0557\u011f\u0003\u0002",
    "\u0002\u0002\u0558\u055d\u0005\u00e0q\u0002\u0559\u055a\u0007\u00b3",
    "\u0002\u0002\u055a\u055c\u0005\u00e0q\u0002\u055b\u0559\u0003\u0002",
    "\u0002\u0002\u055c\u055f\u0003\u0002\u0002\u0002\u055d\u055b\u0003\u0002",
    "\u0002\u0002\u055d\u055e\u0003\u0002\u0002\u0002\u055e\u0121\u0003\u0002",
    "\u0002\u0002\u055f\u055d\u0003\u0002\u0002\u0002\u0560\u0561\u0005\u0124",
    "\u0093\u0002\u0561\u0123\u0003\u0002\u0002\u0002\u0562\u0565\u0005\u0126",
    "\u0094\u0002\u0563\u0565\u0005\u00ecw\u0002\u0564\u0562\u0003\u0002",
    "\u0002\u0002\u0564\u0563\u0003\u0002\u0002\u0002\u0565\u0125\u0003\u0002",
    "\u0002\u0002\u0566\u056f\u0005\u012a\u0096\u0002\u0567\u0568\u0005\u00ec",
    "w\u0002\u0568\u056a\t\f\u0002\u0002\u0569\u056b\t\r\u0002\u0002\u056a",
    "\u0569\u0003\u0002\u0002\u0002\u056a\u056b\u0003\u0002\u0002\u0002\u056b",
    "\u056c\u0003\u0002\u0002\u0002\u056c\u056d\u0005\u0128\u0095\u0002\u056d",
    "\u056f\u0003\u0002\u0002\u0002\u056e\u0566\u0003\u0002\u0002\u0002\u056e",
    "\u0567\u0003\u0002\u0002\u0002\u056f\u0577\u0003\u0002\u0002\u0002\u0570",
    "\u0572\t\f\u0002\u0002\u0571\u0573\t\r\u0002\u0002\u0572\u0571\u0003",
    "\u0002\u0002\u0002\u0572\u0573\u0003\u0002\u0002\u0002\u0573\u0574\u0003",
    "\u0002\u0002\u0002\u0574\u0576\u0005\u0128\u0095\u0002\u0575\u0570\u0003",
    "\u0002\u0002\u0002\u0576\u0579\u0003\u0002\u0002\u0002\u0577\u0575\u0003",
    "\u0002\u0002\u0002\u0577\u0578\u0003\u0002\u0002\u0002\u0578\u0127\u0003",
    "\u0002\u0002\u0002\u0579\u0577\u0003\u0002\u0002\u0002\u057a\u057d\u0005",
    "\u012a\u0096\u0002\u057b\u057d\u0005\u00ecw\u0002\u057c\u057a\u0003",
    "\u0002\u0002\u0002\u057c\u057b\u0003\u0002\u0002\u0002\u057d\u0129\u0003",
    "\u0002\u0002\u0002\u057e\u0587\u0005\u012e\u0098\u0002\u057f\u0580\u0005",
    "\u00ecw\u0002\u0580\u0582\u0007\u001b\u0002\u0002\u0581\u0583\t\r\u0002",
    "\u0002\u0582\u0581\u0003\u0002\u0002\u0002\u0582\u0583\u0003\u0002\u0002",
    "\u0002\u0583\u0584\u0003\u0002\u0002\u0002\u0584\u0585\u0005\u012c\u0097",
    "\u0002\u0585\u0587\u0003\u0002\u0002\u0002\u0586\u057e\u0003\u0002\u0002",
    "\u0002\u0586\u057f\u0003\u0002\u0002\u0002\u0587\u058f\u0003\u0002\u0002",
    "\u0002\u0588\u058a\u0007\u001b\u0002\u0002\u0589\u058b\t\r\u0002\u0002",
    "\u058a\u0589\u0003\u0002\u0002\u0002\u058a\u058b\u0003\u0002\u0002\u0002",
    "\u058b\u058c\u0003\u0002\u0002\u0002\u058c\u058e\u0005\u012c\u0097\u0002",
    "\u058d\u0588\u0003\u0002\u0002\u0002\u058e\u0591\u0003\u0002\u0002\u0002",
    "\u058f\u058d\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002",
    "\u0590\u012b\u0003\u0002\u0002\u0002\u0591\u058f\u0003\u0002\u0002\u0002",
    "\u0592\u0595\u0005\u012e\u0098\u0002\u0593\u0595\u0005\u00ecw\u0002",
    "\u0594\u0592\u0003\u0002\u0002\u0002\u0594\u0593\u0003\u0002\u0002\u0002",
    "\u0595\u012d\u0003\u0002\u0002\u0002\u0596\u059c\u0005\u0130\u0099\u0002",
    "\u0597\u0598\u0007\u00ba\u0002\u0002\u0598\u0599\u0005\u0126\u0094\u0002",
    "\u0599\u059a\u0007\u00bb\u0002\u0002\u059a\u059c\u0003\u0002\u0002\u0002",
    "\u059b\u0596\u0003\u0002\u0002\u0002\u059b\u0597\u0003\u0002\u0002\u0002",
    "\u059c\u012f\u0003\u0002\u0002\u0002\u059d\u05a0\u0005\u0138\u009d\u0002",
    "\u059e\u05a0\u0005\u0132\u009a\u0002\u059f\u059d\u0003\u0002\u0002\u0002",
    "\u059f\u059e\u0003\u0002\u0002\u0002\u05a0\u0131\u0003\u0002\u0002\u0002",
    "\u05a1\u05a2\u0007.\u0002\u0002\u05a2\u05a3\u0005\u0134\u009b\u0002",
    "\u05a3\u0133\u0003\u0002\u0002\u0002\u05a4\u05a7\u0005\u0136\u009c\u0002",
    "\u05a5\u05a7\u0005<\u001f\u0002\u05a6\u05a4\u0003\u0002\u0002\u0002",
    "\u05a6\u05a5\u0003\u0002\u0002\u0002\u05a7\u0135\u0003\u0002\u0002\u0002",
    "\u05a8\u05af\u0005<\u001f\u0002\u05a9\u05aa\u0007\u00c1\u0002\u0002",
    "\u05aa\u05ad\u0005<\u001f\u0002\u05ab\u05ac\u0007\u00c1\u0002\u0002",
    "\u05ac\u05ae\u0005<\u001f\u0002\u05ad\u05ab\u0003\u0002\u0002\u0002",
    "\u05ad\u05ae\u0003\u0002\u0002\u0002\u05ae\u05b0\u0003\u0002\u0002\u0002",
    "\u05af\u05a9\u0003\u0002\u0002\u0002\u05af\u05b0\u0003\u0002\u0002\u0002",
    "\u05b0\u0137\u0003\u0002\u0002\u0002\u05b1\u05b3\u0007+\u0002\u0002",
    "\u05b2\u05b4\u0005\u0142\u00a2\u0002\u05b3\u05b2\u0003\u0002\u0002\u0002",
    "\u05b3\u05b4\u0003\u0002\u0002\u0002\u05b4\u05b5\u0003\u0002\u0002\u0002",
    "\u05b5\u05b7\u0005\u013a\u009e\u0002\u05b6\u05b8\u0005\u00e4s\u0002",
    "\u05b7\u05b6\u0003\u0002\u0002\u0002\u05b7\u05b8\u0003\u0002\u0002\u0002",
    "\u05b8\u0139\u0003\u0002\u0002\u0002\u05b9\u05be\u0005\u013c\u009f\u0002",
    "\u05ba\u05bb\u0007\u00b3\u0002\u0002\u05bb\u05bd\u0005\u013c\u009f\u0002",
    "\u05bc\u05ba\u0003\u0002\u0002\u0002\u05bd\u05c0\u0003\u0002\u0002\u0002",
    "\u05be\u05bc\u0003\u0002\u0002\u0002\u05be\u05bf\u0003\u0002\u0002\u0002",
    "\u05bf\u013b\u0003\u0002\u0002\u0002\u05c0\u05be\u0003\u0002\u0002\u0002",
    "\u05c1\u05c4\u0005\u013e\u00a0\u0002\u05c2\u05c4\u0005\u0140\u00a1\u0002",
    "\u05c3\u05c1\u0003\u0002\u0002\u0002\u05c3\u05c2\u0003\u0002\u0002\u0002",
    "\u05c4\u013d\u0003\u0002\u0002\u0002\u05c5\u05c7\u0005\u009cO\u0002",
    "\u05c6\u05c8\u0005\u0146\u00a4\u0002\u05c7\u05c6\u0003\u0002\u0002\u0002",
    "\u05c7\u05c8\u0003\u0002\u0002\u0002\u05c8\u013f\u0003\u0002\u0002\u0002",
    "\u05c9\u05ca\u0007\u00ca\u0002\u0002\u05ca\u05cc\u0007\u00c1\u0002\u0002",
    "\u05cb\u05c9\u0003\u0002\u0002\u0002\u05cb\u05cc\u0003\u0002\u0002\u0002",
    "\u05cc\u05cd\u0003\u0002\u0002\u0002\u05cd\u05ce\u0007\u00be\u0002\u0002",
    "\u05ce\u0141\u0003\u0002\u0002\u0002\u05cf\u05d0\t\r\u0002\u0002\u05d0",
    "\u0143\u0003\u0002\u0002\u0002\u05d1\u05d2\u0005<\u001f\u0002\u05d2",
    "\u05d3\u0007\u00c1\u0002\u0002\u05d3\u05d5\u0003\u0002\u0002\u0002\u05d4",
    "\u05d1\u0003\u0002\u0002\u0002\u05d4\u05d5\u0003\u0002\u0002\u0002\u05d5",
    "\u05d6\u0003\u0002\u0002\u0002\u05d6\u05d7\u0005<\u001f\u0002\u05d7",
    "\u0145\u0003\u0002\u0002\u0002\u05d8\u05da\u0007\u0003\u0002\u0002\u05d9",
    "\u05d8\u0003\u0002\u0002\u0002\u05d9\u05da\u0003\u0002\u0002\u0002\u05da",
    "\u05db\u0003\u0002\u0002\u0002\u05db\u05dc\u0005<\u001f\u0002\u05dc",
    "\u0147\u0003\u0002\u0002\u0002\u05dd\u05e2\u0005\u0144\u00a3\u0002\u05de",
    "\u05df\u0007\u00b3\u0002\u0002\u05df\u05e1\u0005\u0144\u00a3\u0002\u05e0",
    "\u05de\u0003\u0002\u0002\u0002\u05e1\u05e4\u0003\u0002\u0002\u0002\u05e2",
    "\u05e0\u0003\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3",
    "\u0149\u0003\u0002\u0002\u0002\u05e4\u05e2\u0003\u0002\u0002\u0002\u05e5",
    "\u05e6\u0005\u0150\u00a9\u0002\u05e6\u014b\u0003\u0002\u0002\u0002\u05e7",
    "\u05e8\u0005\u0150\u00a9\u0002\u05e8\u014d\u0003\u0002\u0002\u0002\u05e9",
    "\u05ea\u0005\u0150\u00a9\u0002\u05ea\u014f\u0003\u0002\u0002\u0002\u05eb",
    "\u05ec\u0007\u00ba\u0002\u0002\u05ec\u05ed\u0005\u0122\u0092\u0002\u05ed",
    "\u05ee\u0007\u00bb\u0002\u0002\u05ee\u0151\u0003\u0002\u0002\u0002\u05ef",
    "\u05f6\u0005\u0154\u00ab\u0002\u05f0\u05f6\u0005\u0158\u00ad\u0002\u05f1",
    "\u05f6\u0005\u015c\u00af\u0002\u05f2\u05f6\u0005\u0162\u00b2\u0002\u05f3",
    "\u05f6\u0005\u016a\u00b6\u0002\u05f4\u05f6\u0005\u0174\u00bb\u0002\u05f5",
    "\u05ef\u0003\u0002\u0002\u0002\u05f5\u05f0\u0003\u0002\u0002\u0002\u05f5",
    "\u05f1\u0003\u0002\u0002\u0002\u05f5\u05f2\u0003\u0002\u0002\u0002\u05f5",
    "\u05f3\u0003\u0002\u0002\u0002\u05f5\u05f4\u0003\u0002\u0002\u0002\u05f6",
    "\u0153\u0003\u0002\u0002\u0002\u05f7\u05f8\u0005\u00e0q\u0002\u05f8",
    "\u05f9\u0005\u0156\u00ac\u0002\u05f9\u05fa\u0005\u00e0q\u0002\u05fa",
    "\u0155\u0003\u0002\u0002\u0002\u05fb\u05fc\t\u000e\u0002\u0002\u05fc",
    "\u0157\u0003\u0002\u0002\u0002\u05fd\u05fe\u0005\u00e0q\u0002\u05fe",
    "\u05ff\u0005\u015a\u00ae\u0002\u05ff\u0159\u0003\u0002\u0002\u0002\u0600",
    "\u0602\u0007$\u0002\u0002\u0601\u0600\u0003\u0002\u0002\u0002\u0601",
    "\u0602\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002\u0002\u0603",
    "\u0605\u00079\u0002\u0002\u0604\u0606\t\u000f\u0002\u0002\u0605\u0604",
    "\u0003\u0002\u0002\u0002\u0605\u0606\u0003\u0002\u0002\u0002\u0606\u0607",
    "\u0003\u0002\u0002\u0002\u0607\u0608\u0005\u00e0q\u0002\u0608\u0609",
    "\u0007\u0005\u0002\u0002\u0609\u060a\u0005\u00e0q\u0002\u060a\u015b",
    "\u0003\u0002\u0002\u0002\u060b\u060d\u0005\u00a0Q\u0002\u060c\u060e",
    "\u0007$\u0002\u0002\u060d\u060c\u0003\u0002\u0002\u0002\u060d\u060e",
    "\u0003\u0002\u0002\u0002\u060e\u060f\u0003\u0002\u0002\u0002\u060f\u0610",
    "\u0007\u0019\u0002\u0002\u0610\u0611\u0005\u015e\u00b0\u0002\u0611\u015d",
    "\u0003\u0002\u0002\u0002\u0612\u0618\u0005\u014e\u00a8\u0002\u0613\u0614",
    "\u0007\u00ba\u0002\u0002\u0614\u0615\u0005\u0160\u00b1\u0002\u0615\u0616",
    "\u0007\u00bb\u0002\u0002\u0616\u0618\u0003\u0002\u0002\u0002\u0617\u0612",
    "\u0003\u0002\u0002\u0002\u0617\u0613\u0003\u0002\u0002\u0002\u0618\u015f",
    "\u0003\u0002\u0002\u0002\u0619\u061e\u0005\u00dan\u0002\u061a\u061b",
    "\u0007\u00b3\u0002\u0002\u061b\u061d\u0005\u00dan\u0002\u061c\u061a",
    "\u0003\u0002\u0002\u0002\u061d\u0620\u0003\u0002\u0002\u0002\u061e\u061c",
    "\u0003\u0002\u0002\u0002\u061e\u061f\u0003\u0002\u0002\u0002\u061f\u0161",
    "\u0003\u0002\u0002\u0002\u0620\u061e\u0003\u0002\u0002\u0002\u0621\u0622",
    "\u0005\u00e0q\u0002\u0622\u0623\u0005\u0164\u00b3\u0002\u0623\u0624",
    "\u0007\u00cb\u0002\u0002\u0624\u0163\u0003\u0002\u0002\u0002\u0625\u0627",
    "\u0007$\u0002\u0002\u0626\u0625\u0003\u0002\u0002\u0002\u0626\u0627",
    "\u0003\u0002\u0002\u0002\u0627\u0628\u0003\u0002\u0002\u0002\u0628\u062b",
    "\u0005\u0166\u00b4\u0002\u0629\u062b\u0005\u0168\u00b5\u0002\u062a\u0626",
    "\u0003\u0002\u0002\u0002\u062a\u0629\u0003\u0002\u0002\u0002\u062b\u0165",
    "\u0003\u0002\u0002\u0002\u062c\u0633\u0007!\u0002\u0002\u062d\u0633",
    "\u0007\u0018\u0002\u0002\u062e\u062f\u0007s\u0002\u0002\u062f\u0633",
    "\u0007~\u0002\u0002\u0630\u0633\u0007n\u0002\u0002\u0631\u0633\u0007",
    "o\u0002\u0002\u0632\u062c\u0003\u0002\u0002\u0002\u0632\u062d\u0003",
    "\u0002\u0002\u0002\u0632\u062e\u0003\u0002\u0002\u0002\u0632\u0630\u0003",
    "\u0002\u0002\u0002\u0632\u0631\u0003\u0002\u0002\u0002\u0633\u0167\u0003",
    "\u0002\u0002\u0002\u0634\u0635\t\u0010\u0002\u0002\u0635\u0169\u0003",
    "\u0002\u0002\u0002\u0636\u0637\u0005\u00e0q\u0002\u0637\u0639\u0007",
    "\u001d\u0002\u0002\u0638\u063a\u0007$\u0002\u0002\u0639\u0638\u0003",
    "\u0002\u0002\u0002\u0639\u063a\u0003\u0002\u0002\u0002\u063a\u063b\u0003",
    "\u0002\u0002\u0002\u063b\u063c\u0007%\u0002\u0002\u063c\u016b\u0003",
    "\u0002\u0002\u0002\u063d\u063e\u0005\u00a0Q\u0002\u063e\u063f\u0005",
    "\u0156\u00ac\u0002\u063f\u0640\u0005\u016e\u00b8\u0002\u0640\u0641\u0005",
    "\u014e\u00a8\u0002\u0641\u016d\u0003\u0002\u0002\u0002\u0642\u0645\u0005",
    "\u0170\u00b9\u0002\u0643\u0645\u0005\u0172\u00ba\u0002\u0644\u0642\u0003",
    "\u0002\u0002\u0002\u0644\u0643\u0003\u0002\u0002\u0002\u0645\u016f\u0003",
    "\u0002\u0002\u0002\u0646\u0647\u0007\u0004\u0002\u0002\u0647\u0171\u0003",
    "\u0002\u0002\u0002\u0648\u0649\t\u0011\u0002\u0002\u0649\u0173\u0003",
    "\u0002\u0002\u0002\u064a\u064c\u0007$\u0002\u0002\u064b\u064a\u0003",
    "\u0002\u0002\u0002\u064b\u064c\u0003\u0002\u0002\u0002\u064c\u064d\u0003",
    "\u0002\u0002\u0002\u064d\u064e\u0007J\u0002\u0002\u064e\u064f\u0005",
    "\u014e\u00a8\u0002\u064f\u0175\u0003\u0002\u0002\u0002\u0650\u0651\u0007",
    "3\u0002\u0002\u0651\u0652\u0005\u014e\u00a8\u0002\u0652\u0177\u0003",
    "\u0002\u0002\u0002\u0653\u0656\u0005\u017a\u00be\u0002\u0654\u0656\u0007",
    "q\u0002\u0002\u0655\u0653\u0003\u0002\u0002\u0002\u0655\u0654\u0003",
    "\u0002\u0002\u0002\u0656\u0179\u0003\u0002\u0002\u0002\u0657\u0658\t",
    "\u0012\u0002\u0002\u0658\u017b\u0003\u0002\u0002\u0002\u0659\u065a\t",
    "\u0013\u0002\u0002\u065a\u017d\u0003\u0002\u0002\u0002\u065b\u065c\u0005",
    "\u0182\u00c2\u0002\u065c\u065e\u0007\u00ba\u0002\u0002\u065d\u065f\u0005",
    "\u0184\u00c3\u0002\u065e\u065d\u0003\u0002\u0002\u0002\u065e\u065f\u0003",
    "\u0002\u0002\u0002\u065f\u0660\u0003\u0002\u0002\u0002\u0660\u0661\u0007",
    "\u00bb\u0002\u0002\u0661\u017f\u0003\u0002\u0002\u0002\u0662\u0663\t",
    "\u0014\u0002\u0002\u0663\u0181\u0003\u0002\u0002\u0002\u0664\u0667\u0005",
    "<\u001f\u0002\u0665\u0667\u0005\u0180\u00c1\u0002\u0666\u0664\u0003",
    "\u0002\u0002\u0002\u0666\u0665\u0003\u0002\u0002\u0002\u0667\u0183\u0003",
    "\u0002\u0002\u0002\u0668\u066d\u0005\u009cO\u0002\u0669\u066a\u0007",
    "\u00b3\u0002\u0002\u066a\u066c\u0005\u009cO\u0002\u066b\u0669\u0003",
    "\u0002\u0002\u0002\u066c\u066f\u0003\u0002\u0002\u0002\u066d\u066b\u0003",
    "\u0002\u0002\u0002\u066d\u066e\u0003\u0002\u0002\u0002\u066e\u0185\u0003",
    "\u0002\u0002\u0002\u066f\u066d\u0003\u0002\u0002\u0002\u0670\u0671\u0007",
    ")\u0002\u0002\u0671\u0672\u0007:\u0002\u0002\u0672\u0673\u0005\u0188",
    "\u00c5\u0002\u0673\u0187\u0003\u0002\u0002\u0002\u0674\u0679\u0005\u018a",
    "\u00c6\u0002\u0675\u0676\u0007\u00b3\u0002\u0002\u0676\u0678\u0005\u018a",
    "\u00c6\u0002\u0677\u0675\u0003\u0002\u0002\u0002\u0678\u067b\u0003\u0002",
    "\u0002\u0002\u0679\u0677\u0003\u0002\u0002\u0002\u0679\u067a\u0003\u0002",
    "\u0002\u0002\u067a\u0189\u0003\u0002\u0002\u0002\u067b\u0679\u0003\u0002",
    "\u0002\u0002\u067c\u067e\u0005\u00e0q\u0002\u067d\u067f\u0005\u018c",
    "\u00c7\u0002\u067e\u067d\u0003\u0002\u0002\u0002\u067e\u067f\u0003\u0002",
    "\u0002\u0002\u067f\u0681\u0003\u0002\u0002\u0002\u0680\u0682\u0005\u0190",
    "\u00c9\u0002\u0681\u0680\u0003\u0002\u0002\u0002\u0681\u0682\u0003\u0002",
    "\u0002\u0002\u0682\u018b\u0003\u0002\u0002\u0002\u0683\u0684\t\u0015",
    "\u0002\u0002\u0684\u018d\u0003\u0002\u0002\u0002\u0685\u0686\u0007\"",
    "\u0002\u0002\u0686\u0687\u0005\u00a0Q\u0002\u0687\u018f\u0003\u0002",
    "\u0002\u0002\u0688\u0689\u0007%\u0002\u0002\u0689\u068d\u0007N\u0002",
    "\u0002\u068a\u068b\u0007%\u0002\u0002\u068b\u068d\u0007Y\u0002\u0002",
    "\u068c\u0688\u0003\u0002\u0002\u0002\u068c\u068a\u0003\u0002\u0002\u0002",
    "\u068d\u0191\u0003\u0002\u0002\u0002\u068e\u0690\u0007U\u0002\u0002",
    "\u068f\u0691\u0007g\u0002\u0002\u0690\u068f\u0003\u0002\u0002\u0002",
    "\u0690\u0691\u0003\u0002\u0002\u0002\u0691\u0692\u0003\u0002\u0002\u0002",
    "\u0692\u0693\u0007\u001c\u0002\u0002\u0693\u0698\u0005\u0136\u009c\u0002",
    "\u0694\u0695\u0007\u00ba\u0002\u0002\u0695\u0696\u0005\u0106\u0084\u0002",
    "\u0696\u0697\u0007\u00bb\u0002\u0002\u0697\u0699\u0003\u0002\u0002\u0002",
    "\u0698\u0694\u0003\u0002\u0002\u0002\u0698\u0699\u0003\u0002\u0002\u0002",
    "\u0699\u069a\u0003\u0002\u0002\u0002\u069a\u069b\u0005\u0122\u0092\u0002",
    "\u069b\u06ac\u0003\u0002\u0002\u0002\u069c\u069e\u0007U\u0002\u0002",
    "\u069d\u069f\u0007g\u0002\u0002\u069e\u069d\u0003\u0002\u0002\u0002",
    "\u069e\u069f\u0003\u0002\u0002\u0002\u069f\u06a0\u0003\u0002\u0002\u0002",
    "\u06a0\u06a1\u0007\u001c\u0002\u0002\u06a1\u06a2\u0007\\\u0002\u0002",
    "\u06a2\u06a8\u0007\u00cb\u0002\u0002\u06a3\u06a4\u00074\u0002\u0002",
    "\u06a4\u06a6\u0005<\u001f\u0002\u06a5\u06a7\u0005\u0016\f\u0002\u06a6",
    "\u06a5\u0003\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002\u0002\u0002\u06a7",
    "\u06a9\u0003\u0002\u0002\u0002\u06a8\u06a3\u0003\u0002\u0002\u0002\u06a8",
    "\u06a9\u0003\u0002\u0002\u0002\u06a9\u06aa\u0003\u0002\u0002\u0002\u06aa",
    "\u06ac\u0005\u0122\u0092\u0002\u06ab\u068e\u0003\u0002\u0002\u0002\u06ab",
    "\u069c\u0003\u0002\u0002\u0002\u06ac\u0193\u0003\u0002\u0002\u0002\u00bc",
    "\u0196\u019e\u01a6\u01aa\u01b1\u01b7\u01c1\u01c4\u01cf\u01d2\u01d5\u01d9",
    "\u01e0\u01e3\u01e6\u01eb\u01f3\u0204\u0219\u022a\u0237\u023b\u023d\u024a",
    "\u0251\u0269\u0270\u0281\u0285\u028b\u0290\u0295\u02ad\u02b3\u02b7\u02bc",
    "\u02c1\u02c5\u02c8\u02d1\u02d6\u02da\u02e0\u02e6\u02eb\u02ef\u02f1\u02f5",
    "\u02f9\u02fb\u02ff\u0303\u0307\u030b\u0316\u031a\u0322\u032c\u033d\u0341",
    "\u0345\u034a\u034c\u0350\u0355\u0359\u035b\u035f\u036c\u0373\u037f\u0381",
    "\u0386\u03a8\u03ac\u03b0\u03b7\u03ba\u03c2\u03c5\u03d8\u03e8\u03ed\u03f4",
    "\u03fc\u0400\u040a\u0414\u0418\u0428\u042e\u0437\u043e\u0448\u044b\u044e",
    "\u0455\u0460\u0468\u046e\u0472\u0476\u047e\u0482\u048a\u0492\u0496\u049a",
    "\u049d\u04a0\u04a3\u04a6\u04b0\u04b5\u04bb\u04c1\u04c9\u04d0\u04d7\u04df",
    "\u04ea\u04ee\u04f4\u0500\u0503\u0509\u050d\u0514\u0516\u051d\u0530\u0537",
    "\u053e\u0545\u055d\u0564\u056a\u056e\u0572\u0577\u057c\u0582\u0586\u058a",
    "\u058f\u0594\u059b\u059f\u05a6\u05ad\u05af\u05b3\u05b7\u05be\u05c3\u05c7",
    "\u05cb\u05d4\u05d9\u05e2\u05f5\u0601\u0605\u060d\u0617\u061e\u0626\u062a",
    "\u0632\u0639\u0644\u064b\u0655\u065e\u0666\u066d\u0679\u067e\u0681\u068c",
    "\u0690\u0698\u069e\u06a6\u06a8\u06ab"].join("");


var literalNames = [ 'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     "'~'", "'!~'", "'~*'", "'!~*'", 'null', "':='", "'='", 
                     "':'", "';'", "','", 'null', 'null', "'<'", "'<='", 
                     "'>'", "'>='", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
                     "'%'", "'.'", "'_'", "'|'", "'''", "'\"'", 'null', 
                     'null', 'null', 'null', 'null', 'null', "' '" ];

var symbolicNames = [ 'null', "AS", "ALL", "AND", "ANY", "ASYMMETRIC", "ASC", 
                      "BOTH", "CASE", "CAST", "CREATE", "CROSS", "DESC", 
                      "DISTINCT", "END", "ELSE", "EXCEPT", "FALSE", "FULL", 
                      "FROM", "GROUP", "HAVING", "ILIKE", "IN", "INNER", 
                      "INTERSECT", "INTO", "IS", "JOIN", "LEADING", "LEFT", 
                      "LIKE", "LIMIT", "NATURAL", "NOT", "NULL", "ON", "OUTER", 
                      "OR", "ORDER", "RIGHT", "SELECT", "SOME", "SYMMETRIC", 
                      "TABLE", "THEN", "TRAILING", "TRUE", "UNION", "UNIQUE", 
                      "USING", "WHEN", "WHERE", "WITH", "AVG", "BETWEEN", 
                      "BY", "CENTURY", "CHARACTER", "COLLECT", "COALESCE", 
                      "COLUMN", "COUNT", "CUBE", "DAY", "DEC", "DECADE", 
                      "DOW", "DOY", "DROP", "EPOCH", "EVERY", "EXISTS", 
                      "EXTERNAL", "EXTRACT", "FILTER", "FIRST", "FORMAT", 
                      "FUSION", "GROUPING", "HASH", "HOUR", "INDEX", "INSERT", 
                      "INTERSECTION", "ISODOW", "ISOYEAR", "LAST", "LESS", 
                      "LIST", "LOCATION", "MAX", "MAXVALUE", "MICROSECONDS", 
                      "MILLENNIUM", "MILLISECONDS", "MIN", "MINUTE", "MONTH", 
                      "NATIONAL", "NULLIF", "OVERWRITE", "PARTITION", "PARTITIONS", 
                      "PRECISION", "PURGE", "QUARTER", "RANGE", "REGEXP", 
                      "RLIKE", "ROLLUP", "SECOND", "SET", "SIMILAR", "STDDEV_POP", 
                      "STDDEV_SAMP", "SUBPARTITION", "SUM", "TABLESPACE", 
                      "THAN", "TIMEZONE", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                      "TRIM", "TO", "UNKNOWN", "VALUES", "VAR_SAMP", "VAR_POP", 
                      "VARYING", "WEEK", "YEAR", "ZONE", "BOOLEAN", "BOOL", 
                      "BIT", "VARBIT", "INT1", "INT2", "INT4", "INT8", "TINYINT", 
                      "SMALLINT", "INT", "INTEGER", "BIGINT", "FLOAT4", 
                      "FLOAT8", "REAL", "FLOAT", "DOUBLE", "NUMERIC", "DECIMAL", 
                      "CHAR", "VARCHAR", "NCHAR", "NVARCHAR", "DATE", "TIME", 
                      "TIMETZ", "TIMESTAMP", "TIMESTAMPTZ", "TEXT", "BINARY", 
                      "VARBINARY", "BLOB", "BYTEA", "INET4", "Similar_To", 
                      "Not_Similar_To", "Similar_To_Case_Insensitive", "Not_Similar_To_Case_Insensitive", 
                      "CAST_EXPRESSION", "ASSIGN", "EQUAL", "COLON", "SEMI_COLON", 
                      "COMMA", "CONCATENATION_OPERATOR", "NOT_EQUAL", "LTH", 
                      "LEQ", "GTH", "GEQ", "LEFT_PAREN", "RIGHT_PAREN", 
                      "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULAR", 
                      "DOT", "UNDERLINE", "VERTICAL_BAR", "QUOTE", "DOUBLE_QUOTE", 
                      "NUMBER", "REAL_NUMBER", "BlockComment", "LineComment", 
                      "Identifier", "Character_String_Literal", "Space", 
                      "White_Space", "BAD" ];

var ruleNames =  [ "sql", "statement", "data_statement", "data_change_statement", 
                   "schema_statement", "index_statement", "create_table_statement", 
                   "table_elements", "field_element", "field_type", "param_clause", 
                   "param", "method_specifier", "table_space_specifier", 
                   "table_space_name", "table_partitioning_clauses", "range_partitions", 
                   "range_value_clause_list", "range_value_clause", "hash_partitions", 
                   "individual_hash_partitions", "individual_hash_partition", 
                   "hash_partitions_by_quantity", "list_partitions", "list_value_clause_list", 
                   "list_value_partition", "column_partitions", "partition_name", 
                   "drop_table_statement", "identifier", "nonreserved_keywords", 
                   "unsigned_literal", "general_literal", "datetime_literal", 
                   "time_literal", "timestamp_literal", "date_literal", 
                   "boolean_literal", "data_type", "predefined_type", "network_type", 
                   "character_string_type", "type_length", "national_character_string_type", 
                   "binary_large_object_string_type", "numeric_type", "exact_numeric_type", 
                   "approximate_numeric_type", "precision_param", "boolean_type", 
                   "datetime_type", "bit_type", "binary_type", "value_expression_primary", 
                   "parenthesized_value_expression", "nonparenthesized_value_expression_primary", 
                   "unsigned_value_specification", "unsigned_numeric_literal", 
                   "signed_numerical_literal", "set_function_specification", 
                   "aggregate_function", "general_set_function", "set_function_type", 
                   "filter_clause", "grouping_operation", "case_expression", 
                   "case_abbreviation", "case_specification", "simple_case", 
                   "searched_case", "simple_when_clause", "searched_when_clause", 
                   "else_clause", "result", "cast_specification", "cast_operand", 
                   "cast_target", "value_expression", "common_value_expression", 
                   "numeric_value_expression", "term", "factor", "array", 
                   "numeric_primary", "sign", "numeric_value_function", 
                   "extract_expression", "extract_field", "time_zone_field", 
                   "extract_source", "string_value_expression", "character_value_expression", 
                   "character_factor", "character_primary", "string_value_function", 
                   "trim_function", "trim_operands", "trim_specification", 
                   "boolean_value_expression", "or_predicate", "and_predicate", 
                   "boolean_factor", "boolean_test", "is_clause", "truth_value", 
                   "boolean_primary", "boolean_predicand", "parenthesized_boolean_value_expression", 
                   "row_value_expression", "row_value_special_case", "explicit_row_value_constructor", 
                   "row_value_predicand", "row_value_constructor_predicand", 
                   "table_expression", "from_clause", "table_reference_list", 
                   "table_reference", "joined_table", "joined_table_primary", 
                   "cross_join", "qualified_join", "natural_join", "union_join", 
                   "join_type", "outer_join_type", "outer_join_type_part2", 
                   "join_specification", "join_condition", "named_columns_join", 
                   "table_primary", "column_name_list", "derived_table", 
                   "where_clause", "search_condition", "groupby_clause", 
                   "grouping_element_list", "grouping_element", "ordinary_grouping_set", 
                   "ordinary_grouping_set_list", "rollup_list", "cube_list", 
                   "empty_grouping_set", "having_clause", "row_value_predicand_list", 
                   "query_expression", "query_expression_body", "non_join_query_expression", 
                   "query_term", "non_join_query_term", "query_primary", 
                   "non_join_query_primary", "simple_table", "explicit_table", 
                   "table_or_query_name", "table_name", "query_specification", 
                   "select_list", "select_sublist", "derived_column", "qualified_asterisk", 
                   "set_qualifier", "column_reference", "as_clause", "column_reference_list", 
                   "scalar_subquery", "row_subquery", "table_subquery", 
                   "subquery", "predicate", "comparison_predicate", "comp_op", 
                   "between_predicate", "between_predicate_part_2", "in_predicate", 
                   "in_predicate_value", "in_value_list", "pattern_matching_predicate", 
                   "pattern_matcher", "negativable_matcher", "regex_matcher", 
                   "null_predicate", "quantified_comparison_predicate", 
                   "quantifier", "all", "some", "exists_predicate", "unique_predicate", 
                   "primary_datetime_field", "non_second_primary_datetime_field", 
                   "extended_datetime_field", "routine_invocation", "function_names_for_reserved_words", 
                   "function_name", "sql_argument_list", "orderby_clause", 
                   "sort_specifier_list", "sort_specifier", "order_specification", 
                   "limit_clause", "null_ordering", "insert_statement" ];

function SQLParser (input) {
    //NOTE: changed by SIREn Solutions
    var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
    var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });
    var sharedContextCache = new antlr4.PredictionContextCache();
    this.atn = atn;
    // end changes

	  antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;


    return this;
}

SQLParser.prototype = Object.create(antlr4.Parser.prototype);
SQLParser.prototype.constructor = SQLParser;

//NOTE changed by SIREn Solutions
/*
Object.defineProperty(SQLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});
*/

SQLParser.EOF = antlr4.Token.EOF;
SQLParser.AS = 1;
SQLParser.ALL = 2;
SQLParser.AND = 3;
SQLParser.ANY = 4;
SQLParser.ASYMMETRIC = 5;
SQLParser.ASC = 6;
SQLParser.BOTH = 7;
SQLParser.CASE = 8;
SQLParser.CAST = 9;
SQLParser.CREATE = 10;
SQLParser.CROSS = 11;
SQLParser.DESC = 12;
SQLParser.DISTINCT = 13;
SQLParser.END = 14;
SQLParser.ELSE = 15;
SQLParser.EXCEPT = 16;
SQLParser.FALSE = 17;
SQLParser.FULL = 18;
SQLParser.FROM = 19;
SQLParser.GROUP = 20;
SQLParser.HAVING = 21;
SQLParser.ILIKE = 22;
SQLParser.IN = 23;
SQLParser.INNER = 24;
SQLParser.INTERSECT = 25;
SQLParser.INTO = 26;
SQLParser.IS = 27;
SQLParser.JOIN = 28;
SQLParser.LEADING = 29;
SQLParser.LEFT = 30;
SQLParser.LIKE = 31;
SQLParser.LIMIT = 32;
SQLParser.NATURAL = 33;
SQLParser.NOT = 34;
SQLParser.NULL = 35;
SQLParser.ON = 36;
SQLParser.OUTER = 37;
SQLParser.OR = 38;
SQLParser.ORDER = 39;
SQLParser.RIGHT = 40;
SQLParser.SELECT = 41;
SQLParser.SOME = 42;
SQLParser.SYMMETRIC = 43;
SQLParser.TABLE = 44;
SQLParser.THEN = 45;
SQLParser.TRAILING = 46;
SQLParser.TRUE = 47;
SQLParser.UNION = 48;
SQLParser.UNIQUE = 49;
SQLParser.USING = 50;
SQLParser.WHEN = 51;
SQLParser.WHERE = 52;
SQLParser.WITH = 53;
SQLParser.AVG = 54;
SQLParser.BETWEEN = 55;
SQLParser.BY = 56;
SQLParser.CENTURY = 57;
SQLParser.CHARACTER = 58;
SQLParser.COLLECT = 59;
SQLParser.COALESCE = 60;
SQLParser.COLUMN = 61;
SQLParser.COUNT = 62;
SQLParser.CUBE = 63;
SQLParser.DAY = 64;
SQLParser.DEC = 65;
SQLParser.DECADE = 66;
SQLParser.DOW = 67;
SQLParser.DOY = 68;
SQLParser.DROP = 69;
SQLParser.EPOCH = 70;
SQLParser.EVERY = 71;
SQLParser.EXISTS = 72;
SQLParser.EXTERNAL = 73;
SQLParser.EXTRACT = 74;
SQLParser.FILTER = 75;
SQLParser.FIRST = 76;
SQLParser.FORMAT = 77;
SQLParser.FUSION = 78;
SQLParser.GROUPING = 79;
SQLParser.HASH = 80;
SQLParser.HOUR = 81;
SQLParser.INDEX = 82;
SQLParser.INSERT = 83;
SQLParser.INTERSECTION = 84;
SQLParser.ISODOW = 85;
SQLParser.ISOYEAR = 86;
SQLParser.LAST = 87;
SQLParser.LESS = 88;
SQLParser.LIST = 89;
SQLParser.LOCATION = 90;
SQLParser.MAX = 91;
SQLParser.MAXVALUE = 92;
SQLParser.MICROSECONDS = 93;
SQLParser.MILLENNIUM = 94;
SQLParser.MILLISECONDS = 95;
SQLParser.MIN = 96;
SQLParser.MINUTE = 97;
SQLParser.MONTH = 98;
SQLParser.NATIONAL = 99;
SQLParser.NULLIF = 100;
SQLParser.OVERWRITE = 101;
SQLParser.PARTITION = 102;
SQLParser.PARTITIONS = 103;
SQLParser.PRECISION = 104;
SQLParser.PURGE = 105;
SQLParser.QUARTER = 106;
SQLParser.RANGE = 107;
SQLParser.REGEXP = 108;
SQLParser.RLIKE = 109;
SQLParser.ROLLUP = 110;
SQLParser.SECOND = 111;
SQLParser.SET = 112;
SQLParser.SIMILAR = 113;
SQLParser.STDDEV_POP = 114;
SQLParser.STDDEV_SAMP = 115;
SQLParser.SUBPARTITION = 116;
SQLParser.SUM = 117;
SQLParser.TABLESPACE = 118;
SQLParser.THAN = 119;
SQLParser.TIMEZONE = 120;
SQLParser.TIMEZONE_HOUR = 121;
SQLParser.TIMEZONE_MINUTE = 122;
SQLParser.TRIM = 123;
SQLParser.TO = 124;
SQLParser.UNKNOWN = 125;
SQLParser.VALUES = 126;
SQLParser.VAR_SAMP = 127;
SQLParser.VAR_POP = 128;
SQLParser.VARYING = 129;
SQLParser.WEEK = 130;
SQLParser.YEAR = 131;
SQLParser.ZONE = 132;
SQLParser.BOOLEAN = 133;
SQLParser.BOOL = 134;
SQLParser.BIT = 135;
SQLParser.VARBIT = 136;
SQLParser.INT1 = 137;
SQLParser.INT2 = 138;
SQLParser.INT4 = 139;
SQLParser.INT8 = 140;
SQLParser.TINYINT = 141;
SQLParser.SMALLINT = 142;
SQLParser.INT = 143;
SQLParser.INTEGER = 144;
SQLParser.BIGINT = 145;
SQLParser.FLOAT4 = 146;
SQLParser.FLOAT8 = 147;
SQLParser.REAL = 148;
SQLParser.FLOAT = 149;
SQLParser.DOUBLE = 150;
SQLParser.NUMERIC = 151;
SQLParser.DECIMAL = 152;
SQLParser.CHAR = 153;
SQLParser.VARCHAR = 154;
SQLParser.NCHAR = 155;
SQLParser.NVARCHAR = 156;
SQLParser.DATE = 157;
SQLParser.TIME = 158;
SQLParser.TIMETZ = 159;
SQLParser.TIMESTAMP = 160;
SQLParser.TIMESTAMPTZ = 161;
SQLParser.TEXT = 162;
SQLParser.BINARY = 163;
SQLParser.VARBINARY = 164;
SQLParser.BLOB = 165;
SQLParser.BYTEA = 166;
SQLParser.INET4 = 167;
SQLParser.Similar_To = 168;
SQLParser.Not_Similar_To = 169;
SQLParser.Similar_To_Case_Insensitive = 170;
SQLParser.Not_Similar_To_Case_Insensitive = 171;
SQLParser.CAST_EXPRESSION = 172;
SQLParser.ASSIGN = 173;
SQLParser.EQUAL = 174;
SQLParser.COLON = 175;
SQLParser.SEMI_COLON = 176;
SQLParser.COMMA = 177;
SQLParser.CONCATENATION_OPERATOR = 178;
SQLParser.NOT_EQUAL = 179;
SQLParser.LTH = 180;
SQLParser.LEQ = 181;
SQLParser.GTH = 182;
SQLParser.GEQ = 183;
SQLParser.LEFT_PAREN = 184;
SQLParser.RIGHT_PAREN = 185;
SQLParser.PLUS = 186;
SQLParser.MINUS = 187;
SQLParser.MULTIPLY = 188;
SQLParser.DIVIDE = 189;
SQLParser.MODULAR = 190;
SQLParser.DOT = 191;
SQLParser.UNDERLINE = 192;
SQLParser.VERTICAL_BAR = 193;
SQLParser.QUOTE = 194;
SQLParser.DOUBLE_QUOTE = 195;
SQLParser.NUMBER = 196;
SQLParser.REAL_NUMBER = 197;
SQLParser.BlockComment = 198;
SQLParser.LineComment = 199;
SQLParser.Identifier = 200;
SQLParser.Character_String_Literal = 201;
SQLParser.Space = 202;
SQLParser.White_Space = 203;
SQLParser.BAD = 204;

SQLParser.RULE_sql = 0;
SQLParser.RULE_statement = 1;
SQLParser.RULE_data_statement = 2;
SQLParser.RULE_data_change_statement = 3;
SQLParser.RULE_schema_statement = 4;
SQLParser.RULE_index_statement = 5;
SQLParser.RULE_create_table_statement = 6;
SQLParser.RULE_table_elements = 7;
SQLParser.RULE_field_element = 8;
SQLParser.RULE_field_type = 9;
SQLParser.RULE_param_clause = 10;
SQLParser.RULE_param = 11;
SQLParser.RULE_method_specifier = 12;
SQLParser.RULE_table_space_specifier = 13;
SQLParser.RULE_table_space_name = 14;
SQLParser.RULE_table_partitioning_clauses = 15;
SQLParser.RULE_range_partitions = 16;
SQLParser.RULE_range_value_clause_list = 17;
SQLParser.RULE_range_value_clause = 18;
SQLParser.RULE_hash_partitions = 19;
SQLParser.RULE_individual_hash_partitions = 20;
SQLParser.RULE_individual_hash_partition = 21;
SQLParser.RULE_hash_partitions_by_quantity = 22;
SQLParser.RULE_list_partitions = 23;
SQLParser.RULE_list_value_clause_list = 24;
SQLParser.RULE_list_value_partition = 25;
SQLParser.RULE_column_partitions = 26;
SQLParser.RULE_partition_name = 27;
SQLParser.RULE_drop_table_statement = 28;
SQLParser.RULE_identifier = 29;
SQLParser.RULE_nonreserved_keywords = 30;
SQLParser.RULE_unsigned_literal = 31;
SQLParser.RULE_general_literal = 32;
SQLParser.RULE_datetime_literal = 33;
SQLParser.RULE_time_literal = 34;
SQLParser.RULE_timestamp_literal = 35;
SQLParser.RULE_date_literal = 36;
SQLParser.RULE_boolean_literal = 37;
SQLParser.RULE_data_type = 38;
SQLParser.RULE_predefined_type = 39;
SQLParser.RULE_network_type = 40;
SQLParser.RULE_character_string_type = 41;
SQLParser.RULE_type_length = 42;
SQLParser.RULE_national_character_string_type = 43;
SQLParser.RULE_binary_large_object_string_type = 44;
SQLParser.RULE_numeric_type = 45;
SQLParser.RULE_exact_numeric_type = 46;
SQLParser.RULE_approximate_numeric_type = 47;
SQLParser.RULE_precision_param = 48;
SQLParser.RULE_boolean_type = 49;
SQLParser.RULE_datetime_type = 50;
SQLParser.RULE_bit_type = 51;
SQLParser.RULE_binary_type = 52;
SQLParser.RULE_value_expression_primary = 53;
SQLParser.RULE_parenthesized_value_expression = 54;
SQLParser.RULE_nonparenthesized_value_expression_primary = 55;
SQLParser.RULE_unsigned_value_specification = 56;
SQLParser.RULE_unsigned_numeric_literal = 57;
SQLParser.RULE_signed_numerical_literal = 58;
SQLParser.RULE_set_function_specification = 59;
SQLParser.RULE_aggregate_function = 60;
SQLParser.RULE_general_set_function = 61;
SQLParser.RULE_set_function_type = 62;
SQLParser.RULE_filter_clause = 63;
SQLParser.RULE_grouping_operation = 64;
SQLParser.RULE_case_expression = 65;
SQLParser.RULE_case_abbreviation = 66;
SQLParser.RULE_case_specification = 67;
SQLParser.RULE_simple_case = 68;
SQLParser.RULE_searched_case = 69;
SQLParser.RULE_simple_when_clause = 70;
SQLParser.RULE_searched_when_clause = 71;
SQLParser.RULE_else_clause = 72;
SQLParser.RULE_result = 73;
SQLParser.RULE_cast_specification = 74;
SQLParser.RULE_cast_operand = 75;
SQLParser.RULE_cast_target = 76;
SQLParser.RULE_value_expression = 77;
SQLParser.RULE_common_value_expression = 78;
SQLParser.RULE_numeric_value_expression = 79;
SQLParser.RULE_term = 80;
SQLParser.RULE_factor = 81;
SQLParser.RULE_array = 82;
SQLParser.RULE_numeric_primary = 83;
SQLParser.RULE_sign = 84;
SQLParser.RULE_numeric_value_function = 85;
SQLParser.RULE_extract_expression = 86;
SQLParser.RULE_extract_field = 87;
SQLParser.RULE_time_zone_field = 88;
SQLParser.RULE_extract_source = 89;
SQLParser.RULE_string_value_expression = 90;
SQLParser.RULE_character_value_expression = 91;
SQLParser.RULE_character_factor = 92;
SQLParser.RULE_character_primary = 93;
SQLParser.RULE_string_value_function = 94;
SQLParser.RULE_trim_function = 95;
SQLParser.RULE_trim_operands = 96;
SQLParser.RULE_trim_specification = 97;
SQLParser.RULE_boolean_value_expression = 98;
SQLParser.RULE_or_predicate = 99;
SQLParser.RULE_and_predicate = 100;
SQLParser.RULE_boolean_factor = 101;
SQLParser.RULE_boolean_test = 102;
SQLParser.RULE_is_clause = 103;
SQLParser.RULE_truth_value = 104;
SQLParser.RULE_boolean_primary = 105;
SQLParser.RULE_boolean_predicand = 106;
SQLParser.RULE_parenthesized_boolean_value_expression = 107;
SQLParser.RULE_row_value_expression = 108;
SQLParser.RULE_row_value_special_case = 109;
SQLParser.RULE_explicit_row_value_constructor = 110;
SQLParser.RULE_row_value_predicand = 111;
SQLParser.RULE_row_value_constructor_predicand = 112;
SQLParser.RULE_table_expression = 113;
SQLParser.RULE_from_clause = 114;
SQLParser.RULE_table_reference_list = 115;
SQLParser.RULE_table_reference = 116;
SQLParser.RULE_joined_table = 117;
SQLParser.RULE_joined_table_primary = 118;
SQLParser.RULE_cross_join = 119;
SQLParser.RULE_qualified_join = 120;
SQLParser.RULE_natural_join = 121;
SQLParser.RULE_union_join = 122;
SQLParser.RULE_join_type = 123;
SQLParser.RULE_outer_join_type = 124;
SQLParser.RULE_outer_join_type_part2 = 125;
SQLParser.RULE_join_specification = 126;
SQLParser.RULE_join_condition = 127;
SQLParser.RULE_named_columns_join = 128;
SQLParser.RULE_table_primary = 129;
SQLParser.RULE_column_name_list = 130;
SQLParser.RULE_derived_table = 131;
SQLParser.RULE_where_clause = 132;
SQLParser.RULE_search_condition = 133;
SQLParser.RULE_groupby_clause = 134;
SQLParser.RULE_grouping_element_list = 135;
SQLParser.RULE_grouping_element = 136;
SQLParser.RULE_ordinary_grouping_set = 137;
SQLParser.RULE_ordinary_grouping_set_list = 138;
SQLParser.RULE_rollup_list = 139;
SQLParser.RULE_cube_list = 140;
SQLParser.RULE_empty_grouping_set = 141;
SQLParser.RULE_having_clause = 142;
SQLParser.RULE_row_value_predicand_list = 143;
SQLParser.RULE_query_expression = 144;
SQLParser.RULE_query_expression_body = 145;
SQLParser.RULE_non_join_query_expression = 146;
SQLParser.RULE_query_term = 147;
SQLParser.RULE_non_join_query_term = 148;
SQLParser.RULE_query_primary = 149;
SQLParser.RULE_non_join_query_primary = 150;
SQLParser.RULE_simple_table = 151;
SQLParser.RULE_explicit_table = 152;
SQLParser.RULE_table_or_query_name = 153;
SQLParser.RULE_table_name = 154;
SQLParser.RULE_query_specification = 155;
SQLParser.RULE_select_list = 156;
SQLParser.RULE_select_sublist = 157;
SQLParser.RULE_derived_column = 158;
SQLParser.RULE_qualified_asterisk = 159;
SQLParser.RULE_set_qualifier = 160;
SQLParser.RULE_column_reference = 161;
SQLParser.RULE_as_clause = 162;
SQLParser.RULE_column_reference_list = 163;
SQLParser.RULE_scalar_subquery = 164;
SQLParser.RULE_row_subquery = 165;
SQLParser.RULE_table_subquery = 166;
SQLParser.RULE_subquery = 167;
SQLParser.RULE_predicate = 168;
SQLParser.RULE_comparison_predicate = 169;
SQLParser.RULE_comp_op = 170;
SQLParser.RULE_between_predicate = 171;
SQLParser.RULE_between_predicate_part_2 = 172;
SQLParser.RULE_in_predicate = 173;
SQLParser.RULE_in_predicate_value = 174;
SQLParser.RULE_in_value_list = 175;
SQLParser.RULE_pattern_matching_predicate = 176;
SQLParser.RULE_pattern_matcher = 177;
SQLParser.RULE_negativable_matcher = 178;
SQLParser.RULE_regex_matcher = 179;
SQLParser.RULE_null_predicate = 180;
SQLParser.RULE_quantified_comparison_predicate = 181;
SQLParser.RULE_quantifier = 182;
SQLParser.RULE_all = 183;
SQLParser.RULE_some = 184;
SQLParser.RULE_exists_predicate = 185;
SQLParser.RULE_unique_predicate = 186;
SQLParser.RULE_primary_datetime_field = 187;
SQLParser.RULE_non_second_primary_datetime_field = 188;
SQLParser.RULE_extended_datetime_field = 189;
SQLParser.RULE_routine_invocation = 190;
SQLParser.RULE_function_names_for_reserved_words = 191;
SQLParser.RULE_function_name = 192;
SQLParser.RULE_sql_argument_list = 193;
SQLParser.RULE_orderby_clause = 194;
SQLParser.RULE_sort_specifier_list = 195;
SQLParser.RULE_sort_specifier = 196;
SQLParser.RULE_order_specification = 197;
SQLParser.RULE_limit_clause = 198;
SQLParser.RULE_null_ordering = 199;
SQLParser.RULE_insert_statement = 200;

function SqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sql;
    return this;
}

SqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlContext.prototype.constructor = SqlContext;

SqlContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SqlContext.prototype.EOF = function() {
    return this.getToken(SQLParser.EOF, 0);
};

SqlContext.prototype.SEMI_COLON = function() {
    return this.getToken(SQLParser.SEMI_COLON, 0);
};

SqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSql(this);
	}
};

SqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSql(this);
	}
};

SqlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSql(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.SqlContext = SqlContext;

SQLParser.prototype.sql = function() {

    var localctx = new SqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SQLParser.RULE_sql);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 402;
        this.statement();
        this.state = 404;
        _la = this._input.LA(1);
        if(_la===SQLParser.SEMI_COLON) {
            this.state = 403;
            this.match(SQLParser.SEMI_COLON);
        }

        this.state = 406;
        this.match(SQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.data_statement = function() {
    return this.getTypedRuleContext(Data_statementContext,0);
};

StatementContext.prototype.data_change_statement = function() {
    return this.getTypedRuleContext(Data_change_statementContext,0);
};

StatementContext.prototype.schema_statement = function() {
    return this.getTypedRuleContext(Schema_statementContext,0);
};

StatementContext.prototype.index_statement = function() {
    return this.getTypedRuleContext(Index_statementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.StatementContext = StatementContext;

SQLParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SQLParser.RULE_statement);
    try {
        this.state = 412;
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 408;
            this.data_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 409;
            this.data_change_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 410;
            this.schema_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 411;
            this.index_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_data_statement;
    return this;
}

Data_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_statementContext.prototype.constructor = Data_statementContext;

Data_statementContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Data_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterData_statement(this);
	}
};

Data_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitData_statement(this);
	}
};

Data_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitData_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Data_statementContext = Data_statementContext;

SQLParser.prototype.data_statement = function() {

    var localctx = new Data_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SQLParser.RULE_data_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this.query_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_change_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_data_change_statement;
    return this;
}

Data_change_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_change_statementContext.prototype.constructor = Data_change_statementContext;

Data_change_statementContext.prototype.insert_statement = function() {
    return this.getTypedRuleContext(Insert_statementContext,0);
};

Data_change_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterData_change_statement(this);
	}
};

Data_change_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitData_change_statement(this);
	}
};

Data_change_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitData_change_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Data_change_statementContext = Data_change_statementContext;

SQLParser.prototype.data_change_statement = function() {

    var localctx = new Data_change_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SQLParser.RULE_data_change_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.insert_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Schema_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_schema_statement;
    return this;
}

Schema_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Schema_statementContext.prototype.constructor = Schema_statementContext;

Schema_statementContext.prototype.create_table_statement = function() {
    return this.getTypedRuleContext(Create_table_statementContext,0);
};

Schema_statementContext.prototype.drop_table_statement = function() {
    return this.getTypedRuleContext(Drop_table_statementContext,0);
};

Schema_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSchema_statement(this);
	}
};

Schema_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSchema_statement(this);
	}
};

Schema_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSchema_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Schema_statementContext = Schema_statementContext;

SQLParser.prototype.schema_statement = function() {

    var localctx = new Schema_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SQLParser.RULE_schema_statement);
    try {
        this.state = 420;
        switch(this._input.LA(1)) {
        case SQLParser.CREATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 418;
            this.create_table_statement();
            break;
        case SQLParser.DROP:
            this.enterOuterAlt(localctx, 2);
            this.state = 419;
            this.drop_table_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_index_statement;
    this.u = null; // Token
    this.n = null; // IdentifierContext
    this.t = null; // Table_nameContext
    this.m = null; // Method_specifierContext
    this.s = null; // Sort_specifier_listContext
    this.p = null; // Param_clauseContext
    return this;
}

Index_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_statementContext.prototype.constructor = Index_statementContext;

Index_statementContext.prototype.CREATE = function() {
    return this.getToken(SQLParser.CREATE, 0);
};

Index_statementContext.prototype.INDEX = function() {
    return this.getToken(SQLParser.INDEX, 0);
};

Index_statementContext.prototype.ON = function() {
    return this.getToken(SQLParser.ON, 0);
};

Index_statementContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Index_statementContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Index_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Index_statementContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Index_statementContext.prototype.sort_specifier_list = function() {
    return this.getTypedRuleContext(Sort_specifier_listContext,0);
};

Index_statementContext.prototype.UNIQUE = function() {
    return this.getToken(SQLParser.UNIQUE, 0);
};

Index_statementContext.prototype.method_specifier = function() {
    return this.getTypedRuleContext(Method_specifierContext,0);
};

Index_statementContext.prototype.param_clause = function() {
    return this.getTypedRuleContext(Param_clauseContext,0);
};

Index_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIndex_statement(this);
	}
};

Index_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIndex_statement(this);
	}
};

Index_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIndex_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Index_statementContext = Index_statementContext;

SQLParser.prototype.index_statement = function() {

    var localctx = new Index_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SQLParser.RULE_index_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 422;
        this.match(SQLParser.CREATE);
        this.state = 424;
        _la = this._input.LA(1);
        if(_la===SQLParser.UNIQUE) {
            this.state = 423;
            localctx.u = this.match(SQLParser.UNIQUE);
        }

        this.state = 426;
        this.match(SQLParser.INDEX);
        this.state = 427;
        localctx.n = this.identifier();
        this.state = 428;
        this.match(SQLParser.ON);
        this.state = 429;
        localctx.t = this.table_name();
        this.state = 431;
        _la = this._input.LA(1);
        if(_la===SQLParser.USING) {
            this.state = 430;
            localctx.m = this.method_specifier();
        }

        this.state = 433;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 434;
        localctx.s = this.sort_specifier_list();
        this.state = 435;
        this.match(SQLParser.RIGHT_PAREN);
        this.state = 437;
        _la = this._input.LA(1);
        if(_la===SQLParser.WITH) {
            this.state = 436;
            localctx.p = this.param_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_table_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_create_table_statement;
    this.file_type = null; // IdentifierContext
    this.path = null; // Token
    return this;
}

Create_table_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_table_statementContext.prototype.constructor = Create_table_statementContext;

Create_table_statementContext.prototype.CREATE = function() {
    return this.getToken(SQLParser.CREATE, 0);
};

Create_table_statementContext.prototype.EXTERNAL = function() {
    return this.getToken(SQLParser.EXTERNAL, 0);
};

Create_table_statementContext.prototype.TABLE = function() {
    return this.getToken(SQLParser.TABLE, 0);
};

Create_table_statementContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_table_statementContext.prototype.table_elements = function() {
    return this.getTypedRuleContext(Table_elementsContext,0);
};

Create_table_statementContext.prototype.USING = function() {
    return this.getToken(SQLParser.USING, 0);
};

Create_table_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Create_table_statementContext.prototype.LOCATION = function() {
    return this.getToken(SQLParser.LOCATION, 0);
};

Create_table_statementContext.prototype.param_clause = function() {
    return this.getTypedRuleContext(Param_clauseContext,0);
};

Create_table_statementContext.prototype.table_partitioning_clauses = function() {
    return this.getTypedRuleContext(Table_partitioning_clausesContext,0);
};

Create_table_statementContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Create_table_statementContext.prototype.AS = function() {
    return this.getToken(SQLParser.AS, 0);
};

Create_table_statementContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Create_table_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCreate_table_statement(this);
	}
};

Create_table_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCreate_table_statement(this);
	}
};

Create_table_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCreate_table_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Create_table_statementContext = Create_table_statementContext;

SQLParser.prototype.create_table_statement = function() {

    var localctx = new Create_table_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SQLParser.RULE_create_table_statement);
    var _la = 0; // Token type
    try {
        this.state = 489;
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 439;
            this.match(SQLParser.CREATE);
            this.state = 440;
            this.match(SQLParser.EXTERNAL);
            this.state = 441;
            this.match(SQLParser.TABLE);
            this.state = 442;
            this.table_name();
            this.state = 443;
            this.table_elements();
            this.state = 444;
            this.match(SQLParser.USING);
            this.state = 445;
            localctx.file_type = this.identifier();
            this.state = 447;
            _la = this._input.LA(1);
            if(_la===SQLParser.WITH) {
                this.state = 446;
                this.param_clause();
            }

            this.state = 450;
            _la = this._input.LA(1);
            if(_la===SQLParser.PARTITION) {
                this.state = 449;
                this.table_partitioning_clauses();
            }

            this.state = 452;
            this.match(SQLParser.LOCATION);
            this.state = 453;
            localctx.path = this.match(SQLParser.Character_String_Literal);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 455;
            this.match(SQLParser.CREATE);
            this.state = 456;
            this.match(SQLParser.TABLE);
            this.state = 457;
            this.table_name();
            this.state = 458;
            this.table_elements();
            this.state = 461;
            _la = this._input.LA(1);
            if(_la===SQLParser.USING) {
                this.state = 459;
                this.match(SQLParser.USING);
                this.state = 460;
                localctx.file_type = this.identifier();
            }

            this.state = 464;
            _la = this._input.LA(1);
            if(_la===SQLParser.WITH) {
                this.state = 463;
                this.param_clause();
            }

            this.state = 467;
            _la = this._input.LA(1);
            if(_la===SQLParser.PARTITION) {
                this.state = 466;
                this.table_partitioning_clauses();
            }

            this.state = 471;
            _la = this._input.LA(1);
            if(_la===SQLParser.AS) {
                this.state = 469;
                this.match(SQLParser.AS);
                this.state = 470;
                this.query_expression();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 473;
            this.match(SQLParser.CREATE);
            this.state = 474;
            this.match(SQLParser.TABLE);
            this.state = 475;
            this.table_name();
            this.state = 478;
            _la = this._input.LA(1);
            if(_la===SQLParser.USING) {
                this.state = 476;
                this.match(SQLParser.USING);
                this.state = 477;
                localctx.file_type = this.identifier();
            }

            this.state = 481;
            _la = this._input.LA(1);
            if(_la===SQLParser.WITH) {
                this.state = 480;
                this.param_clause();
            }

            this.state = 484;
            _la = this._input.LA(1);
            if(_la===SQLParser.PARTITION) {
                this.state = 483;
                this.table_partitioning_clauses();
            }

            this.state = 486;
            this.match(SQLParser.AS);
            this.state = 487;
            this.query_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_elements;
    return this;
}

Table_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_elementsContext.prototype.constructor = Table_elementsContext;

Table_elementsContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Table_elementsContext.prototype.field_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Field_elementContext);
    } else {
        return this.getTypedRuleContext(Field_elementContext,i);
    }
};

Table_elementsContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Table_elementsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Table_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_elements(this);
	}
};

Table_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_elements(this);
	}
};

Table_elementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_elements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_elementsContext = Table_elementsContext;

SQLParser.prototype.table_elements = function() {

    var localctx = new Table_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SQLParser.RULE_table_elements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 491;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 492;
        this.field_element();
        this.state = 497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 493;
            this.match(SQLParser.COMMA);
            this.state = 494;
            this.field_element();
            this.state = 499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 500;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_field_element;
    this.name = null; // IdentifierContext
    return this;
}

Field_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_elementContext.prototype.constructor = Field_elementContext;

Field_elementContext.prototype.field_type = function() {
    return this.getTypedRuleContext(Field_typeContext,0);
};

Field_elementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Field_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterField_element(this);
	}
};

Field_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitField_element(this);
	}
};

Field_elementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitField_element(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Field_elementContext = Field_elementContext;

SQLParser.prototype.field_element = function() {

    var localctx = new Field_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SQLParser.RULE_field_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 502;
        localctx.name = this.identifier();
        this.state = 503;
        this.field_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_field_type;
    return this;
}

Field_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_typeContext.prototype.constructor = Field_typeContext;

Field_typeContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Field_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterField_type(this);
	}
};

Field_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitField_type(this);
	}
};

Field_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitField_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Field_typeContext = Field_typeContext;

SQLParser.prototype.field_type = function() {

    var localctx = new Field_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SQLParser.RULE_field_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.data_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Param_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_param_clause;
    return this;
}

Param_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Param_clauseContext.prototype.constructor = Param_clauseContext;

Param_clauseContext.prototype.WITH = function() {
    return this.getToken(SQLParser.WITH, 0);
};

Param_clauseContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Param_clauseContext.prototype.param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamContext);
    } else {
        return this.getTypedRuleContext(ParamContext,i);
    }
};

Param_clauseContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Param_clauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Param_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterParam_clause(this);
	}
};

Param_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitParam_clause(this);
	}
};

Param_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitParam_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Param_clauseContext = Param_clauseContext;

SQLParser.prototype.param_clause = function() {

    var localctx = new Param_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SQLParser.RULE_param_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 507;
        this.match(SQLParser.WITH);
        this.state = 508;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 509;
        this.param();
        this.state = 514;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 510;
            this.match(SQLParser.COMMA);
            this.state = 511;
            this.param();
            this.state = 516;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 517;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_param;
    this.key = null; // Token
    this.value = null; // Numeric_value_expressionContext
    return this;
}

ParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamContext.prototype.constructor = ParamContext;

ParamContext.prototype.EQUAL = function() {
    return this.getToken(SQLParser.EQUAL, 0);
};

ParamContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

ParamContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

ParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterParam(this);
	}
};

ParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitParam(this);
	}
};

ParamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitParam(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.ParamContext = ParamContext;

SQLParser.prototype.param = function() {

    var localctx = new ParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SQLParser.RULE_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        localctx.key = this.match(SQLParser.Character_String_Literal);
        this.state = 520;
        this.match(SQLParser.EQUAL);
        this.state = 521;
        localctx.value = this.numeric_value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_method_specifier;
    this.m = null; // IdentifierContext
    return this;
}

Method_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_specifierContext.prototype.constructor = Method_specifierContext;

Method_specifierContext.prototype.USING = function() {
    return this.getToken(SQLParser.USING, 0);
};

Method_specifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Method_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterMethod_specifier(this);
	}
};

Method_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitMethod_specifier(this);
	}
};

Method_specifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitMethod_specifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Method_specifierContext = Method_specifierContext;

SQLParser.prototype.method_specifier = function() {

    var localctx = new Method_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SQLParser.RULE_method_specifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this.match(SQLParser.USING);
        this.state = 524;
        localctx.m = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_space_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_space_specifier;
    return this;
}

Table_space_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_space_specifierContext.prototype.constructor = Table_space_specifierContext;

Table_space_specifierContext.prototype.TABLESPACE = function() {
    return this.getToken(SQLParser.TABLESPACE, 0);
};

Table_space_specifierContext.prototype.table_space_name = function() {
    return this.getTypedRuleContext(Table_space_nameContext,0);
};

Table_space_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_space_specifier(this);
	}
};

Table_space_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_space_specifier(this);
	}
};

Table_space_specifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_space_specifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_space_specifierContext = Table_space_specifierContext;

SQLParser.prototype.table_space_specifier = function() {

    var localctx = new Table_space_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SQLParser.RULE_table_space_specifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this.match(SQLParser.TABLESPACE);
        this.state = 527;
        this.table_space_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_space_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_space_name;
    return this;
}

Table_space_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_space_nameContext.prototype.constructor = Table_space_nameContext;

Table_space_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Table_space_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_space_name(this);
	}
};

Table_space_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_space_name(this);
	}
};

Table_space_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_space_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_space_nameContext = Table_space_nameContext;

SQLParser.prototype.table_space_name = function() {

    var localctx = new Table_space_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SQLParser.RULE_table_space_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 529;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_partitioning_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_partitioning_clauses;
    return this;
}

Table_partitioning_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_partitioning_clausesContext.prototype.constructor = Table_partitioning_clausesContext;

Table_partitioning_clausesContext.prototype.range_partitions = function() {
    return this.getTypedRuleContext(Range_partitionsContext,0);
};

Table_partitioning_clausesContext.prototype.hash_partitions = function() {
    return this.getTypedRuleContext(Hash_partitionsContext,0);
};

Table_partitioning_clausesContext.prototype.list_partitions = function() {
    return this.getTypedRuleContext(List_partitionsContext,0);
};

Table_partitioning_clausesContext.prototype.column_partitions = function() {
    return this.getTypedRuleContext(Column_partitionsContext,0);
};

Table_partitioning_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_partitioning_clauses(this);
	}
};

Table_partitioning_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_partitioning_clauses(this);
	}
};

Table_partitioning_clausesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_partitioning_clauses(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_partitioning_clausesContext = Table_partitioning_clausesContext;

SQLParser.prototype.table_partitioning_clauses = function() {

    var localctx = new Table_partitioning_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SQLParser.RULE_table_partitioning_clauses);
    try {
        this.state = 535;
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 531;
            this.range_partitions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 532;
            this.hash_partitions();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 533;
            this.list_partitions();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 534;
            this.column_partitions();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Range_partitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_range_partitions;
    return this;
}

Range_partitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_partitionsContext.prototype.constructor = Range_partitionsContext;

Range_partitionsContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Range_partitionsContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Range_partitionsContext.prototype.RANGE = function() {
    return this.getToken(SQLParser.RANGE, 0);
};

Range_partitionsContext.prototype.LEFT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.LEFT_PAREN);
    } else {
        return this.getToken(SQLParser.LEFT_PAREN, i);
    }
};


Range_partitionsContext.prototype.column_reference_list = function() {
    return this.getTypedRuleContext(Column_reference_listContext,0);
};

Range_partitionsContext.prototype.RIGHT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.RIGHT_PAREN);
    } else {
        return this.getToken(SQLParser.RIGHT_PAREN, i);
    }
};


Range_partitionsContext.prototype.range_value_clause_list = function() {
    return this.getTypedRuleContext(Range_value_clause_listContext,0);
};

Range_partitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRange_partitions(this);
	}
};

Range_partitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRange_partitions(this);
	}
};

Range_partitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRange_partitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Range_partitionsContext = Range_partitionsContext;

SQLParser.prototype.range_partitions = function() {

    var localctx = new Range_partitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SQLParser.RULE_range_partitions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 537;
        this.match(SQLParser.PARTITION);
        this.state = 538;
        this.match(SQLParser.BY);
        this.state = 539;
        this.match(SQLParser.RANGE);
        this.state = 540;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 541;
        this.column_reference_list();
        this.state = 542;
        this.match(SQLParser.RIGHT_PAREN);
        this.state = 543;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 544;
        this.range_value_clause_list();
        this.state = 545;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Range_value_clause_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_range_value_clause_list;
    return this;
}

Range_value_clause_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_value_clause_listContext.prototype.constructor = Range_value_clause_listContext;

Range_value_clause_listContext.prototype.range_value_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Range_value_clauseContext);
    } else {
        return this.getTypedRuleContext(Range_value_clauseContext,i);
    }
};

Range_value_clause_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Range_value_clause_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRange_value_clause_list(this);
	}
};

Range_value_clause_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRange_value_clause_list(this);
	}
};

Range_value_clause_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRange_value_clause_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Range_value_clause_listContext = Range_value_clause_listContext;

SQLParser.prototype.range_value_clause_list = function() {

    var localctx = new Range_value_clause_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SQLParser.RULE_range_value_clause_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.range_value_clause();
        this.state = 552;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 548;
            this.match(SQLParser.COMMA);
            this.state = 549;
            this.range_value_clause();
            this.state = 554;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Range_value_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_range_value_clause;
    return this;
}

Range_value_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_value_clauseContext.prototype.constructor = Range_value_clauseContext;

Range_value_clauseContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Range_value_clauseContext.prototype.partition_name = function() {
    return this.getTypedRuleContext(Partition_nameContext,0);
};

Range_value_clauseContext.prototype.VALUES = function() {
    return this.getToken(SQLParser.VALUES, 0);
};

Range_value_clauseContext.prototype.LESS = function() {
    return this.getToken(SQLParser.LESS, 0);
};

Range_value_clauseContext.prototype.THAN = function() {
    return this.getToken(SQLParser.THAN, 0);
};

Range_value_clauseContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Range_value_clauseContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

Range_value_clauseContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Range_value_clauseContext.prototype.MAXVALUE = function() {
    return this.getToken(SQLParser.MAXVALUE, 0);
};

Range_value_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRange_value_clause(this);
	}
};

Range_value_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRange_value_clause(this);
	}
};

Range_value_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRange_value_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Range_value_clauseContext = Range_value_clauseContext;

SQLParser.prototype.range_value_clause = function() {

    var localctx = new Range_value_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SQLParser.RULE_range_value_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 555;
        this.match(SQLParser.PARTITION);
        this.state = 556;
        this.partition_name();
        this.state = 557;
        this.match(SQLParser.VALUES);
        this.state = 558;
        this.match(SQLParser.LESS);
        this.state = 559;
        this.match(SQLParser.THAN);
        this.state = 571;
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        switch(la_) {
        case 1:
            this.state = 560;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 561;
            this.value_expression();
            this.state = 562;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 565;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 564;
                this.match(SQLParser.LEFT_PAREN);
            }

            this.state = 567;
            this.match(SQLParser.MAXVALUE);
            this.state = 569;
            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
            if(la_===1) {
                this.state = 568;
                this.match(SQLParser.RIGHT_PAREN);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Hash_partitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_hash_partitions;
    return this;
}

Hash_partitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hash_partitionsContext.prototype.constructor = Hash_partitionsContext;

Hash_partitionsContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Hash_partitionsContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Hash_partitionsContext.prototype.HASH = function() {
    return this.getToken(SQLParser.HASH, 0);
};

Hash_partitionsContext.prototype.LEFT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.LEFT_PAREN);
    } else {
        return this.getToken(SQLParser.LEFT_PAREN, i);
    }
};


Hash_partitionsContext.prototype.column_reference_list = function() {
    return this.getTypedRuleContext(Column_reference_listContext,0);
};

Hash_partitionsContext.prototype.RIGHT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.RIGHT_PAREN);
    } else {
        return this.getToken(SQLParser.RIGHT_PAREN, i);
    }
};


Hash_partitionsContext.prototype.individual_hash_partitions = function() {
    return this.getTypedRuleContext(Individual_hash_partitionsContext,0);
};

Hash_partitionsContext.prototype.hash_partitions_by_quantity = function() {
    return this.getTypedRuleContext(Hash_partitions_by_quantityContext,0);
};

Hash_partitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterHash_partitions(this);
	}
};

Hash_partitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitHash_partitions(this);
	}
};

Hash_partitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitHash_partitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Hash_partitionsContext = Hash_partitionsContext;

SQLParser.prototype.hash_partitions = function() {

    var localctx = new Hash_partitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SQLParser.RULE_hash_partitions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this.match(SQLParser.PARTITION);
        this.state = 574;
        this.match(SQLParser.BY);
        this.state = 575;
        this.match(SQLParser.HASH);
        this.state = 576;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 577;
        this.column_reference_list();
        this.state = 578;
        this.match(SQLParser.RIGHT_PAREN);
        this.state = 584;
        switch(this._input.LA(1)) {
        case SQLParser.LEFT_PAREN:
            this.state = 579;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 580;
            this.individual_hash_partitions();
            this.state = 581;
            this.match(SQLParser.RIGHT_PAREN);
            break;
        case SQLParser.PARTITIONS:
            this.state = 583;
            this.hash_partitions_by_quantity();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Individual_hash_partitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_individual_hash_partitions;
    return this;
}

Individual_hash_partitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Individual_hash_partitionsContext.prototype.constructor = Individual_hash_partitionsContext;

Individual_hash_partitionsContext.prototype.individual_hash_partition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Individual_hash_partitionContext);
    } else {
        return this.getTypedRuleContext(Individual_hash_partitionContext,i);
    }
};

Individual_hash_partitionsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Individual_hash_partitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIndividual_hash_partitions(this);
	}
};

Individual_hash_partitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIndividual_hash_partitions(this);
	}
};

Individual_hash_partitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIndividual_hash_partitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Individual_hash_partitionsContext = Individual_hash_partitionsContext;

SQLParser.prototype.individual_hash_partitions = function() {

    var localctx = new Individual_hash_partitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SQLParser.RULE_individual_hash_partitions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 586;
        this.individual_hash_partition();
        this.state = 591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 587;
            this.match(SQLParser.COMMA);
            this.state = 588;
            this.individual_hash_partition();
            this.state = 593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Individual_hash_partitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_individual_hash_partition;
    return this;
}

Individual_hash_partitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Individual_hash_partitionContext.prototype.constructor = Individual_hash_partitionContext;

Individual_hash_partitionContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Individual_hash_partitionContext.prototype.partition_name = function() {
    return this.getTypedRuleContext(Partition_nameContext,0);
};

Individual_hash_partitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIndividual_hash_partition(this);
	}
};

Individual_hash_partitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIndividual_hash_partition(this);
	}
};

Individual_hash_partitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIndividual_hash_partition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Individual_hash_partitionContext = Individual_hash_partitionContext;

SQLParser.prototype.individual_hash_partition = function() {

    var localctx = new Individual_hash_partitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SQLParser.RULE_individual_hash_partition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.match(SQLParser.PARTITION);
        this.state = 595;
        this.partition_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Hash_partitions_by_quantityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_hash_partitions_by_quantity;
    this.quantity = null; // Numeric_value_expressionContext
    return this;
}

Hash_partitions_by_quantityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hash_partitions_by_quantityContext.prototype.constructor = Hash_partitions_by_quantityContext;

Hash_partitions_by_quantityContext.prototype.PARTITIONS = function() {
    return this.getToken(SQLParser.PARTITIONS, 0);
};

Hash_partitions_by_quantityContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

Hash_partitions_by_quantityContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterHash_partitions_by_quantity(this);
	}
};

Hash_partitions_by_quantityContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitHash_partitions_by_quantity(this);
	}
};

Hash_partitions_by_quantityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitHash_partitions_by_quantity(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Hash_partitions_by_quantityContext = Hash_partitions_by_quantityContext;

SQLParser.prototype.hash_partitions_by_quantity = function() {

    var localctx = new Hash_partitions_by_quantityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SQLParser.RULE_hash_partitions_by_quantity);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 597;
        this.match(SQLParser.PARTITIONS);
        this.state = 598;
        localctx.quantity = this.numeric_value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_partitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_list_partitions;
    return this;
}

List_partitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_partitionsContext.prototype.constructor = List_partitionsContext;

List_partitionsContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

List_partitionsContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

List_partitionsContext.prototype.LIST = function() {
    return this.getToken(SQLParser.LIST, 0);
};

List_partitionsContext.prototype.LEFT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.LEFT_PAREN);
    } else {
        return this.getToken(SQLParser.LEFT_PAREN, i);
    }
};


List_partitionsContext.prototype.column_reference_list = function() {
    return this.getTypedRuleContext(Column_reference_listContext,0);
};

List_partitionsContext.prototype.RIGHT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.RIGHT_PAREN);
    } else {
        return this.getToken(SQLParser.RIGHT_PAREN, i);
    }
};


List_partitionsContext.prototype.list_value_clause_list = function() {
    return this.getTypedRuleContext(List_value_clause_listContext,0);
};

List_partitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterList_partitions(this);
	}
};

List_partitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitList_partitions(this);
	}
};

List_partitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitList_partitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.List_partitionsContext = List_partitionsContext;

SQLParser.prototype.list_partitions = function() {

    var localctx = new List_partitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SQLParser.RULE_list_partitions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600;
        this.match(SQLParser.PARTITION);
        this.state = 601;
        this.match(SQLParser.BY);
        this.state = 602;
        this.match(SQLParser.LIST);
        this.state = 603;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 604;
        this.column_reference_list();
        this.state = 605;
        this.match(SQLParser.RIGHT_PAREN);
        this.state = 606;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 607;
        this.list_value_clause_list();
        this.state = 608;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_value_clause_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_list_value_clause_list;
    return this;
}

List_value_clause_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_value_clause_listContext.prototype.constructor = List_value_clause_listContext;

List_value_clause_listContext.prototype.list_value_partition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(List_value_partitionContext);
    } else {
        return this.getTypedRuleContext(List_value_partitionContext,i);
    }
};

List_value_clause_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


List_value_clause_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterList_value_clause_list(this);
	}
};

List_value_clause_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitList_value_clause_list(this);
	}
};

List_value_clause_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitList_value_clause_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.List_value_clause_listContext = List_value_clause_listContext;

SQLParser.prototype.list_value_clause_list = function() {

    var localctx = new List_value_clause_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SQLParser.RULE_list_value_clause_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this.list_value_partition();
        this.state = 615;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 611;
            this.match(SQLParser.COMMA);
            this.state = 612;
            this.list_value_partition();
            this.state = 617;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_value_partitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_list_value_partition;
    return this;
}

List_value_partitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_value_partitionContext.prototype.constructor = List_value_partitionContext;

List_value_partitionContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

List_value_partitionContext.prototype.partition_name = function() {
    return this.getTypedRuleContext(Partition_nameContext,0);
};

List_value_partitionContext.prototype.VALUES = function() {
    return this.getToken(SQLParser.VALUES, 0);
};

List_value_partitionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

List_value_partitionContext.prototype.in_value_list = function() {
    return this.getTypedRuleContext(In_value_listContext,0);
};

List_value_partitionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

List_value_partitionContext.prototype.IN = function() {
    return this.getToken(SQLParser.IN, 0);
};

List_value_partitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterList_value_partition(this);
	}
};

List_value_partitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitList_value_partition(this);
	}
};

List_value_partitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitList_value_partition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.List_value_partitionContext = List_value_partitionContext;

SQLParser.prototype.list_value_partition = function() {

    var localctx = new List_value_partitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SQLParser.RULE_list_value_partition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this.match(SQLParser.PARTITION);
        this.state = 619;
        this.partition_name();
        this.state = 620;
        this.match(SQLParser.VALUES);
        this.state = 622;
        _la = this._input.LA(1);
        if(_la===SQLParser.IN) {
            this.state = 621;
            this.match(SQLParser.IN);
        }

        this.state = 624;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 625;
        this.in_value_list();
        this.state = 626;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_partitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_partitions;
    return this;
}

Column_partitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_partitionsContext.prototype.constructor = Column_partitionsContext;

Column_partitionsContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Column_partitionsContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Column_partitionsContext.prototype.COLUMN = function() {
    return this.getToken(SQLParser.COLUMN, 0);
};

Column_partitionsContext.prototype.table_elements = function() {
    return this.getTypedRuleContext(Table_elementsContext,0);
};

Column_partitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumn_partitions(this);
	}
};

Column_partitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumn_partitions(this);
	}
};

Column_partitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitColumn_partitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Column_partitionsContext = Column_partitionsContext;

SQLParser.prototype.column_partitions = function() {

    var localctx = new Column_partitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SQLParser.RULE_column_partitions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        this.match(SQLParser.PARTITION);
        this.state = 629;
        this.match(SQLParser.BY);
        this.state = 630;
        this.match(SQLParser.COLUMN);
        this.state = 631;
        this.table_elements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partition_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_partition_name;
    return this;
}

Partition_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partition_nameContext.prototype.constructor = Partition_nameContext;

Partition_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Partition_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPartition_name(this);
	}
};

Partition_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPartition_name(this);
	}
};

Partition_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPartition_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Partition_nameContext = Partition_nameContext;

SQLParser.prototype.partition_name = function() {

    var localctx = new Partition_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SQLParser.RULE_partition_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_table_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_drop_table_statement;
    return this;
}

Drop_table_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_table_statementContext.prototype.constructor = Drop_table_statementContext;

Drop_table_statementContext.prototype.DROP = function() {
    return this.getToken(SQLParser.DROP, 0);
};

Drop_table_statementContext.prototype.TABLE = function() {
    return this.getToken(SQLParser.TABLE, 0);
};

Drop_table_statementContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Drop_table_statementContext.prototype.PURGE = function() {
    return this.getToken(SQLParser.PURGE, 0);
};

Drop_table_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDrop_table_statement(this);
	}
};

Drop_table_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDrop_table_statement(this);
	}
};

Drop_table_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDrop_table_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Drop_table_statementContext = Drop_table_statementContext;

SQLParser.prototype.drop_table_statement = function() {

    var localctx = new Drop_table_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SQLParser.RULE_drop_table_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 635;
        this.match(SQLParser.DROP);
        this.state = 636;
        this.match(SQLParser.TABLE);
        this.state = 637;
        this.table_name();
        this.state = 639;
        _la = this._input.LA(1);
        if(_la===SQLParser.PURGE) {
            this.state = 638;
            this.match(SQLParser.PURGE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Identifier = function() {
    return this.getToken(SQLParser.Identifier, 0);
};

IdentifierContext.prototype.nonreserved_keywords = function() {
    return this.getTypedRuleContext(Nonreserved_keywordsContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.IdentifierContext = IdentifierContext;

SQLParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SQLParser.RULE_identifier);
    try {
        this.state = 643;
        switch(this._input.LA(1)) {
        case SQLParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 641;
            this.match(SQLParser.Identifier);
            break;
        case SQLParser.AVG:
        case SQLParser.BETWEEN:
        case SQLParser.BY:
        case SQLParser.CENTURY:
        case SQLParser.CHARACTER:
        case SQLParser.COLLECT:
        case SQLParser.COALESCE:
        case SQLParser.COLUMN:
        case SQLParser.COUNT:
        case SQLParser.CUBE:
        case SQLParser.DAY:
        case SQLParser.DEC:
        case SQLParser.DECADE:
        case SQLParser.DOW:
        case SQLParser.DOY:
        case SQLParser.DROP:
        case SQLParser.EPOCH:
        case SQLParser.EVERY:
        case SQLParser.EXISTS:
        case SQLParser.EXTERNAL:
        case SQLParser.EXTRACT:
        case SQLParser.FILTER:
        case SQLParser.FIRST:
        case SQLParser.FORMAT:
        case SQLParser.FUSION:
        case SQLParser.GROUPING:
        case SQLParser.HASH:
        case SQLParser.INDEX:
        case SQLParser.INSERT:
        case SQLParser.INTERSECTION:
        case SQLParser.ISODOW:
        case SQLParser.ISOYEAR:
        case SQLParser.LAST:
        case SQLParser.LESS:
        case SQLParser.LIST:
        case SQLParser.LOCATION:
        case SQLParser.MAX:
        case SQLParser.MAXVALUE:
        case SQLParser.MICROSECONDS:
        case SQLParser.MILLENNIUM:
        case SQLParser.MILLISECONDS:
        case SQLParser.MIN:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.NATIONAL:
        case SQLParser.NULLIF:
        case SQLParser.OVERWRITE:
        case SQLParser.PARTITION:
        case SQLParser.PARTITIONS:
        case SQLParser.PRECISION:
        case SQLParser.PURGE:
        case SQLParser.QUARTER:
        case SQLParser.RANGE:
        case SQLParser.REGEXP:
        case SQLParser.RLIKE:
        case SQLParser.ROLLUP:
        case SQLParser.SECOND:
        case SQLParser.SET:
        case SQLParser.SIMILAR:
        case SQLParser.STDDEV_POP:
        case SQLParser.STDDEV_SAMP:
        case SQLParser.SUBPARTITION:
        case SQLParser.SUM:
        case SQLParser.TABLESPACE:
        case SQLParser.THAN:
        case SQLParser.TIMEZONE:
        case SQLParser.TIMEZONE_HOUR:
        case SQLParser.TIMEZONE_MINUTE:
        case SQLParser.TRIM:
        case SQLParser.TO:
        case SQLParser.UNKNOWN:
        case SQLParser.VALUES:
        case SQLParser.VAR_SAMP:
        case SQLParser.VAR_POP:
        case SQLParser.VARYING:
        case SQLParser.WEEK:
        case SQLParser.YEAR:
        case SQLParser.ZONE:
        case SQLParser.BOOLEAN:
        case SQLParser.BOOL:
        case SQLParser.BIT:
        case SQLParser.VARBIT:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
        case SQLParser.CHAR:
        case SQLParser.VARCHAR:
        case SQLParser.NCHAR:
        case SQLParser.NVARCHAR:
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMETZ:
        case SQLParser.TIMESTAMP:
        case SQLParser.TIMESTAMPTZ:
        case SQLParser.TEXT:
        case SQLParser.VARBINARY:
        case SQLParser.BLOB:
        case SQLParser.BYTEA:
        case SQLParser.INET4:
            this.enterOuterAlt(localctx, 2);
            this.state = 642;
            this.nonreserved_keywords();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nonreserved_keywordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_nonreserved_keywords;
    return this;
}

Nonreserved_keywordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonreserved_keywordsContext.prototype.constructor = Nonreserved_keywordsContext;

Nonreserved_keywordsContext.prototype.AVG = function() {
    return this.getToken(SQLParser.AVG, 0);
};

Nonreserved_keywordsContext.prototype.BETWEEN = function() {
    return this.getToken(SQLParser.BETWEEN, 0);
};

Nonreserved_keywordsContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Nonreserved_keywordsContext.prototype.CENTURY = function() {
    return this.getToken(SQLParser.CENTURY, 0);
};

Nonreserved_keywordsContext.prototype.CHARACTER = function() {
    return this.getToken(SQLParser.CHARACTER, 0);
};

Nonreserved_keywordsContext.prototype.COALESCE = function() {
    return this.getToken(SQLParser.COALESCE, 0);
};

Nonreserved_keywordsContext.prototype.COLLECT = function() {
    return this.getToken(SQLParser.COLLECT, 0);
};

Nonreserved_keywordsContext.prototype.COLUMN = function() {
    return this.getToken(SQLParser.COLUMN, 0);
};

Nonreserved_keywordsContext.prototype.COUNT = function() {
    return this.getToken(SQLParser.COUNT, 0);
};

Nonreserved_keywordsContext.prototype.CUBE = function() {
    return this.getToken(SQLParser.CUBE, 0);
};

Nonreserved_keywordsContext.prototype.DAY = function() {
    return this.getToken(SQLParser.DAY, 0);
};

Nonreserved_keywordsContext.prototype.DEC = function() {
    return this.getToken(SQLParser.DEC, 0);
};

Nonreserved_keywordsContext.prototype.DECADE = function() {
    return this.getToken(SQLParser.DECADE, 0);
};

Nonreserved_keywordsContext.prototype.DOW = function() {
    return this.getToken(SQLParser.DOW, 0);
};

Nonreserved_keywordsContext.prototype.DOY = function() {
    return this.getToken(SQLParser.DOY, 0);
};

Nonreserved_keywordsContext.prototype.DROP = function() {
    return this.getToken(SQLParser.DROP, 0);
};

Nonreserved_keywordsContext.prototype.EPOCH = function() {
    return this.getToken(SQLParser.EPOCH, 0);
};

Nonreserved_keywordsContext.prototype.EVERY = function() {
    return this.getToken(SQLParser.EVERY, 0);
};

Nonreserved_keywordsContext.prototype.EXISTS = function() {
    return this.getToken(SQLParser.EXISTS, 0);
};

Nonreserved_keywordsContext.prototype.EXTERNAL = function() {
    return this.getToken(SQLParser.EXTERNAL, 0);
};

Nonreserved_keywordsContext.prototype.EXTRACT = function() {
    return this.getToken(SQLParser.EXTRACT, 0);
};

Nonreserved_keywordsContext.prototype.FILTER = function() {
    return this.getToken(SQLParser.FILTER, 0);
};

Nonreserved_keywordsContext.prototype.FIRST = function() {
    return this.getToken(SQLParser.FIRST, 0);
};

Nonreserved_keywordsContext.prototype.FORMAT = function() {
    return this.getToken(SQLParser.FORMAT, 0);
};

Nonreserved_keywordsContext.prototype.FUSION = function() {
    return this.getToken(SQLParser.FUSION, 0);
};

Nonreserved_keywordsContext.prototype.GROUPING = function() {
    return this.getToken(SQLParser.GROUPING, 0);
};

Nonreserved_keywordsContext.prototype.HASH = function() {
    return this.getToken(SQLParser.HASH, 0);
};

Nonreserved_keywordsContext.prototype.INDEX = function() {
    return this.getToken(SQLParser.INDEX, 0);
};

Nonreserved_keywordsContext.prototype.INSERT = function() {
    return this.getToken(SQLParser.INSERT, 0);
};

Nonreserved_keywordsContext.prototype.INTERSECTION = function() {
    return this.getToken(SQLParser.INTERSECTION, 0);
};

Nonreserved_keywordsContext.prototype.ISODOW = function() {
    return this.getToken(SQLParser.ISODOW, 0);
};

Nonreserved_keywordsContext.prototype.ISOYEAR = function() {
    return this.getToken(SQLParser.ISOYEAR, 0);
};

Nonreserved_keywordsContext.prototype.LAST = function() {
    return this.getToken(SQLParser.LAST, 0);
};

Nonreserved_keywordsContext.prototype.LESS = function() {
    return this.getToken(SQLParser.LESS, 0);
};

Nonreserved_keywordsContext.prototype.LIST = function() {
    return this.getToken(SQLParser.LIST, 0);
};

Nonreserved_keywordsContext.prototype.LOCATION = function() {
    return this.getToken(SQLParser.LOCATION, 0);
};

Nonreserved_keywordsContext.prototype.MAX = function() {
    return this.getToken(SQLParser.MAX, 0);
};

Nonreserved_keywordsContext.prototype.MAXVALUE = function() {
    return this.getToken(SQLParser.MAXVALUE, 0);
};

Nonreserved_keywordsContext.prototype.MICROSECONDS = function() {
    return this.getToken(SQLParser.MICROSECONDS, 0);
};

Nonreserved_keywordsContext.prototype.MILLENNIUM = function() {
    return this.getToken(SQLParser.MILLENNIUM, 0);
};

Nonreserved_keywordsContext.prototype.MILLISECONDS = function() {
    return this.getToken(SQLParser.MILLISECONDS, 0);
};

Nonreserved_keywordsContext.prototype.MIN = function() {
    return this.getToken(SQLParser.MIN, 0);
};

Nonreserved_keywordsContext.prototype.MINUTE = function() {
    return this.getToken(SQLParser.MINUTE, 0);
};

Nonreserved_keywordsContext.prototype.MONTH = function() {
    return this.getToken(SQLParser.MONTH, 0);
};

Nonreserved_keywordsContext.prototype.NATIONAL = function() {
    return this.getToken(SQLParser.NATIONAL, 0);
};

Nonreserved_keywordsContext.prototype.NULLIF = function() {
    return this.getToken(SQLParser.NULLIF, 0);
};

Nonreserved_keywordsContext.prototype.OVERWRITE = function() {
    return this.getToken(SQLParser.OVERWRITE, 0);
};

Nonreserved_keywordsContext.prototype.PARTITION = function() {
    return this.getToken(SQLParser.PARTITION, 0);
};

Nonreserved_keywordsContext.prototype.PARTITIONS = function() {
    return this.getToken(SQLParser.PARTITIONS, 0);
};

Nonreserved_keywordsContext.prototype.PRECISION = function() {
    return this.getToken(SQLParser.PRECISION, 0);
};

Nonreserved_keywordsContext.prototype.PURGE = function() {
    return this.getToken(SQLParser.PURGE, 0);
};

Nonreserved_keywordsContext.prototype.QUARTER = function() {
    return this.getToken(SQLParser.QUARTER, 0);
};

Nonreserved_keywordsContext.prototype.RANGE = function() {
    return this.getToken(SQLParser.RANGE, 0);
};

Nonreserved_keywordsContext.prototype.REGEXP = function() {
    return this.getToken(SQLParser.REGEXP, 0);
};

Nonreserved_keywordsContext.prototype.RLIKE = function() {
    return this.getToken(SQLParser.RLIKE, 0);
};

Nonreserved_keywordsContext.prototype.ROLLUP = function() {
    return this.getToken(SQLParser.ROLLUP, 0);
};

Nonreserved_keywordsContext.prototype.SECOND = function() {
    return this.getToken(SQLParser.SECOND, 0);
};

Nonreserved_keywordsContext.prototype.SET = function() {
    return this.getToken(SQLParser.SET, 0);
};

Nonreserved_keywordsContext.prototype.SIMILAR = function() {
    return this.getToken(SQLParser.SIMILAR, 0);
};

Nonreserved_keywordsContext.prototype.STDDEV_POP = function() {
    return this.getToken(SQLParser.STDDEV_POP, 0);
};

Nonreserved_keywordsContext.prototype.STDDEV_SAMP = function() {
    return this.getToken(SQLParser.STDDEV_SAMP, 0);
};

Nonreserved_keywordsContext.prototype.SUBPARTITION = function() {
    return this.getToken(SQLParser.SUBPARTITION, 0);
};

Nonreserved_keywordsContext.prototype.SUM = function() {
    return this.getToken(SQLParser.SUM, 0);
};

Nonreserved_keywordsContext.prototype.TABLESPACE = function() {
    return this.getToken(SQLParser.TABLESPACE, 0);
};

Nonreserved_keywordsContext.prototype.THAN = function() {
    return this.getToken(SQLParser.THAN, 0);
};

Nonreserved_keywordsContext.prototype.TIMEZONE = function() {
    return this.getToken(SQLParser.TIMEZONE, 0);
};

Nonreserved_keywordsContext.prototype.TIMEZONE_HOUR = function() {
    return this.getToken(SQLParser.TIMEZONE_HOUR, 0);
};

Nonreserved_keywordsContext.prototype.TIMEZONE_MINUTE = function() {
    return this.getToken(SQLParser.TIMEZONE_MINUTE, 0);
};

Nonreserved_keywordsContext.prototype.TRIM = function() {
    return this.getToken(SQLParser.TRIM, 0);
};

Nonreserved_keywordsContext.prototype.TO = function() {
    return this.getToken(SQLParser.TO, 0);
};

Nonreserved_keywordsContext.prototype.UNKNOWN = function() {
    return this.getToken(SQLParser.UNKNOWN, 0);
};

Nonreserved_keywordsContext.prototype.VALUES = function() {
    return this.getToken(SQLParser.VALUES, 0);
};

Nonreserved_keywordsContext.prototype.VAR_POP = function() {
    return this.getToken(SQLParser.VAR_POP, 0);
};

Nonreserved_keywordsContext.prototype.VAR_SAMP = function() {
    return this.getToken(SQLParser.VAR_SAMP, 0);
};

Nonreserved_keywordsContext.prototype.VARYING = function() {
    return this.getToken(SQLParser.VARYING, 0);
};

Nonreserved_keywordsContext.prototype.WEEK = function() {
    return this.getToken(SQLParser.WEEK, 0);
};

Nonreserved_keywordsContext.prototype.YEAR = function() {
    return this.getToken(SQLParser.YEAR, 0);
};

Nonreserved_keywordsContext.prototype.ZONE = function() {
    return this.getToken(SQLParser.ZONE, 0);
};

Nonreserved_keywordsContext.prototype.BIGINT = function() {
    return this.getToken(SQLParser.BIGINT, 0);
};

Nonreserved_keywordsContext.prototype.BIT = function() {
    return this.getToken(SQLParser.BIT, 0);
};

Nonreserved_keywordsContext.prototype.BLOB = function() {
    return this.getToken(SQLParser.BLOB, 0);
};

Nonreserved_keywordsContext.prototype.BOOL = function() {
    return this.getToken(SQLParser.BOOL, 0);
};

Nonreserved_keywordsContext.prototype.BOOLEAN = function() {
    return this.getToken(SQLParser.BOOLEAN, 0);
};

Nonreserved_keywordsContext.prototype.BYTEA = function() {
    return this.getToken(SQLParser.BYTEA, 0);
};

Nonreserved_keywordsContext.prototype.CHAR = function() {
    return this.getToken(SQLParser.CHAR, 0);
};

Nonreserved_keywordsContext.prototype.DATE = function() {
    return this.getToken(SQLParser.DATE, 0);
};

Nonreserved_keywordsContext.prototype.DECIMAL = function() {
    return this.getToken(SQLParser.DECIMAL, 0);
};

Nonreserved_keywordsContext.prototype.DOUBLE = function() {
    return this.getToken(SQLParser.DOUBLE, 0);
};

Nonreserved_keywordsContext.prototype.FLOAT = function() {
    return this.getToken(SQLParser.FLOAT, 0);
};

Nonreserved_keywordsContext.prototype.FLOAT4 = function() {
    return this.getToken(SQLParser.FLOAT4, 0);
};

Nonreserved_keywordsContext.prototype.FLOAT8 = function() {
    return this.getToken(SQLParser.FLOAT8, 0);
};

Nonreserved_keywordsContext.prototype.INET4 = function() {
    return this.getToken(SQLParser.INET4, 0);
};

Nonreserved_keywordsContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

Nonreserved_keywordsContext.prototype.INT1 = function() {
    return this.getToken(SQLParser.INT1, 0);
};

Nonreserved_keywordsContext.prototype.INT2 = function() {
    return this.getToken(SQLParser.INT2, 0);
};

Nonreserved_keywordsContext.prototype.INT4 = function() {
    return this.getToken(SQLParser.INT4, 0);
};

Nonreserved_keywordsContext.prototype.INT8 = function() {
    return this.getToken(SQLParser.INT8, 0);
};

Nonreserved_keywordsContext.prototype.INTEGER = function() {
    return this.getToken(SQLParser.INTEGER, 0);
};

Nonreserved_keywordsContext.prototype.NCHAR = function() {
    return this.getToken(SQLParser.NCHAR, 0);
};

Nonreserved_keywordsContext.prototype.NUMERIC = function() {
    return this.getToken(SQLParser.NUMERIC, 0);
};

Nonreserved_keywordsContext.prototype.NVARCHAR = function() {
    return this.getToken(SQLParser.NVARCHAR, 0);
};

Nonreserved_keywordsContext.prototype.REAL = function() {
    return this.getToken(SQLParser.REAL, 0);
};

Nonreserved_keywordsContext.prototype.SMALLINT = function() {
    return this.getToken(SQLParser.SMALLINT, 0);
};

Nonreserved_keywordsContext.prototype.TEXT = function() {
    return this.getToken(SQLParser.TEXT, 0);
};

Nonreserved_keywordsContext.prototype.TIME = function() {
    return this.getToken(SQLParser.TIME, 0);
};

Nonreserved_keywordsContext.prototype.TIMESTAMP = function() {
    return this.getToken(SQLParser.TIMESTAMP, 0);
};

Nonreserved_keywordsContext.prototype.TIMESTAMPTZ = function() {
    return this.getToken(SQLParser.TIMESTAMPTZ, 0);
};

Nonreserved_keywordsContext.prototype.TIMETZ = function() {
    return this.getToken(SQLParser.TIMETZ, 0);
};

Nonreserved_keywordsContext.prototype.TINYINT = function() {
    return this.getToken(SQLParser.TINYINT, 0);
};

Nonreserved_keywordsContext.prototype.VARBINARY = function() {
    return this.getToken(SQLParser.VARBINARY, 0);
};

Nonreserved_keywordsContext.prototype.VARBIT = function() {
    return this.getToken(SQLParser.VARBIT, 0);
};

Nonreserved_keywordsContext.prototype.VARCHAR = function() {
    return this.getToken(SQLParser.VARCHAR, 0);
};

Nonreserved_keywordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNonreserved_keywords(this);
	}
};

Nonreserved_keywordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNonreserved_keywords(this);
	}
};

Nonreserved_keywordsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNonreserved_keywords(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Nonreserved_keywordsContext = Nonreserved_keywordsContext;

SQLParser.prototype.nonreserved_keywords = function() {

    var localctx = new Nonreserved_keywordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SQLParser.RULE_nonreserved_keywords);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 645;
        _la = this._input.LA(1);
        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (SQLParser.AVG - 54)) | (1 << (SQLParser.BETWEEN - 54)) | (1 << (SQLParser.BY - 54)) | (1 << (SQLParser.CENTURY - 54)) | (1 << (SQLParser.CHARACTER - 54)) | (1 << (SQLParser.COLLECT - 54)) | (1 << (SQLParser.COALESCE - 54)) | (1 << (SQLParser.COLUMN - 54)) | (1 << (SQLParser.COUNT - 54)) | (1 << (SQLParser.CUBE - 54)) | (1 << (SQLParser.DAY - 54)) | (1 << (SQLParser.DEC - 54)) | (1 << (SQLParser.DECADE - 54)) | (1 << (SQLParser.DOW - 54)) | (1 << (SQLParser.DOY - 54)) | (1 << (SQLParser.DROP - 54)) | (1 << (SQLParser.EPOCH - 54)) | (1 << (SQLParser.EVERY - 54)) | (1 << (SQLParser.EXISTS - 54)) | (1 << (SQLParser.EXTERNAL - 54)) | (1 << (SQLParser.EXTRACT - 54)) | (1 << (SQLParser.FILTER - 54)) | (1 << (SQLParser.FIRST - 54)) | (1 << (SQLParser.FORMAT - 54)) | (1 << (SQLParser.FUSION - 54)) | (1 << (SQLParser.GROUPING - 54)) | (1 << (SQLParser.HASH - 54)) | (1 << (SQLParser.INDEX - 54)) | (1 << (SQLParser.INSERT - 54)) | (1 << (SQLParser.INTERSECTION - 54)) | (1 << (SQLParser.ISODOW - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (SQLParser.ISOYEAR - 86)) | (1 << (SQLParser.LAST - 86)) | (1 << (SQLParser.LESS - 86)) | (1 << (SQLParser.LIST - 86)) | (1 << (SQLParser.LOCATION - 86)) | (1 << (SQLParser.MAX - 86)) | (1 << (SQLParser.MAXVALUE - 86)) | (1 << (SQLParser.MICROSECONDS - 86)) | (1 << (SQLParser.MILLENNIUM - 86)) | (1 << (SQLParser.MILLISECONDS - 86)) | (1 << (SQLParser.MIN - 86)) | (1 << (SQLParser.MINUTE - 86)) | (1 << (SQLParser.MONTH - 86)) | (1 << (SQLParser.NATIONAL - 86)) | (1 << (SQLParser.NULLIF - 86)) | (1 << (SQLParser.OVERWRITE - 86)) | (1 << (SQLParser.PARTITION - 86)) | (1 << (SQLParser.PARTITIONS - 86)) | (1 << (SQLParser.PRECISION - 86)) | (1 << (SQLParser.PURGE - 86)) | (1 << (SQLParser.QUARTER - 86)) | (1 << (SQLParser.RANGE - 86)) | (1 << (SQLParser.REGEXP - 86)) | (1 << (SQLParser.RLIKE - 86)) | (1 << (SQLParser.ROLLUP - 86)) | (1 << (SQLParser.SECOND - 86)) | (1 << (SQLParser.SET - 86)) | (1 << (SQLParser.SIMILAR - 86)) | (1 << (SQLParser.STDDEV_POP - 86)) | (1 << (SQLParser.STDDEV_SAMP - 86)) | (1 << (SQLParser.SUBPARTITION - 86)) | (1 << (SQLParser.SUM - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (SQLParser.TABLESPACE - 118)) | (1 << (SQLParser.THAN - 118)) | (1 << (SQLParser.TIMEZONE - 118)) | (1 << (SQLParser.TIMEZONE_HOUR - 118)) | (1 << (SQLParser.TIMEZONE_MINUTE - 118)) | (1 << (SQLParser.TRIM - 118)) | (1 << (SQLParser.TO - 118)) | (1 << (SQLParser.UNKNOWN - 118)) | (1 << (SQLParser.VALUES - 118)) | (1 << (SQLParser.VAR_SAMP - 118)) | (1 << (SQLParser.VAR_POP - 118)) | (1 << (SQLParser.VARYING - 118)) | (1 << (SQLParser.WEEK - 118)) | (1 << (SQLParser.YEAR - 118)) | (1 << (SQLParser.ZONE - 118)) | (1 << (SQLParser.BOOLEAN - 118)) | (1 << (SQLParser.BOOL - 118)) | (1 << (SQLParser.BIT - 118)) | (1 << (SQLParser.VARBIT - 118)) | (1 << (SQLParser.INT1 - 118)) | (1 << (SQLParser.INT2 - 118)) | (1 << (SQLParser.INT4 - 118)) | (1 << (SQLParser.INT8 - 118)) | (1 << (SQLParser.TINYINT - 118)) | (1 << (SQLParser.SMALLINT - 118)) | (1 << (SQLParser.INT - 118)) | (1 << (SQLParser.INTEGER - 118)) | (1 << (SQLParser.BIGINT - 118)) | (1 << (SQLParser.FLOAT4 - 118)) | (1 << (SQLParser.FLOAT8 - 118)) | (1 << (SQLParser.REAL - 118)) | (1 << (SQLParser.FLOAT - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (SQLParser.DOUBLE - 150)) | (1 << (SQLParser.NUMERIC - 150)) | (1 << (SQLParser.DECIMAL - 150)) | (1 << (SQLParser.CHAR - 150)) | (1 << (SQLParser.VARCHAR - 150)) | (1 << (SQLParser.NCHAR - 150)) | (1 << (SQLParser.NVARCHAR - 150)) | (1 << (SQLParser.DATE - 150)) | (1 << (SQLParser.TIME - 150)) | (1 << (SQLParser.TIMETZ - 150)) | (1 << (SQLParser.TIMESTAMP - 150)) | (1 << (SQLParser.TIMESTAMPTZ - 150)) | (1 << (SQLParser.TEXT - 150)) | (1 << (SQLParser.VARBINARY - 150)) | (1 << (SQLParser.BLOB - 150)) | (1 << (SQLParser.BYTEA - 150)) | (1 << (SQLParser.INET4 - 150)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unsigned_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_unsigned_literal;
    return this;
}

Unsigned_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unsigned_literalContext.prototype.constructor = Unsigned_literalContext;

Unsigned_literalContext.prototype.unsigned_numeric_literal = function() {
    return this.getTypedRuleContext(Unsigned_numeric_literalContext,0);
};

Unsigned_literalContext.prototype.general_literal = function() {
    return this.getTypedRuleContext(General_literalContext,0);
};

Unsigned_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUnsigned_literal(this);
	}
};

Unsigned_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUnsigned_literal(this);
	}
};

Unsigned_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitUnsigned_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Unsigned_literalContext = Unsigned_literalContext;

SQLParser.prototype.unsigned_literal = function() {

    var localctx = new Unsigned_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SQLParser.RULE_unsigned_literal);
    try {
        this.state = 649;
        switch(this._input.LA(1)) {
        case SQLParser.NUMBER:
        case SQLParser.REAL_NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 647;
            this.unsigned_numeric_literal();
            break;
        case SQLParser.FALSE:
        case SQLParser.TRUE:
        case SQLParser.UNKNOWN:
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMESTAMP:
        case SQLParser.Character_String_Literal:
            this.enterOuterAlt(localctx, 2);
            this.state = 648;
            this.general_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_general_literal;
    return this;
}

General_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_literalContext.prototype.constructor = General_literalContext;

General_literalContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

General_literalContext.prototype.datetime_literal = function() {
    return this.getTypedRuleContext(Datetime_literalContext,0);
};

General_literalContext.prototype.boolean_literal = function() {
    return this.getTypedRuleContext(Boolean_literalContext,0);
};

General_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGeneral_literal(this);
	}
};

General_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGeneral_literal(this);
	}
};

General_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGeneral_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.General_literalContext = General_literalContext;

SQLParser.prototype.general_literal = function() {

    var localctx = new General_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SQLParser.RULE_general_literal);
    try {
        this.state = 654;
        switch(this._input.LA(1)) {
        case SQLParser.Character_String_Literal:
            this.enterOuterAlt(localctx, 1);
            this.state = 651;
            this.match(SQLParser.Character_String_Literal);
            break;
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 2);
            this.state = 652;
            this.datetime_literal();
            break;
        case SQLParser.FALSE:
        case SQLParser.TRUE:
        case SQLParser.UNKNOWN:
            this.enterOuterAlt(localctx, 3);
            this.state = 653;
            this.boolean_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Datetime_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_datetime_literal;
    return this;
}

Datetime_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Datetime_literalContext.prototype.constructor = Datetime_literalContext;

Datetime_literalContext.prototype.timestamp_literal = function() {
    return this.getTypedRuleContext(Timestamp_literalContext,0);
};

Datetime_literalContext.prototype.time_literal = function() {
    return this.getTypedRuleContext(Time_literalContext,0);
};

Datetime_literalContext.prototype.date_literal = function() {
    return this.getTypedRuleContext(Date_literalContext,0);
};

Datetime_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDatetime_literal(this);
	}
};

Datetime_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDatetime_literal(this);
	}
};

Datetime_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDatetime_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Datetime_literalContext = Datetime_literalContext;

SQLParser.prototype.datetime_literal = function() {

    var localctx = new Datetime_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SQLParser.RULE_datetime_literal);
    try {
        this.state = 659;
        switch(this._input.LA(1)) {
        case SQLParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 1);
            this.state = 656;
            this.timestamp_literal();
            break;
        case SQLParser.TIME:
            this.enterOuterAlt(localctx, 2);
            this.state = 657;
            this.time_literal();
            break;
        case SQLParser.DATE:
            this.enterOuterAlt(localctx, 3);
            this.state = 658;
            this.date_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Time_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_time_literal;
    this.time_string = null; // Token
    return this;
}

Time_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Time_literalContext.prototype.constructor = Time_literalContext;

Time_literalContext.prototype.TIME = function() {
    return this.getToken(SQLParser.TIME, 0);
};

Time_literalContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Time_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTime_literal(this);
	}
};

Time_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTime_literal(this);
	}
};

Time_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTime_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Time_literalContext = Time_literalContext;

SQLParser.prototype.time_literal = function() {

    var localctx = new Time_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SQLParser.RULE_time_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this.match(SQLParser.TIME);
        this.state = 662;
        localctx.time_string = this.match(SQLParser.Character_String_Literal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Timestamp_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_timestamp_literal;
    this.timestamp_string = null; // Token
    return this;
}

Timestamp_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timestamp_literalContext.prototype.constructor = Timestamp_literalContext;

Timestamp_literalContext.prototype.TIMESTAMP = function() {
    return this.getToken(SQLParser.TIMESTAMP, 0);
};

Timestamp_literalContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Timestamp_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTimestamp_literal(this);
	}
};

Timestamp_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTimestamp_literal(this);
	}
};

Timestamp_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTimestamp_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Timestamp_literalContext = Timestamp_literalContext;

SQLParser.prototype.timestamp_literal = function() {

    var localctx = new Timestamp_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SQLParser.RULE_timestamp_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 664;
        this.match(SQLParser.TIMESTAMP);
        this.state = 665;
        localctx.timestamp_string = this.match(SQLParser.Character_String_Literal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Date_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_date_literal;
    this.date_string = null; // Token
    return this;
}

Date_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Date_literalContext.prototype.constructor = Date_literalContext;

Date_literalContext.prototype.DATE = function() {
    return this.getToken(SQLParser.DATE, 0);
};

Date_literalContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Date_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDate_literal(this);
	}
};

Date_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDate_literal(this);
	}
};

Date_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDate_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Date_literalContext = Date_literalContext;

SQLParser.prototype.date_literal = function() {

    var localctx = new Date_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SQLParser.RULE_date_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 667;
        this.match(SQLParser.DATE);
        this.state = 668;
        localctx.date_string = this.match(SQLParser.Character_String_Literal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_literal;
    return this;
}

Boolean_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_literalContext.prototype.constructor = Boolean_literalContext;

Boolean_literalContext.prototype.TRUE = function() {
    return this.getToken(SQLParser.TRUE, 0);
};

Boolean_literalContext.prototype.FALSE = function() {
    return this.getToken(SQLParser.FALSE, 0);
};

Boolean_literalContext.prototype.UNKNOWN = function() {
    return this.getToken(SQLParser.UNKNOWN, 0);
};

Boolean_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_literal(this);
	}
};

Boolean_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_literal(this);
	}
};

Boolean_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_literalContext = Boolean_literalContext;

SQLParser.prototype.boolean_literal = function() {

    var localctx = new Boolean_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SQLParser.RULE_boolean_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.FALSE || _la===SQLParser.TRUE || _la===SQLParser.UNKNOWN)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_data_type;
    return this;
}

Data_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_typeContext.prototype.constructor = Data_typeContext;

Data_typeContext.prototype.predefined_type = function() {
    return this.getTypedRuleContext(Predefined_typeContext,0);
};

Data_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterData_type(this);
	}
};

Data_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitData_type(this);
	}
};

Data_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitData_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Data_typeContext = Data_typeContext;

SQLParser.prototype.data_type = function() {

    var localctx = new Data_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SQLParser.RULE_data_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 672;
        this.predefined_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Predefined_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_predefined_type;
    return this;
}

Predefined_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Predefined_typeContext.prototype.constructor = Predefined_typeContext;

Predefined_typeContext.prototype.character_string_type = function() {
    return this.getTypedRuleContext(Character_string_typeContext,0);
};

Predefined_typeContext.prototype.national_character_string_type = function() {
    return this.getTypedRuleContext(National_character_string_typeContext,0);
};

Predefined_typeContext.prototype.binary_large_object_string_type = function() {
    return this.getTypedRuleContext(Binary_large_object_string_typeContext,0);
};

Predefined_typeContext.prototype.numeric_type = function() {
    return this.getTypedRuleContext(Numeric_typeContext,0);
};

Predefined_typeContext.prototype.boolean_type = function() {
    return this.getTypedRuleContext(Boolean_typeContext,0);
};

Predefined_typeContext.prototype.datetime_type = function() {
    return this.getTypedRuleContext(Datetime_typeContext,0);
};

Predefined_typeContext.prototype.bit_type = function() {
    return this.getTypedRuleContext(Bit_typeContext,0);
};

Predefined_typeContext.prototype.binary_type = function() {
    return this.getTypedRuleContext(Binary_typeContext,0);
};

Predefined_typeContext.prototype.network_type = function() {
    return this.getTypedRuleContext(Network_typeContext,0);
};

Predefined_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPredefined_type(this);
	}
};

Predefined_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPredefined_type(this);
	}
};

Predefined_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPredefined_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Predefined_typeContext = Predefined_typeContext;

SQLParser.prototype.predefined_type = function() {

    var localctx = new Predefined_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SQLParser.RULE_predefined_type);
    try {
        this.state = 683;
        switch(this._input.LA(1)) {
        case SQLParser.CHARACTER:
        case SQLParser.CHAR:
        case SQLParser.VARCHAR:
        case SQLParser.TEXT:
            this.enterOuterAlt(localctx, 1);
            this.state = 674;
            this.character_string_type();
            break;
        case SQLParser.NATIONAL:
        case SQLParser.NCHAR:
        case SQLParser.NVARCHAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 675;
            this.national_character_string_type();
            break;
        case SQLParser.BLOB:
        case SQLParser.BYTEA:
            this.enterOuterAlt(localctx, 3);
            this.state = 676;
            this.binary_large_object_string_type();
            break;
        case SQLParser.DEC:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 677;
            this.numeric_type();
            break;
        case SQLParser.BOOLEAN:
        case SQLParser.BOOL:
            this.enterOuterAlt(localctx, 5);
            this.state = 678;
            this.boolean_type();
            break;
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMETZ:
        case SQLParser.TIMESTAMP:
        case SQLParser.TIMESTAMPTZ:
            this.enterOuterAlt(localctx, 6);
            this.state = 679;
            this.datetime_type();
            break;
        case SQLParser.BIT:
        case SQLParser.VARBIT:
            this.enterOuterAlt(localctx, 7);
            this.state = 680;
            this.bit_type();
            break;
        case SQLParser.BINARY:
        case SQLParser.VARBINARY:
            this.enterOuterAlt(localctx, 8);
            this.state = 681;
            this.binary_type();
            break;
        case SQLParser.INET4:
            this.enterOuterAlt(localctx, 9);
            this.state = 682;
            this.network_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Network_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_network_type;
    return this;
}

Network_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Network_typeContext.prototype.constructor = Network_typeContext;

Network_typeContext.prototype.INET4 = function() {
    return this.getToken(SQLParser.INET4, 0);
};

Network_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNetwork_type(this);
	}
};

Network_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNetwork_type(this);
	}
};

Network_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNetwork_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Network_typeContext = Network_typeContext;

SQLParser.prototype.network_type = function() {

    var localctx = new Network_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SQLParser.RULE_network_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this.match(SQLParser.INET4);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Character_string_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_character_string_type;
    return this;
}

Character_string_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Character_string_typeContext.prototype.constructor = Character_string_typeContext;

Character_string_typeContext.prototype.CHARACTER = function() {
    return this.getToken(SQLParser.CHARACTER, 0);
};

Character_string_typeContext.prototype.type_length = function() {
    return this.getTypedRuleContext(Type_lengthContext,0);
};

Character_string_typeContext.prototype.CHAR = function() {
    return this.getToken(SQLParser.CHAR, 0);
};

Character_string_typeContext.prototype.VARYING = function() {
    return this.getToken(SQLParser.VARYING, 0);
};

Character_string_typeContext.prototype.VARCHAR = function() {
    return this.getToken(SQLParser.VARCHAR, 0);
};

Character_string_typeContext.prototype.TEXT = function() {
    return this.getToken(SQLParser.TEXT, 0);
};

Character_string_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCharacter_string_type(this);
	}
};

Character_string_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCharacter_string_type(this);
	}
};

Character_string_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCharacter_string_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Character_string_typeContext = Character_string_typeContext;

SQLParser.prototype.character_string_type = function() {

    var localctx = new Character_string_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SQLParser.RULE_character_string_type);
    var _la = 0; // Token type
    try {
        this.state = 710;
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 687;
            this.match(SQLParser.CHARACTER);
            this.state = 689;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 688;
                this.type_length();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 691;
            this.match(SQLParser.CHAR);
            this.state = 693;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 692;
                this.type_length();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 695;
            this.match(SQLParser.CHARACTER);
            this.state = 696;
            this.match(SQLParser.VARYING);
            this.state = 698;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 697;
                this.type_length();
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 700;
            this.match(SQLParser.CHAR);
            this.state = 701;
            this.match(SQLParser.VARYING);
            this.state = 703;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 702;
                this.type_length();
            }

            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 705;
            this.match(SQLParser.VARCHAR);
            this.state = 707;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 706;
                this.type_length();
            }

            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 709;
            this.match(SQLParser.TEXT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_lengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_type_length;
    return this;
}

Type_lengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_lengthContext.prototype.constructor = Type_lengthContext;

Type_lengthContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Type_lengthContext.prototype.NUMBER = function() {
    return this.getToken(SQLParser.NUMBER, 0);
};

Type_lengthContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Type_lengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterType_length(this);
	}
};

Type_lengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitType_length(this);
	}
};

Type_lengthContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitType_length(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Type_lengthContext = Type_lengthContext;

SQLParser.prototype.type_length = function() {

    var localctx = new Type_lengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SQLParser.RULE_type_length);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 712;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 713;
        this.match(SQLParser.NUMBER);
        this.state = 714;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function National_character_string_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_national_character_string_type;
    return this;
}

National_character_string_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
National_character_string_typeContext.prototype.constructor = National_character_string_typeContext;

National_character_string_typeContext.prototype.NATIONAL = function() {
    return this.getToken(SQLParser.NATIONAL, 0);
};

National_character_string_typeContext.prototype.CHARACTER = function() {
    return this.getToken(SQLParser.CHARACTER, 0);
};

National_character_string_typeContext.prototype.type_length = function() {
    return this.getTypedRuleContext(Type_lengthContext,0);
};

National_character_string_typeContext.prototype.CHAR = function() {
    return this.getToken(SQLParser.CHAR, 0);
};

National_character_string_typeContext.prototype.NCHAR = function() {
    return this.getToken(SQLParser.NCHAR, 0);
};

National_character_string_typeContext.prototype.VARYING = function() {
    return this.getToken(SQLParser.VARYING, 0);
};

National_character_string_typeContext.prototype.NVARCHAR = function() {
    return this.getToken(SQLParser.NVARCHAR, 0);
};

National_character_string_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNational_character_string_type(this);
	}
};

National_character_string_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNational_character_string_type(this);
	}
};

National_character_string_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNational_character_string_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.National_character_string_typeContext = National_character_string_typeContext;

SQLParser.prototype.national_character_string_type = function() {

    var localctx = new National_character_string_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SQLParser.RULE_national_character_string_type);
    var _la = 0; // Token type
    try {
        this.state = 751;
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 716;
            this.match(SQLParser.NATIONAL);
            this.state = 717;
            this.match(SQLParser.CHARACTER);
            this.state = 719;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 718;
                this.type_length();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 721;
            this.match(SQLParser.NATIONAL);
            this.state = 722;
            this.match(SQLParser.CHAR);
            this.state = 724;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 723;
                this.type_length();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 726;
            this.match(SQLParser.NCHAR);
            this.state = 728;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 727;
                this.type_length();
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 730;
            this.match(SQLParser.NATIONAL);
            this.state = 731;
            this.match(SQLParser.CHARACTER);
            this.state = 732;
            this.match(SQLParser.VARYING);
            this.state = 734;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 733;
                this.type_length();
            }

            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 736;
            this.match(SQLParser.NATIONAL);
            this.state = 737;
            this.match(SQLParser.CHAR);
            this.state = 738;
            this.match(SQLParser.VARYING);
            this.state = 740;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 739;
                this.type_length();
            }

            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 742;
            this.match(SQLParser.NCHAR);
            this.state = 743;
            this.match(SQLParser.VARYING);
            this.state = 745;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 744;
                this.type_length();
            }

            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 747;
            this.match(SQLParser.NVARCHAR);
            this.state = 749;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 748;
                this.type_length();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Binary_large_object_string_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_binary_large_object_string_type;
    return this;
}

Binary_large_object_string_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_large_object_string_typeContext.prototype.constructor = Binary_large_object_string_typeContext;

Binary_large_object_string_typeContext.prototype.BLOB = function() {
    return this.getToken(SQLParser.BLOB, 0);
};

Binary_large_object_string_typeContext.prototype.type_length = function() {
    return this.getTypedRuleContext(Type_lengthContext,0);
};

Binary_large_object_string_typeContext.prototype.BYTEA = function() {
    return this.getToken(SQLParser.BYTEA, 0);
};

Binary_large_object_string_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBinary_large_object_string_type(this);
	}
};

Binary_large_object_string_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBinary_large_object_string_type(this);
	}
};

Binary_large_object_string_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBinary_large_object_string_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Binary_large_object_string_typeContext = Binary_large_object_string_typeContext;

SQLParser.prototype.binary_large_object_string_type = function() {

    var localctx = new Binary_large_object_string_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SQLParser.RULE_binary_large_object_string_type);
    var _la = 0; // Token type
    try {
        this.state = 761;
        switch(this._input.LA(1)) {
        case SQLParser.BLOB:
            this.enterOuterAlt(localctx, 1);
            this.state = 753;
            this.match(SQLParser.BLOB);
            this.state = 755;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 754;
                this.type_length();
            }

            break;
        case SQLParser.BYTEA:
            this.enterOuterAlt(localctx, 2);
            this.state = 757;
            this.match(SQLParser.BYTEA);
            this.state = 759;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 758;
                this.type_length();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_numeric_type;
    return this;
}

Numeric_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_typeContext.prototype.constructor = Numeric_typeContext;

Numeric_typeContext.prototype.exact_numeric_type = function() {
    return this.getTypedRuleContext(Exact_numeric_typeContext,0);
};

Numeric_typeContext.prototype.approximate_numeric_type = function() {
    return this.getTypedRuleContext(Approximate_numeric_typeContext,0);
};

Numeric_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNumeric_type(this);
	}
};

Numeric_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNumeric_type(this);
	}
};

Numeric_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNumeric_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Numeric_typeContext = Numeric_typeContext;

SQLParser.prototype.numeric_type = function() {

    var localctx = new Numeric_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SQLParser.RULE_numeric_type);
    try {
        this.state = 765;
        switch(this._input.LA(1)) {
        case SQLParser.DEC:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 763;
            this.exact_numeric_type();
            break;
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 764;
            this.approximate_numeric_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exact_numeric_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_exact_numeric_type;
    return this;
}

Exact_numeric_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exact_numeric_typeContext.prototype.constructor = Exact_numeric_typeContext;

Exact_numeric_typeContext.prototype.NUMERIC = function() {
    return this.getToken(SQLParser.NUMERIC, 0);
};

Exact_numeric_typeContext.prototype.precision_param = function() {
    return this.getTypedRuleContext(Precision_paramContext,0);
};

Exact_numeric_typeContext.prototype.DECIMAL = function() {
    return this.getToken(SQLParser.DECIMAL, 0);
};

Exact_numeric_typeContext.prototype.DEC = function() {
    return this.getToken(SQLParser.DEC, 0);
};

Exact_numeric_typeContext.prototype.INT1 = function() {
    return this.getToken(SQLParser.INT1, 0);
};

Exact_numeric_typeContext.prototype.TINYINT = function() {
    return this.getToken(SQLParser.TINYINT, 0);
};

Exact_numeric_typeContext.prototype.INT2 = function() {
    return this.getToken(SQLParser.INT2, 0);
};

Exact_numeric_typeContext.prototype.SMALLINT = function() {
    return this.getToken(SQLParser.SMALLINT, 0);
};

Exact_numeric_typeContext.prototype.INT4 = function() {
    return this.getToken(SQLParser.INT4, 0);
};

Exact_numeric_typeContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

Exact_numeric_typeContext.prototype.INTEGER = function() {
    return this.getToken(SQLParser.INTEGER, 0);
};

Exact_numeric_typeContext.prototype.INT8 = function() {
    return this.getToken(SQLParser.INT8, 0);
};

Exact_numeric_typeContext.prototype.BIGINT = function() {
    return this.getToken(SQLParser.BIGINT, 0);
};

Exact_numeric_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExact_numeric_type(this);
	}
};

Exact_numeric_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExact_numeric_type(this);
	}
};

Exact_numeric_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExact_numeric_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Exact_numeric_typeContext = Exact_numeric_typeContext;

SQLParser.prototype.exact_numeric_type = function() {

    var localctx = new Exact_numeric_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SQLParser.RULE_exact_numeric_type);
    var _la = 0; // Token type
    try {
        this.state = 788;
        switch(this._input.LA(1)) {
        case SQLParser.NUMERIC:
            this.enterOuterAlt(localctx, 1);
            this.state = 767;
            this.match(SQLParser.NUMERIC);
            this.state = 769;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 768;
                this.precision_param();
            }

            break;
        case SQLParser.DECIMAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 771;
            this.match(SQLParser.DECIMAL);
            this.state = 773;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 772;
                this.precision_param();
            }

            break;
        case SQLParser.DEC:
            this.enterOuterAlt(localctx, 3);
            this.state = 775;
            this.match(SQLParser.DEC);
            this.state = 777;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 776;
                this.precision_param();
            }

            break;
        case SQLParser.INT1:
            this.enterOuterAlt(localctx, 4);
            this.state = 779;
            this.match(SQLParser.INT1);
            break;
        case SQLParser.TINYINT:
            this.enterOuterAlt(localctx, 5);
            this.state = 780;
            this.match(SQLParser.TINYINT);
            break;
        case SQLParser.INT2:
            this.enterOuterAlt(localctx, 6);
            this.state = 781;
            this.match(SQLParser.INT2);
            break;
        case SQLParser.SMALLINT:
            this.enterOuterAlt(localctx, 7);
            this.state = 782;
            this.match(SQLParser.SMALLINT);
            break;
        case SQLParser.INT4:
            this.enterOuterAlt(localctx, 8);
            this.state = 783;
            this.match(SQLParser.INT4);
            break;
        case SQLParser.INT:
            this.enterOuterAlt(localctx, 9);
            this.state = 784;
            this.match(SQLParser.INT);
            break;
        case SQLParser.INTEGER:
            this.enterOuterAlt(localctx, 10);
            this.state = 785;
            this.match(SQLParser.INTEGER);
            break;
        case SQLParser.INT8:
            this.enterOuterAlt(localctx, 11);
            this.state = 786;
            this.match(SQLParser.INT8);
            break;
        case SQLParser.BIGINT:
            this.enterOuterAlt(localctx, 12);
            this.state = 787;
            this.match(SQLParser.BIGINT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Approximate_numeric_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_approximate_numeric_type;
    return this;
}

Approximate_numeric_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Approximate_numeric_typeContext.prototype.constructor = Approximate_numeric_typeContext;

Approximate_numeric_typeContext.prototype.FLOAT = function() {
    return this.getToken(SQLParser.FLOAT, 0);
};

Approximate_numeric_typeContext.prototype.precision_param = function() {
    return this.getTypedRuleContext(Precision_paramContext,0);
};

Approximate_numeric_typeContext.prototype.FLOAT4 = function() {
    return this.getToken(SQLParser.FLOAT4, 0);
};

Approximate_numeric_typeContext.prototype.REAL = function() {
    return this.getToken(SQLParser.REAL, 0);
};

Approximate_numeric_typeContext.prototype.FLOAT8 = function() {
    return this.getToken(SQLParser.FLOAT8, 0);
};

Approximate_numeric_typeContext.prototype.DOUBLE = function() {
    return this.getToken(SQLParser.DOUBLE, 0);
};

Approximate_numeric_typeContext.prototype.PRECISION = function() {
    return this.getToken(SQLParser.PRECISION, 0);
};

Approximate_numeric_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterApproximate_numeric_type(this);
	}
};

Approximate_numeric_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitApproximate_numeric_type(this);
	}
};

Approximate_numeric_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitApproximate_numeric_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Approximate_numeric_typeContext = Approximate_numeric_typeContext;

SQLParser.prototype.approximate_numeric_type = function() {

    var localctx = new Approximate_numeric_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SQLParser.RULE_approximate_numeric_type);
    var _la = 0; // Token type
    try {
        this.state = 800;
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 790;
            this.match(SQLParser.FLOAT);
            this.state = 792;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 791;
                this.precision_param();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 794;
            this.match(SQLParser.FLOAT4);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 795;
            this.match(SQLParser.REAL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 796;
            this.match(SQLParser.FLOAT8);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 797;
            this.match(SQLParser.DOUBLE);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 798;
            this.match(SQLParser.DOUBLE);
            this.state = 799;
            this.match(SQLParser.PRECISION);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Precision_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_precision_param;
    this.precision = null; // Token
    this.scale = null; // Token
    return this;
}

Precision_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precision_paramContext.prototype.constructor = Precision_paramContext;

Precision_paramContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Precision_paramContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Precision_paramContext.prototype.NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.NUMBER);
    } else {
        return this.getToken(SQLParser.NUMBER, i);
    }
};


Precision_paramContext.prototype.COMMA = function() {
    return this.getToken(SQLParser.COMMA, 0);
};

Precision_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPrecision_param(this);
	}
};

Precision_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPrecision_param(this);
	}
};

Precision_paramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPrecision_param(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Precision_paramContext = Precision_paramContext;

SQLParser.prototype.precision_param = function() {

    var localctx = new Precision_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SQLParser.RULE_precision_param);
    try {
        this.state = 810;
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 802;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 803;
            localctx.precision = this.match(SQLParser.NUMBER);
            this.state = 804;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 805;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 806;
            localctx.precision = this.match(SQLParser.NUMBER);
            this.state = 807;
            this.match(SQLParser.COMMA);
            this.state = 808;
            localctx.scale = this.match(SQLParser.NUMBER);
            this.state = 809;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_type;
    return this;
}

Boolean_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_typeContext.prototype.constructor = Boolean_typeContext;

Boolean_typeContext.prototype.BOOLEAN = function() {
    return this.getToken(SQLParser.BOOLEAN, 0);
};

Boolean_typeContext.prototype.BOOL = function() {
    return this.getToken(SQLParser.BOOL, 0);
};

Boolean_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_type(this);
	}
};

Boolean_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_type(this);
	}
};

Boolean_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_typeContext = Boolean_typeContext;

SQLParser.prototype.boolean_type = function() {

    var localctx = new Boolean_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SQLParser.RULE_boolean_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.BOOLEAN || _la===SQLParser.BOOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Datetime_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_datetime_type;
    return this;
}

Datetime_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Datetime_typeContext.prototype.constructor = Datetime_typeContext;

Datetime_typeContext.prototype.DATE = function() {
    return this.getToken(SQLParser.DATE, 0);
};

Datetime_typeContext.prototype.TIME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.TIME);
    } else {
        return this.getToken(SQLParser.TIME, i);
    }
};


Datetime_typeContext.prototype.WITH = function() {
    return this.getToken(SQLParser.WITH, 0);
};

Datetime_typeContext.prototype.ZONE = function() {
    return this.getToken(SQLParser.ZONE, 0);
};

Datetime_typeContext.prototype.TIMETZ = function() {
    return this.getToken(SQLParser.TIMETZ, 0);
};

Datetime_typeContext.prototype.TIMESTAMP = function() {
    return this.getToken(SQLParser.TIMESTAMP, 0);
};

Datetime_typeContext.prototype.TIMESTAMPTZ = function() {
    return this.getToken(SQLParser.TIMESTAMPTZ, 0);
};

Datetime_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDatetime_type(this);
	}
};

Datetime_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDatetime_type(this);
	}
};

Datetime_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDatetime_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Datetime_typeContext = Datetime_typeContext;

SQLParser.prototype.datetime_type = function() {

    var localctx = new Datetime_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SQLParser.RULE_datetime_type);
    try {
        this.state = 827;
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 814;
            this.match(SQLParser.DATE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 815;
            this.match(SQLParser.TIME);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 816;
            this.match(SQLParser.TIME);
            this.state = 817;
            this.match(SQLParser.WITH);
            this.state = 818;
            this.match(SQLParser.TIME);
            this.state = 819;
            this.match(SQLParser.ZONE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 820;
            this.match(SQLParser.TIMETZ);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 821;
            this.match(SQLParser.TIMESTAMP);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 822;
            this.match(SQLParser.TIMESTAMP);
            this.state = 823;
            this.match(SQLParser.WITH);
            this.state = 824;
            this.match(SQLParser.TIME);
            this.state = 825;
            this.match(SQLParser.ZONE);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 826;
            this.match(SQLParser.TIMESTAMPTZ);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bit_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_bit_type;
    return this;
}

Bit_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bit_typeContext.prototype.constructor = Bit_typeContext;

Bit_typeContext.prototype.BIT = function() {
    return this.getToken(SQLParser.BIT, 0);
};

Bit_typeContext.prototype.type_length = function() {
    return this.getTypedRuleContext(Type_lengthContext,0);
};

Bit_typeContext.prototype.VARBIT = function() {
    return this.getToken(SQLParser.VARBIT, 0);
};

Bit_typeContext.prototype.VARYING = function() {
    return this.getToken(SQLParser.VARYING, 0);
};

Bit_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBit_type(this);
	}
};

Bit_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBit_type(this);
	}
};

Bit_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBit_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Bit_typeContext = Bit_typeContext;

SQLParser.prototype.bit_type = function() {

    var localctx = new Bit_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SQLParser.RULE_bit_type);
    var _la = 0; // Token type
    try {
        this.state = 842;
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 829;
            this.match(SQLParser.BIT);
            this.state = 831;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 830;
                this.type_length();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 833;
            this.match(SQLParser.VARBIT);
            this.state = 835;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 834;
                this.type_length();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 837;
            this.match(SQLParser.BIT);
            this.state = 838;
            this.match(SQLParser.VARYING);
            this.state = 840;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 839;
                this.type_length();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Binary_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_binary_type;
    return this;
}

Binary_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_typeContext.prototype.constructor = Binary_typeContext;

Binary_typeContext.prototype.BINARY = function() {
    return this.getToken(SQLParser.BINARY, 0);
};

Binary_typeContext.prototype.type_length = function() {
    return this.getTypedRuleContext(Type_lengthContext,0);
};

Binary_typeContext.prototype.VARYING = function() {
    return this.getToken(SQLParser.VARYING, 0);
};

Binary_typeContext.prototype.VARBINARY = function() {
    return this.getToken(SQLParser.VARBINARY, 0);
};

Binary_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBinary_type(this);
	}
};

Binary_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBinary_type(this);
	}
};

Binary_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBinary_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Binary_typeContext = Binary_typeContext;

SQLParser.prototype.binary_type = function() {

    var localctx = new Binary_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SQLParser.RULE_binary_type);
    var _la = 0; // Token type
    try {
        this.state = 857;
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 844;
            this.match(SQLParser.BINARY);
            this.state = 846;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 845;
                this.type_length();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 848;
            this.match(SQLParser.BINARY);
            this.state = 849;
            this.match(SQLParser.VARYING);
            this.state = 851;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 850;
                this.type_length();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 853;
            this.match(SQLParser.VARBINARY);
            this.state = 855;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 854;
                this.type_length();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_expression_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_value_expression_primary;
    return this;
}

Value_expression_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_expression_primaryContext.prototype.constructor = Value_expression_primaryContext;

Value_expression_primaryContext.prototype.parenthesized_value_expression = function() {
    return this.getTypedRuleContext(Parenthesized_value_expressionContext,0);
};

Value_expression_primaryContext.prototype.nonparenthesized_value_expression_primary = function() {
    return this.getTypedRuleContext(Nonparenthesized_value_expression_primaryContext,0);
};

Value_expression_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterValue_expression_primary(this);
	}
};

Value_expression_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitValue_expression_primary(this);
	}
};

Value_expression_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitValue_expression_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Value_expression_primaryContext = Value_expression_primaryContext;

SQLParser.prototype.value_expression_primary = function() {

    var localctx = new Value_expression_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SQLParser.RULE_value_expression_primary);
    try {
        this.state = 861;
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 859;
            this.parenthesized_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 860;
            this.nonparenthesized_value_expression_primary();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parenthesized_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_parenthesized_value_expression;
    return this;
}

Parenthesized_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesized_value_expressionContext.prototype.constructor = Parenthesized_value_expressionContext;

Parenthesized_value_expressionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Parenthesized_value_expressionContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

Parenthesized_value_expressionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Parenthesized_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterParenthesized_value_expression(this);
	}
};

Parenthesized_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitParenthesized_value_expression(this);
	}
};

Parenthesized_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitParenthesized_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Parenthesized_value_expressionContext = Parenthesized_value_expressionContext;

SQLParser.prototype.parenthesized_value_expression = function() {

    var localctx = new Parenthesized_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SQLParser.RULE_parenthesized_value_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 863;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 864;
        this.value_expression();
        this.state = 865;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nonparenthesized_value_expression_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_nonparenthesized_value_expression_primary;
    return this;
}

Nonparenthesized_value_expression_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonparenthesized_value_expression_primaryContext.prototype.constructor = Nonparenthesized_value_expression_primaryContext;

Nonparenthesized_value_expression_primaryContext.prototype.unsigned_value_specification = function() {
    return this.getTypedRuleContext(Unsigned_value_specificationContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.column_reference = function() {
    return this.getTypedRuleContext(Column_referenceContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.set_function_specification = function() {
    return this.getTypedRuleContext(Set_function_specificationContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.scalar_subquery = function() {
    return this.getTypedRuleContext(Scalar_subqueryContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.case_expression = function() {
    return this.getTypedRuleContext(Case_expressionContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.cast_specification = function() {
    return this.getTypedRuleContext(Cast_specificationContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.routine_invocation = function() {
    return this.getTypedRuleContext(Routine_invocationContext,0);
};

Nonparenthesized_value_expression_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNonparenthesized_value_expression_primary(this);
	}
};

Nonparenthesized_value_expression_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNonparenthesized_value_expression_primary(this);
	}
};

Nonparenthesized_value_expression_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNonparenthesized_value_expression_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Nonparenthesized_value_expression_primaryContext = Nonparenthesized_value_expression_primaryContext;

SQLParser.prototype.nonparenthesized_value_expression_primary = function() {

    var localctx = new Nonparenthesized_value_expression_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SQLParser.RULE_nonparenthesized_value_expression_primary);
    try {
        this.state = 874;
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 867;
            this.unsigned_value_specification();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 868;
            this.column_reference();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 869;
            this.set_function_specification();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 870;
            this.scalar_subquery();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 871;
            this.case_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 872;
            this.cast_specification();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 873;
            this.routine_invocation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unsigned_value_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_unsigned_value_specification;
    return this;
}

Unsigned_value_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unsigned_value_specificationContext.prototype.constructor = Unsigned_value_specificationContext;

Unsigned_value_specificationContext.prototype.unsigned_literal = function() {
    return this.getTypedRuleContext(Unsigned_literalContext,0);
};

Unsigned_value_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUnsigned_value_specification(this);
	}
};

Unsigned_value_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUnsigned_value_specification(this);
	}
};

Unsigned_value_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitUnsigned_value_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Unsigned_value_specificationContext = Unsigned_value_specificationContext;

SQLParser.prototype.unsigned_value_specification = function() {

    var localctx = new Unsigned_value_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SQLParser.RULE_unsigned_value_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.unsigned_literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unsigned_numeric_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_unsigned_numeric_literal;
    return this;
}

Unsigned_numeric_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unsigned_numeric_literalContext.prototype.constructor = Unsigned_numeric_literalContext;

Unsigned_numeric_literalContext.prototype.NUMBER = function() {
    return this.getToken(SQLParser.NUMBER, 0);
};

Unsigned_numeric_literalContext.prototype.REAL_NUMBER = function() {
    return this.getToken(SQLParser.REAL_NUMBER, 0);
};

Unsigned_numeric_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUnsigned_numeric_literal(this);
	}
};

Unsigned_numeric_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUnsigned_numeric_literal(this);
	}
};

Unsigned_numeric_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitUnsigned_numeric_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Unsigned_numeric_literalContext = Unsigned_numeric_literalContext;

SQLParser.prototype.unsigned_numeric_literal = function() {

    var localctx = new Unsigned_numeric_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SQLParser.RULE_unsigned_numeric_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 878;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.NUMBER || _la===SQLParser.REAL_NUMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Signed_numerical_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_signed_numerical_literal;
    return this;
}

Signed_numerical_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signed_numerical_literalContext.prototype.constructor = Signed_numerical_literalContext;

Signed_numerical_literalContext.prototype.unsigned_numeric_literal = function() {
    return this.getTypedRuleContext(Unsigned_numeric_literalContext,0);
};

Signed_numerical_literalContext.prototype.sign = function() {
    return this.getTypedRuleContext(SignContext,0);
};

Signed_numerical_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSigned_numerical_literal(this);
	}
};

Signed_numerical_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSigned_numerical_literal(this);
	}
};

Signed_numerical_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSigned_numerical_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Signed_numerical_literalContext = Signed_numerical_literalContext;

SQLParser.prototype.signed_numerical_literal = function() {

    var localctx = new Signed_numerical_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SQLParser.RULE_signed_numerical_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 881;
        _la = this._input.LA(1);
        if(_la===SQLParser.PLUS || _la===SQLParser.MINUS) {
            this.state = 880;
            this.sign();
        }

        this.state = 883;
        this.unsigned_numeric_literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_function_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_set_function_specification;
    return this;
}

Set_function_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_function_specificationContext.prototype.constructor = Set_function_specificationContext;

Set_function_specificationContext.prototype.aggregate_function = function() {
    return this.getTypedRuleContext(Aggregate_functionContext,0);
};

Set_function_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSet_function_specification(this);
	}
};

Set_function_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSet_function_specification(this);
	}
};

Set_function_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSet_function_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Set_function_specificationContext = Set_function_specificationContext;

SQLParser.prototype.set_function_specification = function() {

    var localctx = new Set_function_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SQLParser.RULE_set_function_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 885;
        this.aggregate_function();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Aggregate_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_aggregate_function;
    return this;
}

Aggregate_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_functionContext.prototype.constructor = Aggregate_functionContext;

Aggregate_functionContext.prototype.COUNT = function() {
    return this.getToken(SQLParser.COUNT, 0);
};

Aggregate_functionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Aggregate_functionContext.prototype.MULTIPLY = function() {
    return this.getToken(SQLParser.MULTIPLY, 0);
};

Aggregate_functionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Aggregate_functionContext.prototype.general_set_function = function() {
    return this.getTypedRuleContext(General_set_functionContext,0);
};

Aggregate_functionContext.prototype.filter_clause = function() {
    return this.getTypedRuleContext(Filter_clauseContext,0);
};

Aggregate_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterAggregate_function(this);
	}
};

Aggregate_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitAggregate_function(this);
	}
};

Aggregate_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitAggregate_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Aggregate_functionContext = Aggregate_functionContext;

SQLParser.prototype.aggregate_function = function() {

    var localctx = new Aggregate_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SQLParser.RULE_aggregate_function);
    try {
        this.state = 895;
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 887;
            this.match(SQLParser.COUNT);
            this.state = 888;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 889;
            this.match(SQLParser.MULTIPLY);
            this.state = 890;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 891;
            this.general_set_function();
            this.state = 893;
            var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
            if(la_===1) {
                this.state = 892;
                this.filter_clause();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_set_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_general_set_function;
    return this;
}

General_set_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_set_functionContext.prototype.constructor = General_set_functionContext;

General_set_functionContext.prototype.set_function_type = function() {
    return this.getTypedRuleContext(Set_function_typeContext,0);
};

General_set_functionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

General_set_functionContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

General_set_functionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

General_set_functionContext.prototype.set_qualifier = function() {
    return this.getTypedRuleContext(Set_qualifierContext,0);
};

General_set_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGeneral_set_function(this);
	}
};

General_set_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGeneral_set_function(this);
	}
};

General_set_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGeneral_set_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.General_set_functionContext = General_set_functionContext;

SQLParser.prototype.general_set_function = function() {

    var localctx = new General_set_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SQLParser.RULE_general_set_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 897;
        this.set_function_type();
        this.state = 898;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 900;
        _la = this._input.LA(1);
        if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
            this.state = 899;
            this.set_qualifier();
        }

        this.state = 902;
        this.value_expression();
        this.state = 903;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_function_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_set_function_type;
    return this;
}

Set_function_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_function_typeContext.prototype.constructor = Set_function_typeContext;

Set_function_typeContext.prototype.AVG = function() {
    return this.getToken(SQLParser.AVG, 0);
};

Set_function_typeContext.prototype.MAX = function() {
    return this.getToken(SQLParser.MAX, 0);
};

Set_function_typeContext.prototype.MIN = function() {
    return this.getToken(SQLParser.MIN, 0);
};

Set_function_typeContext.prototype.SUM = function() {
    return this.getToken(SQLParser.SUM, 0);
};

Set_function_typeContext.prototype.EVERY = function() {
    return this.getToken(SQLParser.EVERY, 0);
};

Set_function_typeContext.prototype.ANY = function() {
    return this.getToken(SQLParser.ANY, 0);
};

Set_function_typeContext.prototype.SOME = function() {
    return this.getToken(SQLParser.SOME, 0);
};

Set_function_typeContext.prototype.COUNT = function() {
    return this.getToken(SQLParser.COUNT, 0);
};

Set_function_typeContext.prototype.STDDEV_POP = function() {
    return this.getToken(SQLParser.STDDEV_POP, 0);
};

Set_function_typeContext.prototype.STDDEV_SAMP = function() {
    return this.getToken(SQLParser.STDDEV_SAMP, 0);
};

Set_function_typeContext.prototype.VAR_SAMP = function() {
    return this.getToken(SQLParser.VAR_SAMP, 0);
};

Set_function_typeContext.prototype.VAR_POP = function() {
    return this.getToken(SQLParser.VAR_POP, 0);
};

Set_function_typeContext.prototype.COLLECT = function() {
    return this.getToken(SQLParser.COLLECT, 0);
};

Set_function_typeContext.prototype.FUSION = function() {
    return this.getToken(SQLParser.FUSION, 0);
};

Set_function_typeContext.prototype.INTERSECTION = function() {
    return this.getToken(SQLParser.INTERSECTION, 0);
};

Set_function_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSet_function_type(this);
	}
};

Set_function_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSet_function_type(this);
	}
};

Set_function_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSet_function_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Set_function_typeContext = Set_function_typeContext;

SQLParser.prototype.set_function_type = function() {

    var localctx = new Set_function_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SQLParser.RULE_set_function_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 905;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.ANY || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (SQLParser.SOME - 42)) | (1 << (SQLParser.AVG - 42)) | (1 << (SQLParser.COLLECT - 42)) | (1 << (SQLParser.COUNT - 42)) | (1 << (SQLParser.EVERY - 42)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (SQLParser.FUSION - 78)) | (1 << (SQLParser.INTERSECTION - 78)) | (1 << (SQLParser.MAX - 78)) | (1 << (SQLParser.MIN - 78)))) !== 0) || ((((_la - 114)) & ~0x1f) == 0 && ((1 << (_la - 114)) & ((1 << (SQLParser.STDDEV_POP - 114)) | (1 << (SQLParser.STDDEV_SAMP - 114)) | (1 << (SQLParser.SUM - 114)) | (1 << (SQLParser.VAR_SAMP - 114)) | (1 << (SQLParser.VAR_POP - 114)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Filter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_filter_clause;
    return this;
}

Filter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Filter_clauseContext.prototype.constructor = Filter_clauseContext;

Filter_clauseContext.prototype.FILTER = function() {
    return this.getToken(SQLParser.FILTER, 0);
};

Filter_clauseContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Filter_clauseContext.prototype.WHERE = function() {
    return this.getToken(SQLParser.WHERE, 0);
};

Filter_clauseContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Filter_clauseContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Filter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFilter_clause(this);
	}
};

Filter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFilter_clause(this);
	}
};

Filter_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitFilter_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Filter_clauseContext = Filter_clauseContext;

SQLParser.prototype.filter_clause = function() {

    var localctx = new Filter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SQLParser.RULE_filter_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.match(SQLParser.FILTER);
        this.state = 908;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 909;
        this.match(SQLParser.WHERE);
        this.state = 910;
        this.search_condition();
        this.state = 911;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_operationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_grouping_operation;
    return this;
}

Grouping_operationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_operationContext.prototype.constructor = Grouping_operationContext;

Grouping_operationContext.prototype.GROUPING = function() {
    return this.getToken(SQLParser.GROUPING, 0);
};

Grouping_operationContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Grouping_operationContext.prototype.column_reference_list = function() {
    return this.getTypedRuleContext(Column_reference_listContext,0);
};

Grouping_operationContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Grouping_operationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGrouping_operation(this);
	}
};

Grouping_operationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGrouping_operation(this);
	}
};

Grouping_operationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGrouping_operation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Grouping_operationContext = Grouping_operationContext;

SQLParser.prototype.grouping_operation = function() {

    var localctx = new Grouping_operationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SQLParser.RULE_grouping_operation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 913;
        this.match(SQLParser.GROUPING);
        this.state = 914;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 915;
        this.column_reference_list();
        this.state = 916;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_case_expression;
    return this;
}

Case_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_expressionContext.prototype.constructor = Case_expressionContext;

Case_expressionContext.prototype.case_specification = function() {
    return this.getTypedRuleContext(Case_specificationContext,0);
};

Case_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCase_expression(this);
	}
};

Case_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCase_expression(this);
	}
};

Case_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCase_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Case_expressionContext = Case_expressionContext;

SQLParser.prototype.case_expression = function() {

    var localctx = new Case_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SQLParser.RULE_case_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        this.case_specification();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_abbreviationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_case_abbreviation;
    return this;
}

Case_abbreviationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_abbreviationContext.prototype.constructor = Case_abbreviationContext;

Case_abbreviationContext.prototype.NULLIF = function() {
    return this.getToken(SQLParser.NULLIF, 0);
};

Case_abbreviationContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Case_abbreviationContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

Case_abbreviationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Case_abbreviationContext.prototype.boolean_value_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Boolean_value_expressionContext);
    } else {
        return this.getTypedRuleContext(Boolean_value_expressionContext,i);
    }
};

Case_abbreviationContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Case_abbreviationContext.prototype.COALESCE = function() {
    return this.getToken(SQLParser.COALESCE, 0);
};

Case_abbreviationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCase_abbreviation(this);
	}
};

Case_abbreviationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCase_abbreviation(this);
	}
};

Case_abbreviationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCase_abbreviation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Case_abbreviationContext = Case_abbreviationContext;

SQLParser.prototype.case_abbreviation = function() {

    var localctx = new Case_abbreviationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SQLParser.RULE_case_abbreviation);
    var _la = 0; // Token type
    try {
        this.state = 938;
        switch(this._input.LA(1)) {
        case SQLParser.NULLIF:
            this.enterOuterAlt(localctx, 1);
            this.state = 920;
            this.match(SQLParser.NULLIF);
            this.state = 921;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 922;
            this.numeric_value_expression();
            this.state = 923;
            this.match(SQLParser.COMMA);
            this.state = 924;
            this.boolean_value_expression();
            this.state = 925;
            this.match(SQLParser.RIGHT_PAREN);
            break;
        case SQLParser.COALESCE:
            this.enterOuterAlt(localctx, 2);
            this.state = 927;
            this.match(SQLParser.COALESCE);
            this.state = 928;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 929;
            this.numeric_value_expression();
            this.state = 932; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 930;
                this.match(SQLParser.COMMA);
                this.state = 931;
                this.boolean_value_expression();
                this.state = 934; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SQLParser.COMMA);
            this.state = 936;
            this.match(SQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_case_specification;
    return this;
}

Case_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_specificationContext.prototype.constructor = Case_specificationContext;

Case_specificationContext.prototype.simple_case = function() {
    return this.getTypedRuleContext(Simple_caseContext,0);
};

Case_specificationContext.prototype.searched_case = function() {
    return this.getTypedRuleContext(Searched_caseContext,0);
};

Case_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCase_specification(this);
	}
};

Case_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCase_specification(this);
	}
};

Case_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCase_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Case_specificationContext = Case_specificationContext;

SQLParser.prototype.case_specification = function() {

    var localctx = new Case_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SQLParser.RULE_case_specification);
    try {
        this.state = 942;
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 940;
            this.simple_case();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 941;
            this.searched_case();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_caseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_simple_case;
    return this;
}

Simple_caseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_caseContext.prototype.constructor = Simple_caseContext;

Simple_caseContext.prototype.CASE = function() {
    return this.getToken(SQLParser.CASE, 0);
};

Simple_caseContext.prototype.boolean_value_expression = function() {
    return this.getTypedRuleContext(Boolean_value_expressionContext,0);
};

Simple_caseContext.prototype.END = function() {
    return this.getToken(SQLParser.END, 0);
};

Simple_caseContext.prototype.simple_when_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_when_clauseContext);
    } else {
        return this.getTypedRuleContext(Simple_when_clauseContext,i);
    }
};

Simple_caseContext.prototype.else_clause = function() {
    return this.getTypedRuleContext(Else_clauseContext,0);
};

Simple_caseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSimple_case(this);
	}
};

Simple_caseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSimple_case(this);
	}
};

Simple_caseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSimple_case(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Simple_caseContext = Simple_caseContext;

SQLParser.prototype.simple_case = function() {

    var localctx = new Simple_caseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SQLParser.RULE_simple_case);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 944;
        this.match(SQLParser.CASE);
        this.state = 945;
        this.boolean_value_expression();
        this.state = 947; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 946;
            this.simple_when_clause();
            this.state = 949; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SQLParser.WHEN);
        this.state = 952;
        _la = this._input.LA(1);
        if(_la===SQLParser.ELSE) {
            this.state = 951;
            this.else_clause();
        }

        this.state = 954;
        this.match(SQLParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Searched_caseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_searched_case;
    return this;
}

Searched_caseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Searched_caseContext.prototype.constructor = Searched_caseContext;

Searched_caseContext.prototype.CASE = function() {
    return this.getToken(SQLParser.CASE, 0);
};

Searched_caseContext.prototype.END = function() {
    return this.getToken(SQLParser.END, 0);
};

Searched_caseContext.prototype.searched_when_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Searched_when_clauseContext);
    } else {
        return this.getTypedRuleContext(Searched_when_clauseContext,i);
    }
};

Searched_caseContext.prototype.else_clause = function() {
    return this.getTypedRuleContext(Else_clauseContext,0);
};

Searched_caseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSearched_case(this);
	}
};

Searched_caseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSearched_case(this);
	}
};

Searched_caseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSearched_case(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Searched_caseContext = Searched_caseContext;

SQLParser.prototype.searched_case = function() {

    var localctx = new Searched_caseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SQLParser.RULE_searched_case);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 956;
        this.match(SQLParser.CASE);
        this.state = 958; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 957;
            this.searched_when_clause();
            this.state = 960; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SQLParser.WHEN);
        this.state = 963;
        _la = this._input.LA(1);
        if(_la===SQLParser.ELSE) {
            this.state = 962;
            this.else_clause();
        }

        this.state = 965;
        this.match(SQLParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_when_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_simple_when_clause;
    return this;
}

Simple_when_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_when_clauseContext.prototype.constructor = Simple_when_clauseContext;

Simple_when_clauseContext.prototype.WHEN = function() {
    return this.getToken(SQLParser.WHEN, 0);
};

Simple_when_clauseContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Simple_when_clauseContext.prototype.THEN = function() {
    return this.getToken(SQLParser.THEN, 0);
};

Simple_when_clauseContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

Simple_when_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSimple_when_clause(this);
	}
};

Simple_when_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSimple_when_clause(this);
	}
};

Simple_when_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSimple_when_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Simple_when_clauseContext = Simple_when_clauseContext;

SQLParser.prototype.simple_when_clause = function() {

    var localctx = new Simple_when_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SQLParser.RULE_simple_when_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this.match(SQLParser.WHEN);
        this.state = 968;
        this.search_condition();
        this.state = 969;
        this.match(SQLParser.THEN);
        this.state = 970;
        this.result();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Searched_when_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_searched_when_clause;
    this.c = null; // Search_conditionContext
    this.r = null; // ResultContext
    return this;
}

Searched_when_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Searched_when_clauseContext.prototype.constructor = Searched_when_clauseContext;

Searched_when_clauseContext.prototype.WHEN = function() {
    return this.getToken(SQLParser.WHEN, 0);
};

Searched_when_clauseContext.prototype.THEN = function() {
    return this.getToken(SQLParser.THEN, 0);
};

Searched_when_clauseContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Searched_when_clauseContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

Searched_when_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSearched_when_clause(this);
	}
};

Searched_when_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSearched_when_clause(this);
	}
};

Searched_when_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSearched_when_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Searched_when_clauseContext = Searched_when_clauseContext;

SQLParser.prototype.searched_when_clause = function() {

    var localctx = new Searched_when_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SQLParser.RULE_searched_when_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 972;
        this.match(SQLParser.WHEN);
        this.state = 973;
        localctx.c = this.search_condition();
        this.state = 974;
        this.match(SQLParser.THEN);
        this.state = 975;
        localctx.r = this.result();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_else_clause;
    this.r = null; // ResultContext
    return this;
}

Else_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_clauseContext.prototype.constructor = Else_clauseContext;

Else_clauseContext.prototype.ELSE = function() {
    return this.getToken(SQLParser.ELSE, 0);
};

Else_clauseContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

Else_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterElse_clause(this);
	}
};

Else_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitElse_clause(this);
	}
};

Else_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitElse_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Else_clauseContext = Else_clauseContext;

SQLParser.prototype.else_clause = function() {

    var localctx = new Else_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SQLParser.RULE_else_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 977;
        this.match(SQLParser.ELSE);
        this.state = 978;
        localctx.r = this.result();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_result;
    return this;
}

ResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResultContext.prototype.constructor = ResultContext;

ResultContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

ResultContext.prototype.NULL = function() {
    return this.getToken(SQLParser.NULL, 0);
};

ResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterResult(this);
	}
};

ResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitResult(this);
	}
};

ResultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitResult(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.ResultContext = ResultContext;

SQLParser.prototype.result = function() {

    var localctx = new ResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SQLParser.RULE_result);
    try {
        this.state = 982;
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 980;
            this.value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 981;
            this.match(SQLParser.NULL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cast_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cast_specification;
    return this;
}

Cast_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cast_specificationContext.prototype.constructor = Cast_specificationContext;

Cast_specificationContext.prototype.CAST = function() {
    return this.getToken(SQLParser.CAST, 0);
};

Cast_specificationContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Cast_specificationContext.prototype.cast_operand = function() {
    return this.getTypedRuleContext(Cast_operandContext,0);
};

Cast_specificationContext.prototype.AS = function() {
    return this.getToken(SQLParser.AS, 0);
};

Cast_specificationContext.prototype.cast_target = function() {
    return this.getTypedRuleContext(Cast_targetContext,0);
};

Cast_specificationContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Cast_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCast_specification(this);
	}
};

Cast_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCast_specification(this);
	}
};

Cast_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCast_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Cast_specificationContext = Cast_specificationContext;

SQLParser.prototype.cast_specification = function() {

    var localctx = new Cast_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SQLParser.RULE_cast_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 984;
        this.match(SQLParser.CAST);
        this.state = 985;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 986;
        this.cast_operand();
        this.state = 987;
        this.match(SQLParser.AS);
        this.state = 988;
        this.cast_target();
        this.state = 989;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cast_operandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cast_operand;
    return this;
}

Cast_operandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cast_operandContext.prototype.constructor = Cast_operandContext;

Cast_operandContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

Cast_operandContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCast_operand(this);
	}
};

Cast_operandContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCast_operand(this);
	}
};

Cast_operandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCast_operand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Cast_operandContext = Cast_operandContext;

SQLParser.prototype.cast_operand = function() {

    var localctx = new Cast_operandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SQLParser.RULE_cast_operand);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 991;
        this.value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cast_targetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cast_target;
    return this;
}

Cast_targetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cast_targetContext.prototype.constructor = Cast_targetContext;

Cast_targetContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Cast_targetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCast_target(this);
	}
};

Cast_targetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCast_target(this);
	}
};

Cast_targetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCast_target(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Cast_targetContext = Cast_targetContext;

SQLParser.prototype.cast_target = function() {

    var localctx = new Cast_targetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SQLParser.RULE_cast_target);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 993;
        this.data_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_value_expression;
    return this;
}

Value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_expressionContext.prototype.constructor = Value_expressionContext;

Value_expressionContext.prototype.common_value_expression = function() {
    return this.getTypedRuleContext(Common_value_expressionContext,0);
};

Value_expressionContext.prototype.row_value_expression = function() {
    return this.getTypedRuleContext(Row_value_expressionContext,0);
};

Value_expressionContext.prototype.boolean_value_expression = function() {
    return this.getTypedRuleContext(Boolean_value_expressionContext,0);
};

Value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterValue_expression(this);
	}
};

Value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitValue_expression(this);
	}
};

Value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitValue_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Value_expressionContext = Value_expressionContext;

SQLParser.prototype.value_expression = function() {

    var localctx = new Value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SQLParser.RULE_value_expression);
    try {
        this.state = 998;
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 995;
            this.common_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 996;
            this.row_value_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 997;
            this.boolean_value_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Common_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_common_value_expression;
    return this;
}

Common_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Common_value_expressionContext.prototype.constructor = Common_value_expressionContext;

Common_value_expressionContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

Common_value_expressionContext.prototype.string_value_expression = function() {
    return this.getTypedRuleContext(String_value_expressionContext,0);
};

Common_value_expressionContext.prototype.NULL = function() {
    return this.getToken(SQLParser.NULL, 0);
};

Common_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCommon_value_expression(this);
	}
};

Common_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCommon_value_expression(this);
	}
};

Common_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCommon_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Common_value_expressionContext = Common_value_expressionContext;

SQLParser.prototype.common_value_expression = function() {

    var localctx = new Common_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SQLParser.RULE_common_value_expression);
    try {
        this.state = 1003;
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1000;
            this.numeric_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1001;
            this.string_value_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1002;
            this.match(SQLParser.NULL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_numeric_value_expression;
    this.left = null; // TermContext
    this.right = null; // TermContext
    return this;
}

Numeric_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_value_expressionContext.prototype.constructor = Numeric_value_expressionContext;

Numeric_value_expressionContext.prototype.term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermContext);
    } else {
        return this.getTypedRuleContext(TermContext,i);
    }
};

Numeric_value_expressionContext.prototype.PLUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.PLUS);
    } else {
        return this.getToken(SQLParser.PLUS, i);
    }
};


Numeric_value_expressionContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.MINUS);
    } else {
        return this.getToken(SQLParser.MINUS, i);
    }
};


Numeric_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNumeric_value_expression(this);
	}
};

Numeric_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNumeric_value_expression(this);
	}
};

Numeric_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNumeric_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Numeric_value_expressionContext = Numeric_value_expressionContext;

SQLParser.prototype.numeric_value_expression = function() {

    var localctx = new Numeric_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SQLParser.RULE_numeric_value_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1005;
        localctx.left = this.term();
        this.state = 1010;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.PLUS || _la===SQLParser.MINUS) {
            this.state = 1006;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.PLUS || _la===SQLParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1007;
            localctx.right = this.term();
            this.state = 1012;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_term;
    this.left = null; // FactorContext
    this.right = null; // FactorContext
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.factor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FactorContext);
    } else {
        return this.getTypedRuleContext(FactorContext,i);
    }
};

TermContext.prototype.MULTIPLY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.MULTIPLY);
    } else {
        return this.getToken(SQLParser.MULTIPLY, i);
    }
};


TermContext.prototype.DIVIDE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.DIVIDE);
    } else {
        return this.getToken(SQLParser.DIVIDE, i);
    }
};


TermContext.prototype.MODULAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.MODULAR);
    } else {
        return this.getToken(SQLParser.MODULAR, i);
    }
};


TermContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTerm(this);
	}
};

TermContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTerm(this);
	}
};

TermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.TermContext = TermContext;

SQLParser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SQLParser.RULE_term);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1013;
        localctx.left = this.factor();
        this.state = 1018;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 188)) & ~0x1f) == 0 && ((1 << (_la - 188)) & ((1 << (SQLParser.MULTIPLY - 188)) | (1 << (SQLParser.DIVIDE - 188)) | (1 << (SQLParser.MODULAR - 188)))) !== 0)) {
            this.state = 1014;
            _la = this._input.LA(1);
            if(!(((((_la - 188)) & ~0x1f) == 0 && ((1 << (_la - 188)) & ((1 << (SQLParser.MULTIPLY - 188)) | (1 << (SQLParser.DIVIDE - 188)) | (1 << (SQLParser.MODULAR - 188)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1015;
            localctx.right = this.factor();
            this.state = 1020;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_factor;
    return this;
}

FactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FactorContext.prototype.constructor = FactorContext;

FactorContext.prototype.numeric_primary = function() {
    return this.getTypedRuleContext(Numeric_primaryContext,0);
};

FactorContext.prototype.sign = function() {
    return this.getTypedRuleContext(SignContext,0);
};

FactorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFactor(this);
	}
};

FactorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFactor(this);
	}
};

FactorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitFactor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.FactorContext = FactorContext;

SQLParser.prototype.factor = function() {

    var localctx = new FactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SQLParser.RULE_factor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1022;
        _la = this._input.LA(1);
        if(_la===SQLParser.PLUS || _la===SQLParser.MINUS) {
            this.state = 1021;
            this.sign();
        }

        this.state = 1024;
        this.numeric_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_array;
    return this;
}

ArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayContext.prototype.constructor = ArrayContext;

ArrayContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

ArrayContext.prototype.numeric_value_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Numeric_value_expressionContext);
    } else {
        return this.getTypedRuleContext(Numeric_value_expressionContext,i);
    }
};

ArrayContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

ArrayContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


ArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterArray(this);
	}
};

ArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitArray(this);
	}
};

ArrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitArray(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.ArrayContext = ArrayContext;

SQLParser.prototype.array = function() {

    var localctx = new ArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SQLParser.RULE_array);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1026;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1027;
        this.numeric_value_expression();
        this.state = 1032;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1028;
            this.match(SQLParser.COMMA);
            this.state = 1029;
            this.numeric_value_expression();
            this.state = 1034;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1035;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_numeric_primary;
    return this;
}

Numeric_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_primaryContext.prototype.constructor = Numeric_primaryContext;

Numeric_primaryContext.prototype.value_expression_primary = function() {
    return this.getTypedRuleContext(Value_expression_primaryContext,0);
};

Numeric_primaryContext.prototype.CAST_EXPRESSION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.CAST_EXPRESSION);
    } else {
        return this.getToken(SQLParser.CAST_EXPRESSION, i);
    }
};


Numeric_primaryContext.prototype.cast_target = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cast_targetContext);
    } else {
        return this.getTypedRuleContext(Cast_targetContext,i);
    }
};

Numeric_primaryContext.prototype.numeric_value_function = function() {
    return this.getTypedRuleContext(Numeric_value_functionContext,0);
};

Numeric_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNumeric_primary(this);
	}
};

Numeric_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNumeric_primary(this);
	}
};

Numeric_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNumeric_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Numeric_primaryContext = Numeric_primaryContext;

SQLParser.prototype.numeric_primary = function() {

    var localctx = new Numeric_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SQLParser.RULE_numeric_primary);
    var _la = 0; // Token type
    try {
        this.state = 1046;
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1037;
            this.value_expression_primary();
            this.state = 1042;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.CAST_EXPRESSION) {
                this.state = 1038;
                this.match(SQLParser.CAST_EXPRESSION);
                this.state = 1039;
                this.cast_target();
                this.state = 1044;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1045;
            this.numeric_value_function();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sign;
    return this;
}

SignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignContext.prototype.constructor = SignContext;

SignContext.prototype.PLUS = function() {
    return this.getToken(SQLParser.PLUS, 0);
};

SignContext.prototype.MINUS = function() {
    return this.getToken(SQLParser.MINUS, 0);
};

SignContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSign(this);
	}
};

SignContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSign(this);
	}
};

SignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.SignContext = SignContext;

SQLParser.prototype.sign = function() {

    var localctx = new SignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SQLParser.RULE_sign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1048;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.PLUS || _la===SQLParser.MINUS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_value_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_numeric_value_function;
    return this;
}

Numeric_value_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_value_functionContext.prototype.constructor = Numeric_value_functionContext;

Numeric_value_functionContext.prototype.extract_expression = function() {
    return this.getTypedRuleContext(Extract_expressionContext,0);
};

Numeric_value_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNumeric_value_function(this);
	}
};

Numeric_value_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNumeric_value_function(this);
	}
};

Numeric_value_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNumeric_value_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Numeric_value_functionContext = Numeric_value_functionContext;

SQLParser.prototype.numeric_value_function = function() {

    var localctx = new Numeric_value_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SQLParser.RULE_numeric_value_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1050;
        this.extract_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extract_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_extract_expression;
    this.extract_field_string = null; // Extract_fieldContext
    return this;
}

Extract_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extract_expressionContext.prototype.constructor = Extract_expressionContext;

Extract_expressionContext.prototype.EXTRACT = function() {
    return this.getToken(SQLParser.EXTRACT, 0);
};

Extract_expressionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Extract_expressionContext.prototype.FROM = function() {
    return this.getToken(SQLParser.FROM, 0);
};

Extract_expressionContext.prototype.extract_source = function() {
    return this.getTypedRuleContext(Extract_sourceContext,0);
};

Extract_expressionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Extract_expressionContext.prototype.extract_field = function() {
    return this.getTypedRuleContext(Extract_fieldContext,0);
};

Extract_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExtract_expression(this);
	}
};

Extract_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExtract_expression(this);
	}
};

Extract_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExtract_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Extract_expressionContext = Extract_expressionContext;

SQLParser.prototype.extract_expression = function() {

    var localctx = new Extract_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SQLParser.RULE_extract_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1052;
        this.match(SQLParser.EXTRACT);
        this.state = 1053;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1054;
        localctx.extract_field_string = this.extract_field();
        this.state = 1055;
        this.match(SQLParser.FROM);
        this.state = 1056;
        this.extract_source();
        this.state = 1057;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extract_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_extract_field;
    return this;
}

Extract_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extract_fieldContext.prototype.constructor = Extract_fieldContext;

Extract_fieldContext.prototype.primary_datetime_field = function() {
    return this.getTypedRuleContext(Primary_datetime_fieldContext,0);
};

Extract_fieldContext.prototype.time_zone_field = function() {
    return this.getTypedRuleContext(Time_zone_fieldContext,0);
};

Extract_fieldContext.prototype.extended_datetime_field = function() {
    return this.getTypedRuleContext(Extended_datetime_fieldContext,0);
};

Extract_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExtract_field(this);
	}
};

Extract_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExtract_field(this);
	}
};

Extract_fieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExtract_field(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Extract_fieldContext = Extract_fieldContext;

SQLParser.prototype.extract_field = function() {

    var localctx = new Extract_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SQLParser.RULE_extract_field);
    try {
        this.state = 1062;
        switch(this._input.LA(1)) {
        case SQLParser.DAY:
        case SQLParser.HOUR:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.SECOND:
        case SQLParser.YEAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 1059;
            this.primary_datetime_field();
            break;
        case SQLParser.TIMEZONE:
        case SQLParser.TIMEZONE_HOUR:
        case SQLParser.TIMEZONE_MINUTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1060;
            this.time_zone_field();
            break;
        case SQLParser.CENTURY:
        case SQLParser.DECADE:
        case SQLParser.DOW:
        case SQLParser.DOY:
        case SQLParser.EPOCH:
        case SQLParser.ISODOW:
        case SQLParser.ISOYEAR:
        case SQLParser.MICROSECONDS:
        case SQLParser.MILLENNIUM:
        case SQLParser.MILLISECONDS:
        case SQLParser.QUARTER:
        case SQLParser.WEEK:
            this.enterOuterAlt(localctx, 3);
            this.state = 1061;
            this.extended_datetime_field();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Time_zone_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_time_zone_field;
    return this;
}

Time_zone_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Time_zone_fieldContext.prototype.constructor = Time_zone_fieldContext;

Time_zone_fieldContext.prototype.TIMEZONE = function() {
    return this.getToken(SQLParser.TIMEZONE, 0);
};

Time_zone_fieldContext.prototype.TIMEZONE_HOUR = function() {
    return this.getToken(SQLParser.TIMEZONE_HOUR, 0);
};

Time_zone_fieldContext.prototype.TIMEZONE_MINUTE = function() {
    return this.getToken(SQLParser.TIMEZONE_MINUTE, 0);
};

Time_zone_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTime_zone_field(this);
	}
};

Time_zone_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTime_zone_field(this);
	}
};

Time_zone_fieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTime_zone_field(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Time_zone_fieldContext = Time_zone_fieldContext;

SQLParser.prototype.time_zone_field = function() {

    var localctx = new Time_zone_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SQLParser.RULE_time_zone_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1064;
        _la = this._input.LA(1);
        if(!(((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (SQLParser.TIMEZONE - 120)) | (1 << (SQLParser.TIMEZONE_HOUR - 120)) | (1 << (SQLParser.TIMEZONE_MINUTE - 120)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extract_sourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_extract_source;
    return this;
}

Extract_sourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extract_sourceContext.prototype.constructor = Extract_sourceContext;

Extract_sourceContext.prototype.column_reference = function() {
    return this.getTypedRuleContext(Column_referenceContext,0);
};

Extract_sourceContext.prototype.datetime_literal = function() {
    return this.getTypedRuleContext(Datetime_literalContext,0);
};

Extract_sourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExtract_source(this);
	}
};

Extract_sourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExtract_source(this);
	}
};

Extract_sourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExtract_source(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Extract_sourceContext = Extract_sourceContext;

SQLParser.prototype.extract_source = function() {

    var localctx = new Extract_sourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, SQLParser.RULE_extract_source);
    try {
        this.state = 1068;
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1066;
            this.column_reference();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1067;
            this.datetime_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function String_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_string_value_expression;
    return this;
}

String_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_value_expressionContext.prototype.constructor = String_value_expressionContext;

String_value_expressionContext.prototype.character_value_expression = function() {
    return this.getTypedRuleContext(Character_value_expressionContext,0);
};

String_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterString_value_expression(this);
	}
};

String_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitString_value_expression(this);
	}
};

String_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitString_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.String_value_expressionContext = String_value_expressionContext;

SQLParser.prototype.string_value_expression = function() {

    var localctx = new String_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, SQLParser.RULE_string_value_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1070;
        this.character_value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Character_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_character_value_expression;
    return this;
}

Character_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Character_value_expressionContext.prototype.constructor = Character_value_expressionContext;

Character_value_expressionContext.prototype.character_factor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Character_factorContext);
    } else {
        return this.getTypedRuleContext(Character_factorContext,i);
    }
};

Character_value_expressionContext.prototype.CONCATENATION_OPERATOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.CONCATENATION_OPERATOR);
    } else {
        return this.getToken(SQLParser.CONCATENATION_OPERATOR, i);
    }
};


Character_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCharacter_value_expression(this);
	}
};

Character_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCharacter_value_expression(this);
	}
};

Character_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCharacter_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Character_value_expressionContext = Character_value_expressionContext;

SQLParser.prototype.character_value_expression = function() {

    var localctx = new Character_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, SQLParser.RULE_character_value_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1072;
        this.character_factor();
        this.state = 1077;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.CONCATENATION_OPERATOR) {
            this.state = 1073;
            this.match(SQLParser.CONCATENATION_OPERATOR);
            this.state = 1074;
            this.character_factor();
            this.state = 1079;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Character_factorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_character_factor;
    return this;
}

Character_factorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Character_factorContext.prototype.constructor = Character_factorContext;

Character_factorContext.prototype.character_primary = function() {
    return this.getTypedRuleContext(Character_primaryContext,0);
};

Character_factorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCharacter_factor(this);
	}
};

Character_factorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCharacter_factor(this);
	}
};

Character_factorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCharacter_factor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Character_factorContext = Character_factorContext;

SQLParser.prototype.character_factor = function() {

    var localctx = new Character_factorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, SQLParser.RULE_character_factor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1080;
        this.character_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Character_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_character_primary;
    return this;
}

Character_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Character_primaryContext.prototype.constructor = Character_primaryContext;

Character_primaryContext.prototype.value_expression_primary = function() {
    return this.getTypedRuleContext(Value_expression_primaryContext,0);
};

Character_primaryContext.prototype.string_value_function = function() {
    return this.getTypedRuleContext(String_value_functionContext,0);
};

Character_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCharacter_primary(this);
	}
};

Character_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCharacter_primary(this);
	}
};

Character_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCharacter_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Character_primaryContext = Character_primaryContext;

SQLParser.prototype.character_primary = function() {

    var localctx = new Character_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, SQLParser.RULE_character_primary);
    try {
        this.state = 1084;
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1082;
            this.value_expression_primary();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1083;
            this.string_value_function();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function String_value_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_string_value_function;
    return this;
}

String_value_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_value_functionContext.prototype.constructor = String_value_functionContext;

String_value_functionContext.prototype.trim_function = function() {
    return this.getTypedRuleContext(Trim_functionContext,0);
};

String_value_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterString_value_function(this);
	}
};

String_value_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitString_value_function(this);
	}
};

String_value_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitString_value_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.String_value_functionContext = String_value_functionContext;

SQLParser.prototype.string_value_function = function() {

    var localctx = new String_value_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, SQLParser.RULE_string_value_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1086;
        this.trim_function();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trim_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_trim_function;
    return this;
}

Trim_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trim_functionContext.prototype.constructor = Trim_functionContext;

Trim_functionContext.prototype.TRIM = function() {
    return this.getToken(SQLParser.TRIM, 0);
};

Trim_functionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Trim_functionContext.prototype.trim_operands = function() {
    return this.getTypedRuleContext(Trim_operandsContext,0);
};

Trim_functionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Trim_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTrim_function(this);
	}
};

Trim_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTrim_function(this);
	}
};

Trim_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTrim_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Trim_functionContext = Trim_functionContext;

SQLParser.prototype.trim_function = function() {

    var localctx = new Trim_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, SQLParser.RULE_trim_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1088;
        this.match(SQLParser.TRIM);
        this.state = 1089;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1090;
        this.trim_operands();
        this.state = 1091;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trim_operandsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_trim_operands;
    this.trim_character = null; // Character_value_expressionContext
    this.trim_source = null; // Character_value_expressionContext
    return this;
}

Trim_operandsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trim_operandsContext.prototype.constructor = Trim_operandsContext;

Trim_operandsContext.prototype.character_value_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Character_value_expressionContext);
    } else {
        return this.getTypedRuleContext(Character_value_expressionContext,i);
    }
};

Trim_operandsContext.prototype.FROM = function() {
    return this.getToken(SQLParser.FROM, 0);
};

Trim_operandsContext.prototype.trim_specification = function() {
    return this.getTypedRuleContext(Trim_specificationContext,0);
};

Trim_operandsContext.prototype.COMMA = function() {
    return this.getToken(SQLParser.COMMA, 0);
};

Trim_operandsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTrim_operands(this);
	}
};

Trim_operandsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTrim_operands(this);
	}
};

Trim_operandsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTrim_operands(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Trim_operandsContext = Trim_operandsContext;

SQLParser.prototype.trim_operands = function() {

    var localctx = new Trim_operandsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, SQLParser.RULE_trim_operands);
    var _la = 0; // Token type
    try {
        this.state = 1107;
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1100;
            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
            if(la_===1) {
                this.state = 1094;
                _la = this._input.LA(1);
                if(_la===SQLParser.BOTH || _la===SQLParser.LEADING || _la===SQLParser.TRAILING) {
                    this.state = 1093;
                    this.trim_specification();
                }

                this.state = 1097;
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.ANY) | (1 << SQLParser.CASE) | (1 << SQLParser.CAST) | (1 << SQLParser.FALSE) | (1 << SQLParser.LEFT))) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (SQLParser.RIGHT - 40)) | (1 << (SQLParser.SOME - 40)) | (1 << (SQLParser.TRUE - 40)) | (1 << (SQLParser.AVG - 40)) | (1 << (SQLParser.BETWEEN - 40)) | (1 << (SQLParser.BY - 40)) | (1 << (SQLParser.CENTURY - 40)) | (1 << (SQLParser.CHARACTER - 40)) | (1 << (SQLParser.COLLECT - 40)) | (1 << (SQLParser.COALESCE - 40)) | (1 << (SQLParser.COLUMN - 40)) | (1 << (SQLParser.COUNT - 40)) | (1 << (SQLParser.CUBE - 40)) | (1 << (SQLParser.DAY - 40)) | (1 << (SQLParser.DEC - 40)) | (1 << (SQLParser.DECADE - 40)) | (1 << (SQLParser.DOW - 40)) | (1 << (SQLParser.DOY - 40)) | (1 << (SQLParser.DROP - 40)) | (1 << (SQLParser.EPOCH - 40)) | (1 << (SQLParser.EVERY - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (SQLParser.EXISTS - 72)) | (1 << (SQLParser.EXTERNAL - 72)) | (1 << (SQLParser.EXTRACT - 72)) | (1 << (SQLParser.FILTER - 72)) | (1 << (SQLParser.FIRST - 72)) | (1 << (SQLParser.FORMAT - 72)) | (1 << (SQLParser.FUSION - 72)) | (1 << (SQLParser.GROUPING - 72)) | (1 << (SQLParser.HASH - 72)) | (1 << (SQLParser.INDEX - 72)) | (1 << (SQLParser.INSERT - 72)) | (1 << (SQLParser.INTERSECTION - 72)) | (1 << (SQLParser.ISODOW - 72)) | (1 << (SQLParser.ISOYEAR - 72)) | (1 << (SQLParser.LAST - 72)) | (1 << (SQLParser.LESS - 72)) | (1 << (SQLParser.LIST - 72)) | (1 << (SQLParser.LOCATION - 72)) | (1 << (SQLParser.MAX - 72)) | (1 << (SQLParser.MAXVALUE - 72)) | (1 << (SQLParser.MICROSECONDS - 72)) | (1 << (SQLParser.MILLENNIUM - 72)) | (1 << (SQLParser.MILLISECONDS - 72)) | (1 << (SQLParser.MIN - 72)) | (1 << (SQLParser.MINUTE - 72)) | (1 << (SQLParser.MONTH - 72)) | (1 << (SQLParser.NATIONAL - 72)) | (1 << (SQLParser.NULLIF - 72)) | (1 << (SQLParser.OVERWRITE - 72)) | (1 << (SQLParser.PARTITION - 72)) | (1 << (SQLParser.PARTITIONS - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (SQLParser.PRECISION - 104)) | (1 << (SQLParser.PURGE - 104)) | (1 << (SQLParser.QUARTER - 104)) | (1 << (SQLParser.RANGE - 104)) | (1 << (SQLParser.REGEXP - 104)) | (1 << (SQLParser.RLIKE - 104)) | (1 << (SQLParser.ROLLUP - 104)) | (1 << (SQLParser.SECOND - 104)) | (1 << (SQLParser.SET - 104)) | (1 << (SQLParser.SIMILAR - 104)) | (1 << (SQLParser.STDDEV_POP - 104)) | (1 << (SQLParser.STDDEV_SAMP - 104)) | (1 << (SQLParser.SUBPARTITION - 104)) | (1 << (SQLParser.SUM - 104)) | (1 << (SQLParser.TABLESPACE - 104)) | (1 << (SQLParser.THAN - 104)) | (1 << (SQLParser.TIMEZONE - 104)) | (1 << (SQLParser.TIMEZONE_HOUR - 104)) | (1 << (SQLParser.TIMEZONE_MINUTE - 104)) | (1 << (SQLParser.TRIM - 104)) | (1 << (SQLParser.TO - 104)) | (1 << (SQLParser.UNKNOWN - 104)) | (1 << (SQLParser.VALUES - 104)) | (1 << (SQLParser.VAR_SAMP - 104)) | (1 << (SQLParser.VAR_POP - 104)) | (1 << (SQLParser.VARYING - 104)) | (1 << (SQLParser.WEEK - 104)) | (1 << (SQLParser.YEAR - 104)) | (1 << (SQLParser.ZONE - 104)) | (1 << (SQLParser.BOOLEAN - 104)) | (1 << (SQLParser.BOOL - 104)) | (1 << (SQLParser.BIT - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (SQLParser.VARBIT - 136)) | (1 << (SQLParser.INT1 - 136)) | (1 << (SQLParser.INT2 - 136)) | (1 << (SQLParser.INT4 - 136)) | (1 << (SQLParser.INT8 - 136)) | (1 << (SQLParser.TINYINT - 136)) | (1 << (SQLParser.SMALLINT - 136)) | (1 << (SQLParser.INT - 136)) | (1 << (SQLParser.INTEGER - 136)) | (1 << (SQLParser.BIGINT - 136)) | (1 << (SQLParser.FLOAT4 - 136)) | (1 << (SQLParser.FLOAT8 - 136)) | (1 << (SQLParser.REAL - 136)) | (1 << (SQLParser.FLOAT - 136)) | (1 << (SQLParser.DOUBLE - 136)) | (1 << (SQLParser.NUMERIC - 136)) | (1 << (SQLParser.DECIMAL - 136)) | (1 << (SQLParser.CHAR - 136)) | (1 << (SQLParser.VARCHAR - 136)) | (1 << (SQLParser.NCHAR - 136)) | (1 << (SQLParser.NVARCHAR - 136)) | (1 << (SQLParser.DATE - 136)) | (1 << (SQLParser.TIME - 136)) | (1 << (SQLParser.TIMETZ - 136)) | (1 << (SQLParser.TIMESTAMP - 136)) | (1 << (SQLParser.TIMESTAMPTZ - 136)) | (1 << (SQLParser.TEXT - 136)) | (1 << (SQLParser.VARBINARY - 136)) | (1 << (SQLParser.BLOB - 136)) | (1 << (SQLParser.BYTEA - 136)) | (1 << (SQLParser.INET4 - 136)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (SQLParser.LEFT_PAREN - 184)) | (1 << (SQLParser.NUMBER - 184)) | (1 << (SQLParser.REAL_NUMBER - 184)) | (1 << (SQLParser.Identifier - 184)) | (1 << (SQLParser.Character_String_Literal - 184)))) !== 0)) {
                    this.state = 1096;
                    localctx.trim_character = this.character_value_expression();
                }

                this.state = 1099;
                this.match(SQLParser.FROM);

            }
            this.state = 1102;
            localctx.trim_source = this.character_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1103;
            localctx.trim_source = this.character_value_expression();
            this.state = 1104;
            this.match(SQLParser.COMMA);
            this.state = 1105;
            localctx.trim_character = this.character_value_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trim_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_trim_specification;
    return this;
}

Trim_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trim_specificationContext.prototype.constructor = Trim_specificationContext;

Trim_specificationContext.prototype.LEADING = function() {
    return this.getToken(SQLParser.LEADING, 0);
};

Trim_specificationContext.prototype.TRAILING = function() {
    return this.getToken(SQLParser.TRAILING, 0);
};

Trim_specificationContext.prototype.BOTH = function() {
    return this.getToken(SQLParser.BOTH, 0);
};

Trim_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTrim_specification(this);
	}
};

Trim_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTrim_specification(this);
	}
};

Trim_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTrim_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Trim_specificationContext = Trim_specificationContext;

SQLParser.prototype.trim_specification = function() {

    var localctx = new Trim_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, SQLParser.RULE_trim_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1109;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.BOTH || _la===SQLParser.LEADING || _la===SQLParser.TRAILING)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_value_expression;
    return this;
}

Boolean_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_value_expressionContext.prototype.constructor = Boolean_value_expressionContext;

Boolean_value_expressionContext.prototype.or_predicate = function() {
    return this.getTypedRuleContext(Or_predicateContext,0);
};

Boolean_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_value_expression(this);
	}
};

Boolean_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_value_expression(this);
	}
};

Boolean_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_value_expressionContext = Boolean_value_expressionContext;

SQLParser.prototype.boolean_value_expression = function() {

    var localctx = new Boolean_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, SQLParser.RULE_boolean_value_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1111;
        this.or_predicate();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Or_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_or_predicate;
    return this;
}

Or_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Or_predicateContext.prototype.constructor = Or_predicateContext;

Or_predicateContext.prototype.and_predicate = function() {
    return this.getTypedRuleContext(And_predicateContext,0);
};

Or_predicateContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.OR);
    } else {
        return this.getToken(SQLParser.OR, i);
    }
};


Or_predicateContext.prototype.or_predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Or_predicateContext);
    } else {
        return this.getTypedRuleContext(Or_predicateContext,i);
    }
};

Or_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOr_predicate(this);
	}
};

Or_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOr_predicate(this);
	}
};

Or_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOr_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Or_predicateContext = Or_predicateContext;

SQLParser.prototype.or_predicate = function() {

    var localctx = new Or_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, SQLParser.RULE_or_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1113;
        this.and_predicate();
        this.state = 1118;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1114;
                this.match(SQLParser.OR);
                this.state = 1115;
                this.or_predicate(); 
            }
            this.state = 1120;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function And_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_and_predicate;
    return this;
}

And_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_predicateContext.prototype.constructor = And_predicateContext;

And_predicateContext.prototype.boolean_factor = function() {
    return this.getTypedRuleContext(Boolean_factorContext,0);
};

And_predicateContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.AND);
    } else {
        return this.getToken(SQLParser.AND, i);
    }
};


And_predicateContext.prototype.and_predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(And_predicateContext);
    } else {
        return this.getTypedRuleContext(And_predicateContext,i);
    }
};

And_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterAnd_predicate(this);
	}
};

And_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitAnd_predicate(this);
	}
};

And_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitAnd_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.And_predicateContext = And_predicateContext;

SQLParser.prototype.and_predicate = function() {

    var localctx = new And_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, SQLParser.RULE_and_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1121;
        this.boolean_factor();
        this.state = 1126;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,98,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1122;
                this.match(SQLParser.AND);
                this.state = 1123;
                this.and_predicate(); 
            }
            this.state = 1128;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,98,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_factorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_factor;
    return this;
}

Boolean_factorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_factorContext.prototype.constructor = Boolean_factorContext;

Boolean_factorContext.prototype.boolean_test = function() {
    return this.getTypedRuleContext(Boolean_testContext,0);
};

Boolean_factorContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Boolean_factorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_factor(this);
	}
};

Boolean_factorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_factor(this);
	}
};

Boolean_factorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_factor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_factorContext = Boolean_factorContext;

SQLParser.prototype.boolean_factor = function() {

    var localctx = new Boolean_factorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, SQLParser.RULE_boolean_factor);
    try {
        this.state = 1132;
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1129;
            this.boolean_test();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1130;
            this.match(SQLParser.NOT);
            this.state = 1131;
            this.boolean_test();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_test;
    return this;
}

Boolean_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_testContext.prototype.constructor = Boolean_testContext;

Boolean_testContext.prototype.boolean_primary = function() {
    return this.getTypedRuleContext(Boolean_primaryContext,0);
};

Boolean_testContext.prototype.is_clause = function() {
    return this.getTypedRuleContext(Is_clauseContext,0);
};

Boolean_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_test(this);
	}
};

Boolean_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_test(this);
	}
};

Boolean_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_testContext = Boolean_testContext;

SQLParser.prototype.boolean_test = function() {

    var localctx = new Boolean_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, SQLParser.RULE_boolean_test);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1134;
        this.boolean_primary();
        this.state = 1136;
        _la = this._input.LA(1);
        if(_la===SQLParser.IS) {
            this.state = 1135;
            this.is_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Is_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_is_clause;
    this.t = null; // Truth_valueContext
    return this;
}

Is_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Is_clauseContext.prototype.constructor = Is_clauseContext;

Is_clauseContext.prototype.IS = function() {
    return this.getToken(SQLParser.IS, 0);
};

Is_clauseContext.prototype.truth_value = function() {
    return this.getTypedRuleContext(Truth_valueContext,0);
};

Is_clauseContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Is_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIs_clause(this);
	}
};

Is_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIs_clause(this);
	}
};

Is_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIs_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Is_clauseContext = Is_clauseContext;

SQLParser.prototype.is_clause = function() {

    var localctx = new Is_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, SQLParser.RULE_is_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1138;
        this.match(SQLParser.IS);
        this.state = 1140;
        _la = this._input.LA(1);
        if(_la===SQLParser.NOT) {
            this.state = 1139;
            this.match(SQLParser.NOT);
        }

        this.state = 1142;
        localctx.t = this.truth_value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Truth_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_truth_value;
    return this;
}

Truth_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Truth_valueContext.prototype.constructor = Truth_valueContext;

Truth_valueContext.prototype.TRUE = function() {
    return this.getToken(SQLParser.TRUE, 0);
};

Truth_valueContext.prototype.FALSE = function() {
    return this.getToken(SQLParser.FALSE, 0);
};

Truth_valueContext.prototype.UNKNOWN = function() {
    return this.getToken(SQLParser.UNKNOWN, 0);
};

Truth_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTruth_value(this);
	}
};

Truth_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTruth_value(this);
	}
};

Truth_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTruth_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Truth_valueContext = Truth_valueContext;

SQLParser.prototype.truth_value = function() {

    var localctx = new Truth_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, SQLParser.RULE_truth_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1144;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.FALSE || _la===SQLParser.TRUE || _la===SQLParser.UNKNOWN)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_primary;
    return this;
}

Boolean_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_primaryContext.prototype.constructor = Boolean_primaryContext;

Boolean_primaryContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

Boolean_primaryContext.prototype.boolean_predicand = function() {
    return this.getTypedRuleContext(Boolean_predicandContext,0);
};

Boolean_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_primary(this);
	}
};

Boolean_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_primary(this);
	}
};

Boolean_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_primaryContext = Boolean_primaryContext;

SQLParser.prototype.boolean_primary = function() {

    var localctx = new Boolean_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, SQLParser.RULE_boolean_primary);
    try {
        this.state = 1148;
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1146;
            this.predicate();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1147;
            this.boolean_predicand();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_predicandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_boolean_predicand;
    return this;
}

Boolean_predicandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_predicandContext.prototype.constructor = Boolean_predicandContext;

Boolean_predicandContext.prototype.parenthesized_boolean_value_expression = function() {
    return this.getTypedRuleContext(Parenthesized_boolean_value_expressionContext,0);
};

Boolean_predicandContext.prototype.nonparenthesized_value_expression_primary = function() {
    return this.getTypedRuleContext(Nonparenthesized_value_expression_primaryContext,0);
};

Boolean_predicandContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBoolean_predicand(this);
	}
};

Boolean_predicandContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBoolean_predicand(this);
	}
};

Boolean_predicandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBoolean_predicand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Boolean_predicandContext = Boolean_predicandContext;

SQLParser.prototype.boolean_predicand = function() {

    var localctx = new Boolean_predicandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, SQLParser.RULE_boolean_predicand);
    try {
        this.state = 1152;
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1150;
            this.parenthesized_boolean_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1151;
            this.nonparenthesized_value_expression_primary();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parenthesized_boolean_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_parenthesized_boolean_value_expression;
    return this;
}

Parenthesized_boolean_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesized_boolean_value_expressionContext.prototype.constructor = Parenthesized_boolean_value_expressionContext;

Parenthesized_boolean_value_expressionContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Parenthesized_boolean_value_expressionContext.prototype.boolean_value_expression = function() {
    return this.getTypedRuleContext(Boolean_value_expressionContext,0);
};

Parenthesized_boolean_value_expressionContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Parenthesized_boolean_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterParenthesized_boolean_value_expression(this);
	}
};

Parenthesized_boolean_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitParenthesized_boolean_value_expression(this);
	}
};

Parenthesized_boolean_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitParenthesized_boolean_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Parenthesized_boolean_value_expressionContext = Parenthesized_boolean_value_expressionContext;

SQLParser.prototype.parenthesized_boolean_value_expression = function() {

    var localctx = new Parenthesized_boolean_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, SQLParser.RULE_parenthesized_boolean_value_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1154;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1155;
        this.boolean_value_expression();
        this.state = 1156;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_value_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_value_expression;
    return this;
}

Row_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_value_expressionContext.prototype.constructor = Row_value_expressionContext;

Row_value_expressionContext.prototype.row_value_special_case = function() {
    return this.getTypedRuleContext(Row_value_special_caseContext,0);
};

Row_value_expressionContext.prototype.explicit_row_value_constructor = function() {
    return this.getTypedRuleContext(Explicit_row_value_constructorContext,0);
};

Row_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_value_expression(this);
	}
};

Row_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_value_expression(this);
	}
};

Row_value_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_value_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_value_expressionContext = Row_value_expressionContext;

SQLParser.prototype.row_value_expression = function() {

    var localctx = new Row_value_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, SQLParser.RULE_row_value_expression);
    try {
        this.state = 1160;
        switch(this._input.LA(1)) {
        case SQLParser.ANY:
        case SQLParser.CASE:
        case SQLParser.CAST:
        case SQLParser.FALSE:
        case SQLParser.LEFT:
        case SQLParser.RIGHT:
        case SQLParser.SOME:
        case SQLParser.TRUE:
        case SQLParser.AVG:
        case SQLParser.BETWEEN:
        case SQLParser.BY:
        case SQLParser.CENTURY:
        case SQLParser.CHARACTER:
        case SQLParser.COLLECT:
        case SQLParser.COALESCE:
        case SQLParser.COLUMN:
        case SQLParser.COUNT:
        case SQLParser.CUBE:
        case SQLParser.DAY:
        case SQLParser.DEC:
        case SQLParser.DECADE:
        case SQLParser.DOW:
        case SQLParser.DOY:
        case SQLParser.DROP:
        case SQLParser.EPOCH:
        case SQLParser.EVERY:
        case SQLParser.EXISTS:
        case SQLParser.EXTERNAL:
        case SQLParser.EXTRACT:
        case SQLParser.FILTER:
        case SQLParser.FIRST:
        case SQLParser.FORMAT:
        case SQLParser.FUSION:
        case SQLParser.GROUPING:
        case SQLParser.HASH:
        case SQLParser.INDEX:
        case SQLParser.INSERT:
        case SQLParser.INTERSECTION:
        case SQLParser.ISODOW:
        case SQLParser.ISOYEAR:
        case SQLParser.LAST:
        case SQLParser.LESS:
        case SQLParser.LIST:
        case SQLParser.LOCATION:
        case SQLParser.MAX:
        case SQLParser.MAXVALUE:
        case SQLParser.MICROSECONDS:
        case SQLParser.MILLENNIUM:
        case SQLParser.MILLISECONDS:
        case SQLParser.MIN:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.NATIONAL:
        case SQLParser.NULLIF:
        case SQLParser.OVERWRITE:
        case SQLParser.PARTITION:
        case SQLParser.PARTITIONS:
        case SQLParser.PRECISION:
        case SQLParser.PURGE:
        case SQLParser.QUARTER:
        case SQLParser.RANGE:
        case SQLParser.REGEXP:
        case SQLParser.RLIKE:
        case SQLParser.ROLLUP:
        case SQLParser.SECOND:
        case SQLParser.SET:
        case SQLParser.SIMILAR:
        case SQLParser.STDDEV_POP:
        case SQLParser.STDDEV_SAMP:
        case SQLParser.SUBPARTITION:
        case SQLParser.SUM:
        case SQLParser.TABLESPACE:
        case SQLParser.THAN:
        case SQLParser.TIMEZONE:
        case SQLParser.TIMEZONE_HOUR:
        case SQLParser.TIMEZONE_MINUTE:
        case SQLParser.TRIM:
        case SQLParser.TO:
        case SQLParser.UNKNOWN:
        case SQLParser.VALUES:
        case SQLParser.VAR_SAMP:
        case SQLParser.VAR_POP:
        case SQLParser.VARYING:
        case SQLParser.WEEK:
        case SQLParser.YEAR:
        case SQLParser.ZONE:
        case SQLParser.BOOLEAN:
        case SQLParser.BOOL:
        case SQLParser.BIT:
        case SQLParser.VARBIT:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
        case SQLParser.CHAR:
        case SQLParser.VARCHAR:
        case SQLParser.NCHAR:
        case SQLParser.NVARCHAR:
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMETZ:
        case SQLParser.TIMESTAMP:
        case SQLParser.TIMESTAMPTZ:
        case SQLParser.TEXT:
        case SQLParser.VARBINARY:
        case SQLParser.BLOB:
        case SQLParser.BYTEA:
        case SQLParser.INET4:
        case SQLParser.LEFT_PAREN:
        case SQLParser.NUMBER:
        case SQLParser.REAL_NUMBER:
        case SQLParser.Identifier:
        case SQLParser.Character_String_Literal:
            this.enterOuterAlt(localctx, 1);
            this.state = 1158;
            this.row_value_special_case();
            break;
        case SQLParser.NULL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1159;
            this.explicit_row_value_constructor();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_value_special_caseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_value_special_case;
    return this;
}

Row_value_special_caseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_value_special_caseContext.prototype.constructor = Row_value_special_caseContext;

Row_value_special_caseContext.prototype.nonparenthesized_value_expression_primary = function() {
    return this.getTypedRuleContext(Nonparenthesized_value_expression_primaryContext,0);
};

Row_value_special_caseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_value_special_case(this);
	}
};

Row_value_special_caseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_value_special_case(this);
	}
};

Row_value_special_caseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_value_special_case(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_value_special_caseContext = Row_value_special_caseContext;

SQLParser.prototype.row_value_special_case = function() {

    var localctx = new Row_value_special_caseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, SQLParser.RULE_row_value_special_case);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1162;
        this.nonparenthesized_value_expression_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explicit_row_value_constructorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_explicit_row_value_constructor;
    return this;
}

Explicit_row_value_constructorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explicit_row_value_constructorContext.prototype.constructor = Explicit_row_value_constructorContext;

Explicit_row_value_constructorContext.prototype.NULL = function() {
    return this.getToken(SQLParser.NULL, 0);
};

Explicit_row_value_constructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExplicit_row_value_constructor(this);
	}
};

Explicit_row_value_constructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExplicit_row_value_constructor(this);
	}
};

Explicit_row_value_constructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExplicit_row_value_constructor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Explicit_row_value_constructorContext = Explicit_row_value_constructorContext;

SQLParser.prototype.explicit_row_value_constructor = function() {

    var localctx = new Explicit_row_value_constructorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, SQLParser.RULE_explicit_row_value_constructor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1164;
        this.match(SQLParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_value_predicandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_value_predicand;
    return this;
}

Row_value_predicandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_value_predicandContext.prototype.constructor = Row_value_predicandContext;

Row_value_predicandContext.prototype.row_value_special_case = function() {
    return this.getTypedRuleContext(Row_value_special_caseContext,0);
};

Row_value_predicandContext.prototype.row_value_constructor_predicand = function() {
    return this.getTypedRuleContext(Row_value_constructor_predicandContext,0);
};

Row_value_predicandContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_value_predicand(this);
	}
};

Row_value_predicandContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_value_predicand(this);
	}
};

Row_value_predicandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_value_predicand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_value_predicandContext = Row_value_predicandContext;

SQLParser.prototype.row_value_predicand = function() {

    var localctx = new Row_value_predicandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, SQLParser.RULE_row_value_predicand);
    try {
        this.state = 1168;
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1166;
            this.row_value_special_case();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1167;
            this.row_value_constructor_predicand();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_value_constructor_predicandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_value_constructor_predicand;
    return this;
}

Row_value_constructor_predicandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_value_constructor_predicandContext.prototype.constructor = Row_value_constructor_predicandContext;

Row_value_constructor_predicandContext.prototype.common_value_expression = function() {
    return this.getTypedRuleContext(Common_value_expressionContext,0);
};

Row_value_constructor_predicandContext.prototype.boolean_predicand = function() {
    return this.getTypedRuleContext(Boolean_predicandContext,0);
};

Row_value_constructor_predicandContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_value_constructor_predicand(this);
	}
};

Row_value_constructor_predicandContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_value_constructor_predicand(this);
	}
};

Row_value_constructor_predicandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_value_constructor_predicand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_value_constructor_predicandContext = Row_value_constructor_predicandContext;

SQLParser.prototype.row_value_constructor_predicand = function() {

    var localctx = new Row_value_constructor_predicandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, SQLParser.RULE_row_value_constructor_predicand);
    try {
        this.state = 1172;
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1170;
            this.common_value_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1171;
            this.boolean_predicand();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_expression;
    return this;
}

Table_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_expressionContext.prototype.constructor = Table_expressionContext;

Table_expressionContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Table_expressionContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Table_expressionContext.prototype.groupby_clause = function() {
    return this.getTypedRuleContext(Groupby_clauseContext,0);
};

Table_expressionContext.prototype.having_clause = function() {
    return this.getTypedRuleContext(Having_clauseContext,0);
};

Table_expressionContext.prototype.orderby_clause = function() {
    return this.getTypedRuleContext(Orderby_clauseContext,0);
};

Table_expressionContext.prototype.limit_clause = function() {
    return this.getTypedRuleContext(Limit_clauseContext,0);
};

Table_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_expression(this);
	}
};

Table_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_expression(this);
	}
};

Table_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_expressionContext = Table_expressionContext;

SQLParser.prototype.table_expression = function() {

    var localctx = new Table_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, SQLParser.RULE_table_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1174;
        this.from_clause();
        this.state = 1176;
        _la = this._input.LA(1);
        if(_la===SQLParser.WHERE) {
            this.state = 1175;
            this.where_clause();
        }

        this.state = 1179;
        _la = this._input.LA(1);
        if(_la===SQLParser.GROUP) {
            this.state = 1178;
            this.groupby_clause();
        }

        this.state = 1182;
        _la = this._input.LA(1);
        if(_la===SQLParser.HAVING) {
            this.state = 1181;
            this.having_clause();
        }

        this.state = 1185;
        _la = this._input.LA(1);
        if(_la===SQLParser.ORDER) {
            this.state = 1184;
            this.orderby_clause();
        }

        this.state = 1188;
        _la = this._input.LA(1);
        if(_la===SQLParser.LIMIT) {
            this.state = 1187;
            this.limit_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function From_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_from_clause;
    return this;
}

From_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
From_clauseContext.prototype.constructor = From_clauseContext;

From_clauseContext.prototype.FROM = function() {
    return this.getToken(SQLParser.FROM, 0);
};

From_clauseContext.prototype.table_reference_list = function() {
    return this.getTypedRuleContext(Table_reference_listContext,0);
};

From_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFrom_clause(this);
	}
};

From_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFrom_clause(this);
	}
};

From_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitFrom_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.From_clauseContext = From_clauseContext;

SQLParser.prototype.from_clause = function() {

    var localctx = new From_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, SQLParser.RULE_from_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1190;
        this.match(SQLParser.FROM);
        this.state = 1191;
        this.table_reference_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_reference_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_reference_list;
    return this;
}

Table_reference_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_reference_listContext.prototype.constructor = Table_reference_listContext;

Table_reference_listContext.prototype.table_reference = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_referenceContext);
    } else {
        return this.getTypedRuleContext(Table_referenceContext,i);
    }
};

Table_reference_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Table_reference_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_reference_list(this);
	}
};

Table_reference_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_reference_list(this);
	}
};

Table_reference_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_reference_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_reference_listContext = Table_reference_listContext;

SQLParser.prototype.table_reference_list = function() {

    var localctx = new Table_reference_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, SQLParser.RULE_table_reference_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1193;
        this.table_reference();
        this.state = 1198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1194;
            this.match(SQLParser.COMMA);
            this.state = 1195;
            this.table_reference();
            this.state = 1200;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_referenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_reference;
    return this;
}

Table_referenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_referenceContext.prototype.constructor = Table_referenceContext;

Table_referenceContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Table_referenceContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Table_referenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_reference(this);
	}
};

Table_referenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_reference(this);
	}
};

Table_referenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_reference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_referenceContext = Table_referenceContext;

SQLParser.prototype.table_reference = function() {

    var localctx = new Table_referenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, SQLParser.RULE_table_reference);
    try {
        this.state = 1203;
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1201;
            this.joined_table();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1202;
            this.table_primary();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Joined_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_joined_table;
    return this;
}

Joined_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Joined_tableContext.prototype.constructor = Joined_tableContext;

Joined_tableContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Joined_tableContext.prototype.joined_table_primary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Joined_table_primaryContext);
    } else {
        return this.getTypedRuleContext(Joined_table_primaryContext,i);
    }
};

Joined_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterJoined_table(this);
	}
};

Joined_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitJoined_table(this);
	}
};

Joined_tableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitJoined_table(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Joined_tableContext = Joined_tableContext;

SQLParser.prototype.joined_table = function() {

    var localctx = new Joined_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, SQLParser.RULE_joined_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1205;
        this.table_primary();
        this.state = 1207; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1206;
        		this.joined_table_primary();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1209; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,114, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Joined_table_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_joined_table_primary;
    this.right = null; // Table_primaryContext
    this.t = null; // Join_typeContext
    this.s = null; // Join_specificationContext
    return this;
}

Joined_table_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Joined_table_primaryContext.prototype.constructor = Joined_table_primaryContext;

Joined_table_primaryContext.prototype.CROSS = function() {
    return this.getToken(SQLParser.CROSS, 0);
};

Joined_table_primaryContext.prototype.JOIN = function() {
    return this.getToken(SQLParser.JOIN, 0);
};

Joined_table_primaryContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Joined_table_primaryContext.prototype.join_specification = function() {
    return this.getTypedRuleContext(Join_specificationContext,0);
};

Joined_table_primaryContext.prototype.join_type = function() {
    return this.getTypedRuleContext(Join_typeContext,0);
};

Joined_table_primaryContext.prototype.NATURAL = function() {
    return this.getToken(SQLParser.NATURAL, 0);
};

Joined_table_primaryContext.prototype.UNION = function() {
    return this.getToken(SQLParser.UNION, 0);
};

Joined_table_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterJoined_table_primary(this);
	}
};

Joined_table_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitJoined_table_primary(this);
	}
};

Joined_table_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitJoined_table_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Joined_table_primaryContext = Joined_table_primaryContext;

SQLParser.prototype.joined_table_primary = function() {

    var localctx = new Joined_table_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, SQLParser.RULE_joined_table_primary);
    var _la = 0; // Token type
    try {
        this.state = 1230;
        switch(this._input.LA(1)) {
        case SQLParser.CROSS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1211;
            this.match(SQLParser.CROSS);
            this.state = 1212;
            this.match(SQLParser.JOIN);
            this.state = 1213;
            localctx.right = this.table_primary();
            break;
        case SQLParser.FULL:
        case SQLParser.INNER:
        case SQLParser.JOIN:
        case SQLParser.LEFT:
        case SQLParser.RIGHT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1215;
            _la = this._input.LA(1);
            if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (SQLParser.FULL - 18)) | (1 << (SQLParser.INNER - 18)) | (1 << (SQLParser.LEFT - 18)) | (1 << (SQLParser.RIGHT - 18)))) !== 0)) {
                this.state = 1214;
                localctx.t = this.join_type();
            }

            this.state = 1217;
            this.match(SQLParser.JOIN);
            this.state = 1218;
            localctx.right = this.table_primary();
            this.state = 1219;
            localctx.s = this.join_specification();
            break;
        case SQLParser.NATURAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1221;
            this.match(SQLParser.NATURAL);
            this.state = 1223;
            _la = this._input.LA(1);
            if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (SQLParser.FULL - 18)) | (1 << (SQLParser.INNER - 18)) | (1 << (SQLParser.LEFT - 18)) | (1 << (SQLParser.RIGHT - 18)))) !== 0)) {
                this.state = 1222;
                localctx.t = this.join_type();
            }

            this.state = 1225;
            this.match(SQLParser.JOIN);
            this.state = 1226;
            localctx.right = this.table_primary();
            break;
        case SQLParser.UNION:
            this.enterOuterAlt(localctx, 4);
            this.state = 1227;
            this.match(SQLParser.UNION);
            this.state = 1228;
            this.match(SQLParser.JOIN);
            this.state = 1229;
            localctx.right = this.table_primary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cross_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cross_join;
    this.r = null; // Table_primaryContext
    return this;
}

Cross_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cross_joinContext.prototype.constructor = Cross_joinContext;

Cross_joinContext.prototype.CROSS = function() {
    return this.getToken(SQLParser.CROSS, 0);
};

Cross_joinContext.prototype.JOIN = function() {
    return this.getToken(SQLParser.JOIN, 0);
};

Cross_joinContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Cross_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCross_join(this);
	}
};

Cross_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCross_join(this);
	}
};

Cross_joinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCross_join(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Cross_joinContext = Cross_joinContext;

SQLParser.prototype.cross_join = function() {

    var localctx = new Cross_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, SQLParser.RULE_cross_join);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        this.match(SQLParser.CROSS);
        this.state = 1233;
        this.match(SQLParser.JOIN);
        this.state = 1234;
        localctx.r = this.table_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Qualified_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_qualified_join;
    this.t = null; // Join_typeContext
    this.r = null; // Table_primaryContext
    this.s = null; // Join_specificationContext
    return this;
}

Qualified_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_joinContext.prototype.constructor = Qualified_joinContext;

Qualified_joinContext.prototype.JOIN = function() {
    return this.getToken(SQLParser.JOIN, 0);
};

Qualified_joinContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Qualified_joinContext.prototype.join_specification = function() {
    return this.getTypedRuleContext(Join_specificationContext,0);
};

Qualified_joinContext.prototype.join_type = function() {
    return this.getTypedRuleContext(Join_typeContext,0);
};

Qualified_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQualified_join(this);
	}
};

Qualified_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQualified_join(this);
	}
};

Qualified_joinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQualified_join(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Qualified_joinContext = Qualified_joinContext;

SQLParser.prototype.qualified_join = function() {

    var localctx = new Qualified_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, SQLParser.RULE_qualified_join);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1237;
        _la = this._input.LA(1);
        if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (SQLParser.FULL - 18)) | (1 << (SQLParser.INNER - 18)) | (1 << (SQLParser.LEFT - 18)) | (1 << (SQLParser.RIGHT - 18)))) !== 0)) {
            this.state = 1236;
            localctx.t = this.join_type();
        }

        this.state = 1239;
        this.match(SQLParser.JOIN);
        this.state = 1240;
        localctx.r = this.table_primary();
        this.state = 1241;
        localctx.s = this.join_specification();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Natural_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_natural_join;
    this.t = null; // Join_typeContext
    this.r = null; // Table_primaryContext
    return this;
}

Natural_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Natural_joinContext.prototype.constructor = Natural_joinContext;

Natural_joinContext.prototype.NATURAL = function() {
    return this.getToken(SQLParser.NATURAL, 0);
};

Natural_joinContext.prototype.JOIN = function() {
    return this.getToken(SQLParser.JOIN, 0);
};

Natural_joinContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Natural_joinContext.prototype.join_type = function() {
    return this.getTypedRuleContext(Join_typeContext,0);
};

Natural_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNatural_join(this);
	}
};

Natural_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNatural_join(this);
	}
};

Natural_joinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNatural_join(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Natural_joinContext = Natural_joinContext;

SQLParser.prototype.natural_join = function() {

    var localctx = new Natural_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, SQLParser.RULE_natural_join);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1243;
        this.match(SQLParser.NATURAL);
        this.state = 1245;
        _la = this._input.LA(1);
        if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (SQLParser.FULL - 18)) | (1 << (SQLParser.INNER - 18)) | (1 << (SQLParser.LEFT - 18)) | (1 << (SQLParser.RIGHT - 18)))) !== 0)) {
            this.state = 1244;
            localctx.t = this.join_type();
        }

        this.state = 1247;
        this.match(SQLParser.JOIN);
        this.state = 1248;
        localctx.r = this.table_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Union_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_union_join;
    this.r = null; // Table_primaryContext
    return this;
}

Union_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Union_joinContext.prototype.constructor = Union_joinContext;

Union_joinContext.prototype.UNION = function() {
    return this.getToken(SQLParser.UNION, 0);
};

Union_joinContext.prototype.JOIN = function() {
    return this.getToken(SQLParser.JOIN, 0);
};

Union_joinContext.prototype.table_primary = function() {
    return this.getTypedRuleContext(Table_primaryContext,0);
};

Union_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUnion_join(this);
	}
};

Union_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUnion_join(this);
	}
};

Union_joinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitUnion_join(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Union_joinContext = Union_joinContext;

SQLParser.prototype.union_join = function() {

    var localctx = new Union_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, SQLParser.RULE_union_join);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1250;
        this.match(SQLParser.UNION);
        this.state = 1251;
        this.match(SQLParser.JOIN);
        this.state = 1252;
        localctx.r = this.table_primary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_join_type;
    this.t = null; // Outer_join_typeContext
    return this;
}

Join_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_typeContext.prototype.constructor = Join_typeContext;

Join_typeContext.prototype.INNER = function() {
    return this.getToken(SQLParser.INNER, 0);
};

Join_typeContext.prototype.outer_join_type = function() {
    return this.getTypedRuleContext(Outer_join_typeContext,0);
};

Join_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterJoin_type(this);
	}
};

Join_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitJoin_type(this);
	}
};

Join_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitJoin_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Join_typeContext = Join_typeContext;

SQLParser.prototype.join_type = function() {

    var localctx = new Join_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, SQLParser.RULE_join_type);
    try {
        this.state = 1256;
        switch(this._input.LA(1)) {
        case SQLParser.INNER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1254;
            this.match(SQLParser.INNER);
            break;
        case SQLParser.FULL:
        case SQLParser.LEFT:
        case SQLParser.RIGHT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1255;
            localctx.t = this.outer_join_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Outer_join_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_outer_join_type;
    return this;
}

Outer_join_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_join_typeContext.prototype.constructor = Outer_join_typeContext;

Outer_join_typeContext.prototype.outer_join_type_part2 = function() {
    return this.getTypedRuleContext(Outer_join_type_part2Context,0);
};

Outer_join_typeContext.prototype.OUTER = function() {
    return this.getToken(SQLParser.OUTER, 0);
};

Outer_join_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOuter_join_type(this);
	}
};

Outer_join_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOuter_join_type(this);
	}
};

Outer_join_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOuter_join_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Outer_join_typeContext = Outer_join_typeContext;

SQLParser.prototype.outer_join_type = function() {

    var localctx = new Outer_join_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, SQLParser.RULE_outer_join_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1258;
        this.outer_join_type_part2();
        this.state = 1260;
        _la = this._input.LA(1);
        if(_la===SQLParser.OUTER) {
            this.state = 1259;
            this.match(SQLParser.OUTER);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Outer_join_type_part2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_outer_join_type_part2;
    return this;
}

Outer_join_type_part2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_join_type_part2Context.prototype.constructor = Outer_join_type_part2Context;

Outer_join_type_part2Context.prototype.LEFT = function() {
    return this.getToken(SQLParser.LEFT, 0);
};

Outer_join_type_part2Context.prototype.RIGHT = function() {
    return this.getToken(SQLParser.RIGHT, 0);
};

Outer_join_type_part2Context.prototype.FULL = function() {
    return this.getToken(SQLParser.FULL, 0);
};

Outer_join_type_part2Context.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOuter_join_type_part2(this);
	}
};

Outer_join_type_part2Context.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOuter_join_type_part2(this);
	}
};

Outer_join_type_part2Context.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOuter_join_type_part2(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Outer_join_type_part2Context = Outer_join_type_part2Context;

SQLParser.prototype.outer_join_type_part2 = function() {

    var localctx = new Outer_join_type_part2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 250, SQLParser.RULE_outer_join_type_part2);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1262;
        _la = this._input.LA(1);
        if(!(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (SQLParser.FULL - 18)) | (1 << (SQLParser.LEFT - 18)) | (1 << (SQLParser.RIGHT - 18)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_join_specification;
    return this;
}

Join_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_specificationContext.prototype.constructor = Join_specificationContext;

Join_specificationContext.prototype.join_condition = function() {
    return this.getTypedRuleContext(Join_conditionContext,0);
};

Join_specificationContext.prototype.named_columns_join = function() {
    return this.getTypedRuleContext(Named_columns_joinContext,0);
};

Join_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterJoin_specification(this);
	}
};

Join_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitJoin_specification(this);
	}
};

Join_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitJoin_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Join_specificationContext = Join_specificationContext;

SQLParser.prototype.join_specification = function() {

    var localctx = new Join_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, SQLParser.RULE_join_specification);
    try {
        this.state = 1266;
        switch(this._input.LA(1)) {
        case SQLParser.ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 1264;
            this.join_condition();
            break;
        case SQLParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 1265;
            this.named_columns_join();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_join_condition;
    return this;
}

Join_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_conditionContext.prototype.constructor = Join_conditionContext;

Join_conditionContext.prototype.ON = function() {
    return this.getToken(SQLParser.ON, 0);
};

Join_conditionContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Join_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterJoin_condition(this);
	}
};

Join_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitJoin_condition(this);
	}
};

Join_conditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitJoin_condition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Join_conditionContext = Join_conditionContext;

SQLParser.prototype.join_condition = function() {

    var localctx = new Join_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, SQLParser.RULE_join_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1268;
        this.match(SQLParser.ON);
        this.state = 1269;
        this.search_condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Named_columns_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_named_columns_join;
    this.f = null; // Column_reference_listContext
    return this;
}

Named_columns_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_columns_joinContext.prototype.constructor = Named_columns_joinContext;

Named_columns_joinContext.prototype.USING = function() {
    return this.getToken(SQLParser.USING, 0);
};

Named_columns_joinContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Named_columns_joinContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Named_columns_joinContext.prototype.column_reference_list = function() {
    return this.getTypedRuleContext(Column_reference_listContext,0);
};

Named_columns_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNamed_columns_join(this);
	}
};

Named_columns_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNamed_columns_join(this);
	}
};

Named_columns_joinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNamed_columns_join(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Named_columns_joinContext = Named_columns_joinContext;

SQLParser.prototype.named_columns_join = function() {

    var localctx = new Named_columns_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, SQLParser.RULE_named_columns_join);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1271;
        this.match(SQLParser.USING);
        this.state = 1272;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1273;
        localctx.f = this.column_reference_list();
        this.state = 1274;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_primary;
    this.alias = null; // IdentifierContext
    this.name = null; // IdentifierContext
    return this;
}

Table_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_primaryContext.prototype.constructor = Table_primaryContext;

Table_primaryContext.prototype.table_or_query_name = function() {
    return this.getTypedRuleContext(Table_or_query_nameContext,0);
};

Table_primaryContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Table_primaryContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Table_primaryContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Table_primaryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Table_primaryContext.prototype.AS = function() {
    return this.getToken(SQLParser.AS, 0);
};

Table_primaryContext.prototype.derived_table = function() {
    return this.getTypedRuleContext(Derived_tableContext,0);
};

Table_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_primary(this);
	}
};

Table_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_primary(this);
	}
};

Table_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_primaryContext = Table_primaryContext;

SQLParser.prototype.table_primary = function() {

    var localctx = new Table_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, SQLParser.RULE_table_primary);
    var _la = 0; // Token type
    try {
        this.state = 1300;
        switch(this._input.LA(1)) {
        case SQLParser.AVG:
        case SQLParser.BETWEEN:
        case SQLParser.BY:
        case SQLParser.CENTURY:
        case SQLParser.CHARACTER:
        case SQLParser.COLLECT:
        case SQLParser.COALESCE:
        case SQLParser.COLUMN:
        case SQLParser.COUNT:
        case SQLParser.CUBE:
        case SQLParser.DAY:
        case SQLParser.DEC:
        case SQLParser.DECADE:
        case SQLParser.DOW:
        case SQLParser.DOY:
        case SQLParser.DROP:
        case SQLParser.EPOCH:
        case SQLParser.EVERY:
        case SQLParser.EXISTS:
        case SQLParser.EXTERNAL:
        case SQLParser.EXTRACT:
        case SQLParser.FILTER:
        case SQLParser.FIRST:
        case SQLParser.FORMAT:
        case SQLParser.FUSION:
        case SQLParser.GROUPING:
        case SQLParser.HASH:
        case SQLParser.INDEX:
        case SQLParser.INSERT:
        case SQLParser.INTERSECTION:
        case SQLParser.ISODOW:
        case SQLParser.ISOYEAR:
        case SQLParser.LAST:
        case SQLParser.LESS:
        case SQLParser.LIST:
        case SQLParser.LOCATION:
        case SQLParser.MAX:
        case SQLParser.MAXVALUE:
        case SQLParser.MICROSECONDS:
        case SQLParser.MILLENNIUM:
        case SQLParser.MILLISECONDS:
        case SQLParser.MIN:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.NATIONAL:
        case SQLParser.NULLIF:
        case SQLParser.OVERWRITE:
        case SQLParser.PARTITION:
        case SQLParser.PARTITIONS:
        case SQLParser.PRECISION:
        case SQLParser.PURGE:
        case SQLParser.QUARTER:
        case SQLParser.RANGE:
        case SQLParser.REGEXP:
        case SQLParser.RLIKE:
        case SQLParser.ROLLUP:
        case SQLParser.SECOND:
        case SQLParser.SET:
        case SQLParser.SIMILAR:
        case SQLParser.STDDEV_POP:
        case SQLParser.STDDEV_SAMP:
        case SQLParser.SUBPARTITION:
        case SQLParser.SUM:
        case SQLParser.TABLESPACE:
        case SQLParser.THAN:
        case SQLParser.TIMEZONE:
        case SQLParser.TIMEZONE_HOUR:
        case SQLParser.TIMEZONE_MINUTE:
        case SQLParser.TRIM:
        case SQLParser.TO:
        case SQLParser.UNKNOWN:
        case SQLParser.VALUES:
        case SQLParser.VAR_SAMP:
        case SQLParser.VAR_POP:
        case SQLParser.VARYING:
        case SQLParser.WEEK:
        case SQLParser.YEAR:
        case SQLParser.ZONE:
        case SQLParser.BOOLEAN:
        case SQLParser.BOOL:
        case SQLParser.BIT:
        case SQLParser.VARBIT:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
        case SQLParser.CHAR:
        case SQLParser.VARCHAR:
        case SQLParser.NCHAR:
        case SQLParser.NVARCHAR:
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMETZ:
        case SQLParser.TIMESTAMP:
        case SQLParser.TIMESTAMPTZ:
        case SQLParser.TEXT:
        case SQLParser.VARBINARY:
        case SQLParser.BLOB:
        case SQLParser.BYTEA:
        case SQLParser.INET4:
        case SQLParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1276;
            this.table_or_query_name();
            this.state = 1281;
            _la = this._input.LA(1);
            if(_la===SQLParser.AS || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (SQLParser.AVG - 54)) | (1 << (SQLParser.BETWEEN - 54)) | (1 << (SQLParser.BY - 54)) | (1 << (SQLParser.CENTURY - 54)) | (1 << (SQLParser.CHARACTER - 54)) | (1 << (SQLParser.COLLECT - 54)) | (1 << (SQLParser.COALESCE - 54)) | (1 << (SQLParser.COLUMN - 54)) | (1 << (SQLParser.COUNT - 54)) | (1 << (SQLParser.CUBE - 54)) | (1 << (SQLParser.DAY - 54)) | (1 << (SQLParser.DEC - 54)) | (1 << (SQLParser.DECADE - 54)) | (1 << (SQLParser.DOW - 54)) | (1 << (SQLParser.DOY - 54)) | (1 << (SQLParser.DROP - 54)) | (1 << (SQLParser.EPOCH - 54)) | (1 << (SQLParser.EVERY - 54)) | (1 << (SQLParser.EXISTS - 54)) | (1 << (SQLParser.EXTERNAL - 54)) | (1 << (SQLParser.EXTRACT - 54)) | (1 << (SQLParser.FILTER - 54)) | (1 << (SQLParser.FIRST - 54)) | (1 << (SQLParser.FORMAT - 54)) | (1 << (SQLParser.FUSION - 54)) | (1 << (SQLParser.GROUPING - 54)) | (1 << (SQLParser.HASH - 54)) | (1 << (SQLParser.INDEX - 54)) | (1 << (SQLParser.INSERT - 54)) | (1 << (SQLParser.INTERSECTION - 54)) | (1 << (SQLParser.ISODOW - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (SQLParser.ISOYEAR - 86)) | (1 << (SQLParser.LAST - 86)) | (1 << (SQLParser.LESS - 86)) | (1 << (SQLParser.LIST - 86)) | (1 << (SQLParser.LOCATION - 86)) | (1 << (SQLParser.MAX - 86)) | (1 << (SQLParser.MAXVALUE - 86)) | (1 << (SQLParser.MICROSECONDS - 86)) | (1 << (SQLParser.MILLENNIUM - 86)) | (1 << (SQLParser.MILLISECONDS - 86)) | (1 << (SQLParser.MIN - 86)) | (1 << (SQLParser.MINUTE - 86)) | (1 << (SQLParser.MONTH - 86)) | (1 << (SQLParser.NATIONAL - 86)) | (1 << (SQLParser.NULLIF - 86)) | (1 << (SQLParser.OVERWRITE - 86)) | (1 << (SQLParser.PARTITION - 86)) | (1 << (SQLParser.PARTITIONS - 86)) | (1 << (SQLParser.PRECISION - 86)) | (1 << (SQLParser.PURGE - 86)) | (1 << (SQLParser.QUARTER - 86)) | (1 << (SQLParser.RANGE - 86)) | (1 << (SQLParser.REGEXP - 86)) | (1 << (SQLParser.RLIKE - 86)) | (1 << (SQLParser.ROLLUP - 86)) | (1 << (SQLParser.SECOND - 86)) | (1 << (SQLParser.SET - 86)) | (1 << (SQLParser.SIMILAR - 86)) | (1 << (SQLParser.STDDEV_POP - 86)) | (1 << (SQLParser.STDDEV_SAMP - 86)) | (1 << (SQLParser.SUBPARTITION - 86)) | (1 << (SQLParser.SUM - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (SQLParser.TABLESPACE - 118)) | (1 << (SQLParser.THAN - 118)) | (1 << (SQLParser.TIMEZONE - 118)) | (1 << (SQLParser.TIMEZONE_HOUR - 118)) | (1 << (SQLParser.TIMEZONE_MINUTE - 118)) | (1 << (SQLParser.TRIM - 118)) | (1 << (SQLParser.TO - 118)) | (1 << (SQLParser.UNKNOWN - 118)) | (1 << (SQLParser.VALUES - 118)) | (1 << (SQLParser.VAR_SAMP - 118)) | (1 << (SQLParser.VAR_POP - 118)) | (1 << (SQLParser.VARYING - 118)) | (1 << (SQLParser.WEEK - 118)) | (1 << (SQLParser.YEAR - 118)) | (1 << (SQLParser.ZONE - 118)) | (1 << (SQLParser.BOOLEAN - 118)) | (1 << (SQLParser.BOOL - 118)) | (1 << (SQLParser.BIT - 118)) | (1 << (SQLParser.VARBIT - 118)) | (1 << (SQLParser.INT1 - 118)) | (1 << (SQLParser.INT2 - 118)) | (1 << (SQLParser.INT4 - 118)) | (1 << (SQLParser.INT8 - 118)) | (1 << (SQLParser.TINYINT - 118)) | (1 << (SQLParser.SMALLINT - 118)) | (1 << (SQLParser.INT - 118)) | (1 << (SQLParser.INTEGER - 118)) | (1 << (SQLParser.BIGINT - 118)) | (1 << (SQLParser.FLOAT4 - 118)) | (1 << (SQLParser.FLOAT8 - 118)) | (1 << (SQLParser.REAL - 118)) | (1 << (SQLParser.FLOAT - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (SQLParser.DOUBLE - 150)) | (1 << (SQLParser.NUMERIC - 150)) | (1 << (SQLParser.DECIMAL - 150)) | (1 << (SQLParser.CHAR - 150)) | (1 << (SQLParser.VARCHAR - 150)) | (1 << (SQLParser.NCHAR - 150)) | (1 << (SQLParser.NVARCHAR - 150)) | (1 << (SQLParser.DATE - 150)) | (1 << (SQLParser.TIME - 150)) | (1 << (SQLParser.TIMETZ - 150)) | (1 << (SQLParser.TIMESTAMP - 150)) | (1 << (SQLParser.TIMESTAMPTZ - 150)) | (1 << (SQLParser.TEXT - 150)) | (1 << (SQLParser.VARBINARY - 150)) | (1 << (SQLParser.BLOB - 150)) | (1 << (SQLParser.BYTEA - 150)) | (1 << (SQLParser.INET4 - 150)))) !== 0) || _la===SQLParser.Identifier) {
                this.state = 1278;
                _la = this._input.LA(1);
                if(_la===SQLParser.AS) {
                    this.state = 1277;
                    this.match(SQLParser.AS);
                }

                this.state = 1280;
                localctx.alias = this.identifier();
            }

            this.state = 1287;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 1283;
                this.match(SQLParser.LEFT_PAREN);
                this.state = 1284;
                this.column_name_list();
                this.state = 1285;
                this.match(SQLParser.RIGHT_PAREN);
            }

            break;
        case SQLParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1289;
            this.derived_table();
            this.state = 1291;
            _la = this._input.LA(1);
            if(_la===SQLParser.AS) {
                this.state = 1290;
                this.match(SQLParser.AS);
            }

            this.state = 1293;
            localctx.name = this.identifier();
            this.state = 1298;
            _la = this._input.LA(1);
            if(_la===SQLParser.LEFT_PAREN) {
                this.state = 1294;
                this.match(SQLParser.LEFT_PAREN);
                this.state = 1295;
                this.column_name_list();
                this.state = 1296;
                this.match(SQLParser.RIGHT_PAREN);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_name_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_name_list;
    return this;
}

Column_name_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_name_listContext.prototype.constructor = Column_name_listContext;

Column_name_listContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Column_name_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Column_name_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumn_name_list(this);
	}
};

Column_name_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumn_name_list(this);
	}
};

Column_name_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitColumn_name_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Column_name_listContext = Column_name_listContext;

SQLParser.prototype.column_name_list = function() {

    var localctx = new Column_name_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, SQLParser.RULE_column_name_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1302;
        this.identifier();
        this.state = 1307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1303;
            this.match(SQLParser.COMMA);
            this.state = 1304;
            this.identifier();
            this.state = 1309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_derived_table;
    return this;
}

Derived_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_tableContext.prototype.constructor = Derived_tableContext;

Derived_tableContext.prototype.table_subquery = function() {
    return this.getTypedRuleContext(Table_subqueryContext,0);
};

Derived_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDerived_table(this);
	}
};

Derived_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDerived_table(this);
	}
};

Derived_tableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDerived_table(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Derived_tableContext = Derived_tableContext;

SQLParser.prototype.derived_table = function() {

    var localctx = new Derived_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, SQLParser.RULE_derived_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1310;
        this.table_subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Where_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_where_clause;
    return this;
}

Where_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Where_clauseContext.prototype.constructor = Where_clauseContext;

Where_clauseContext.prototype.WHERE = function() {
    return this.getToken(SQLParser.WHERE, 0);
};

Where_clauseContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Where_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterWhere_clause(this);
	}
};

Where_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitWhere_clause(this);
	}
};

Where_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitWhere_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Where_clauseContext = Where_clauseContext;

SQLParser.prototype.where_clause = function() {

    var localctx = new Where_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, SQLParser.RULE_where_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1312;
        this.match(SQLParser.WHERE);
        this.state = 1313;
        this.search_condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_search_condition;
    return this;
}

Search_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_conditionContext.prototype.constructor = Search_conditionContext;

Search_conditionContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

Search_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSearch_condition(this);
	}
};

Search_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSearch_condition(this);
	}
};

Search_conditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSearch_condition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Search_conditionContext = Search_conditionContext;

SQLParser.prototype.search_condition = function() {

    var localctx = new Search_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, SQLParser.RULE_search_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1315;
        this.value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Groupby_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_groupby_clause;
    this.g = null; // Grouping_element_listContext
    return this;
}

Groupby_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Groupby_clauseContext.prototype.constructor = Groupby_clauseContext;

Groupby_clauseContext.prototype.GROUP = function() {
    return this.getToken(SQLParser.GROUP, 0);
};

Groupby_clauseContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Groupby_clauseContext.prototype.grouping_element_list = function() {
    return this.getTypedRuleContext(Grouping_element_listContext,0);
};

Groupby_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGroupby_clause(this);
	}
};

Groupby_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGroupby_clause(this);
	}
};

Groupby_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGroupby_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Groupby_clauseContext = Groupby_clauseContext;

SQLParser.prototype.groupby_clause = function() {

    var localctx = new Groupby_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, SQLParser.RULE_groupby_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1317;
        this.match(SQLParser.GROUP);
        this.state = 1318;
        this.match(SQLParser.BY);
        this.state = 1319;
        localctx.g = this.grouping_element_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_element_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_grouping_element_list;
    return this;
}

Grouping_element_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_element_listContext.prototype.constructor = Grouping_element_listContext;

Grouping_element_listContext.prototype.grouping_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Grouping_elementContext);
    } else {
        return this.getTypedRuleContext(Grouping_elementContext,i);
    }
};

Grouping_element_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Grouping_element_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGrouping_element_list(this);
	}
};

Grouping_element_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGrouping_element_list(this);
	}
};

Grouping_element_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGrouping_element_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Grouping_element_listContext = Grouping_element_listContext;

SQLParser.prototype.grouping_element_list = function() {

    var localctx = new Grouping_element_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, SQLParser.RULE_grouping_element_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1321;
        this.grouping_element();
        this.state = 1326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1322;
            this.match(SQLParser.COMMA);
            this.state = 1323;
            this.grouping_element();
            this.state = 1328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_grouping_element;
    return this;
}

Grouping_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_elementContext.prototype.constructor = Grouping_elementContext;

Grouping_elementContext.prototype.rollup_list = function() {
    return this.getTypedRuleContext(Rollup_listContext,0);
};

Grouping_elementContext.prototype.cube_list = function() {
    return this.getTypedRuleContext(Cube_listContext,0);
};

Grouping_elementContext.prototype.empty_grouping_set = function() {
    return this.getTypedRuleContext(Empty_grouping_setContext,0);
};

Grouping_elementContext.prototype.ordinary_grouping_set = function() {
    return this.getTypedRuleContext(Ordinary_grouping_setContext,0);
};

Grouping_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterGrouping_element(this);
	}
};

Grouping_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitGrouping_element(this);
	}
};

Grouping_elementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitGrouping_element(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Grouping_elementContext = Grouping_elementContext;

SQLParser.prototype.grouping_element = function() {

    var localctx = new Grouping_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, SQLParser.RULE_grouping_element);
    try {
        this.state = 1333;
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1329;
            this.rollup_list();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1330;
            this.cube_list();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1331;
            this.empty_grouping_set();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1332;
            this.ordinary_grouping_set();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ordinary_grouping_setContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_ordinary_grouping_set;
    return this;
}

Ordinary_grouping_setContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ordinary_grouping_setContext.prototype.constructor = Ordinary_grouping_setContext;

Ordinary_grouping_setContext.prototype.row_value_predicand = function() {
    return this.getTypedRuleContext(Row_value_predicandContext,0);
};

Ordinary_grouping_setContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Ordinary_grouping_setContext.prototype.row_value_predicand_list = function() {
    return this.getTypedRuleContext(Row_value_predicand_listContext,0);
};

Ordinary_grouping_setContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Ordinary_grouping_setContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOrdinary_grouping_set(this);
	}
};

Ordinary_grouping_setContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOrdinary_grouping_set(this);
	}
};

Ordinary_grouping_setContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOrdinary_grouping_set(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Ordinary_grouping_setContext = Ordinary_grouping_setContext;

SQLParser.prototype.ordinary_grouping_set = function() {

    var localctx = new Ordinary_grouping_setContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, SQLParser.RULE_ordinary_grouping_set);
    try {
        this.state = 1340;
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1335;
            this.row_value_predicand();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1336;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 1337;
            this.row_value_predicand_list();
            this.state = 1338;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ordinary_grouping_set_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_ordinary_grouping_set_list;
    return this;
}

Ordinary_grouping_set_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ordinary_grouping_set_listContext.prototype.constructor = Ordinary_grouping_set_listContext;

Ordinary_grouping_set_listContext.prototype.ordinary_grouping_set = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordinary_grouping_setContext);
    } else {
        return this.getTypedRuleContext(Ordinary_grouping_setContext,i);
    }
};

Ordinary_grouping_set_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Ordinary_grouping_set_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOrdinary_grouping_set_list(this);
	}
};

Ordinary_grouping_set_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOrdinary_grouping_set_list(this);
	}
};

Ordinary_grouping_set_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOrdinary_grouping_set_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Ordinary_grouping_set_listContext = Ordinary_grouping_set_listContext;

SQLParser.prototype.ordinary_grouping_set_list = function() {

    var localctx = new Ordinary_grouping_set_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, SQLParser.RULE_ordinary_grouping_set_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1342;
        this.ordinary_grouping_set();
        this.state = 1347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1343;
            this.match(SQLParser.COMMA);
            this.state = 1344;
            this.ordinary_grouping_set();
            this.state = 1349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollup_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_rollup_list;
    this.c = null; // Ordinary_grouping_set_listContext
    return this;
}

Rollup_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollup_listContext.prototype.constructor = Rollup_listContext;

Rollup_listContext.prototype.ROLLUP = function() {
    return this.getToken(SQLParser.ROLLUP, 0);
};

Rollup_listContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Rollup_listContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Rollup_listContext.prototype.ordinary_grouping_set_list = function() {
    return this.getTypedRuleContext(Ordinary_grouping_set_listContext,0);
};

Rollup_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRollup_list(this);
	}
};

Rollup_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRollup_list(this);
	}
};

Rollup_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRollup_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Rollup_listContext = Rollup_listContext;

SQLParser.prototype.rollup_list = function() {

    var localctx = new Rollup_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, SQLParser.RULE_rollup_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1350;
        this.match(SQLParser.ROLLUP);
        this.state = 1351;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1352;
        localctx.c = this.ordinary_grouping_set_list();
        this.state = 1353;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cube_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cube_list;
    this.c = null; // Ordinary_grouping_set_listContext
    return this;
}

Cube_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cube_listContext.prototype.constructor = Cube_listContext;

Cube_listContext.prototype.CUBE = function() {
    return this.getToken(SQLParser.CUBE, 0);
};

Cube_listContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Cube_listContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Cube_listContext.prototype.ordinary_grouping_set_list = function() {
    return this.getTypedRuleContext(Ordinary_grouping_set_listContext,0);
};

Cube_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCube_list(this);
	}
};

Cube_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCube_list(this);
	}
};

Cube_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitCube_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Cube_listContext = Cube_listContext;

SQLParser.prototype.cube_list = function() {

    var localctx = new Cube_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, SQLParser.RULE_cube_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1355;
        this.match(SQLParser.CUBE);
        this.state = 1356;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1357;
        localctx.c = this.ordinary_grouping_set_list();
        this.state = 1358;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Empty_grouping_setContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_empty_grouping_set;
    return this;
}

Empty_grouping_setContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Empty_grouping_setContext.prototype.constructor = Empty_grouping_setContext;

Empty_grouping_setContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Empty_grouping_setContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Empty_grouping_setContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterEmpty_grouping_set(this);
	}
};

Empty_grouping_setContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitEmpty_grouping_set(this);
	}
};

Empty_grouping_setContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitEmpty_grouping_set(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Empty_grouping_setContext = Empty_grouping_setContext;

SQLParser.prototype.empty_grouping_set = function() {

    var localctx = new Empty_grouping_setContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, SQLParser.RULE_empty_grouping_set);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1360;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1361;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Having_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_having_clause;
    return this;
}

Having_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Having_clauseContext.prototype.constructor = Having_clauseContext;

Having_clauseContext.prototype.HAVING = function() {
    return this.getToken(SQLParser.HAVING, 0);
};

Having_clauseContext.prototype.boolean_value_expression = function() {
    return this.getTypedRuleContext(Boolean_value_expressionContext,0);
};

Having_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterHaving_clause(this);
	}
};

Having_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitHaving_clause(this);
	}
};

Having_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitHaving_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Having_clauseContext = Having_clauseContext;

SQLParser.prototype.having_clause = function() {

    var localctx = new Having_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, SQLParser.RULE_having_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1363;
        this.match(SQLParser.HAVING);
        this.state = 1364;
        this.boolean_value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_value_predicand_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_value_predicand_list;
    return this;
}

Row_value_predicand_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_value_predicand_listContext.prototype.constructor = Row_value_predicand_listContext;

Row_value_predicand_listContext.prototype.row_value_predicand = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Row_value_predicandContext);
    } else {
        return this.getTypedRuleContext(Row_value_predicandContext,i);
    }
};

Row_value_predicand_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Row_value_predicand_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_value_predicand_list(this);
	}
};

Row_value_predicand_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_value_predicand_list(this);
	}
};

Row_value_predicand_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_value_predicand_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_value_predicand_listContext = Row_value_predicand_listContext;

SQLParser.prototype.row_value_predicand_list = function() {

    var localctx = new Row_value_predicand_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, SQLParser.RULE_row_value_predicand_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1366;
        this.row_value_predicand();
        this.state = 1371;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1367;
            this.match(SQLParser.COMMA);
            this.state = 1368;
            this.row_value_predicand();
            this.state = 1373;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_query_expression;
    return this;
}

Query_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_expressionContext.prototype.constructor = Query_expressionContext;

Query_expressionContext.prototype.query_expression_body = function() {
    return this.getTypedRuleContext(Query_expression_bodyContext,0);
};

Query_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuery_expression(this);
	}
};

Query_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuery_expression(this);
	}
};

Query_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuery_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Query_expressionContext = Query_expressionContext;

SQLParser.prototype.query_expression = function() {

    var localctx = new Query_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, SQLParser.RULE_query_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1374;
        this.query_expression_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_expression_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_query_expression_body;
    return this;
}

Query_expression_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_expression_bodyContext.prototype.constructor = Query_expression_bodyContext;

Query_expression_bodyContext.prototype.non_join_query_expression = function() {
    return this.getTypedRuleContext(Non_join_query_expressionContext,0);
};

Query_expression_bodyContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Query_expression_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuery_expression_body(this);
	}
};

Query_expression_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuery_expression_body(this);
	}
};

Query_expression_bodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuery_expression_body(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Query_expression_bodyContext = Query_expression_bodyContext;

SQLParser.prototype.query_expression_body = function() {

    var localctx = new Query_expression_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, SQLParser.RULE_query_expression_body);
    try {
        this.state = 1378;
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1376;
            this.non_join_query_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1377;
            this.joined_table();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_join_query_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_non_join_query_expression;
    return this;
}

Non_join_query_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_join_query_expressionContext.prototype.constructor = Non_join_query_expressionContext;

Non_join_query_expressionContext.prototype.non_join_query_term = function() {
    return this.getTypedRuleContext(Non_join_query_termContext,0);
};

Non_join_query_expressionContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Non_join_query_expressionContext.prototype.query_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_termContext);
    } else {
        return this.getTypedRuleContext(Query_termContext,i);
    }
};

Non_join_query_expressionContext.prototype.UNION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.UNION);
    } else {
        return this.getToken(SQLParser.UNION, i);
    }
};


Non_join_query_expressionContext.prototype.EXCEPT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.EXCEPT);
    } else {
        return this.getToken(SQLParser.EXCEPT, i);
    }
};


Non_join_query_expressionContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.ALL);
    } else {
        return this.getToken(SQLParser.ALL, i);
    }
};


Non_join_query_expressionContext.prototype.DISTINCT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.DISTINCT);
    } else {
        return this.getToken(SQLParser.DISTINCT, i);
    }
};


Non_join_query_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNon_join_query_expression(this);
	}
};

Non_join_query_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNon_join_query_expression(this);
	}
};

Non_join_query_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNon_join_query_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Non_join_query_expressionContext = Non_join_query_expressionContext;

SQLParser.prototype.non_join_query_expression = function() {

    var localctx = new Non_join_query_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, SQLParser.RULE_non_join_query_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1388;
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1380;
            this.non_join_query_term();
            break;

        case 2:
            this.state = 1381;
            this.joined_table();
            this.state = 1382;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.EXCEPT || _la===SQLParser.UNION)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1384;
            _la = this._input.LA(1);
            if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
                this.state = 1383;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.ALL || _la===SQLParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1386;
            this.query_term();
            break;

        }
        this.state = 1397;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.EXCEPT || _la===SQLParser.UNION) {
            this.state = 1390;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.EXCEPT || _la===SQLParser.UNION)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1392;
            _la = this._input.LA(1);
            if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
                this.state = 1391;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.ALL || _la===SQLParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1394;
            this.query_term();
            this.state = 1399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_termContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_query_term;
    return this;
}

Query_termContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_termContext.prototype.constructor = Query_termContext;

Query_termContext.prototype.non_join_query_term = function() {
    return this.getTypedRuleContext(Non_join_query_termContext,0);
};

Query_termContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Query_termContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuery_term(this);
	}
};

Query_termContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuery_term(this);
	}
};

Query_termContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuery_term(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Query_termContext = Query_termContext;

SQLParser.prototype.query_term = function() {

    var localctx = new Query_termContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, SQLParser.RULE_query_term);
    try {
        this.state = 1402;
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1400;
            this.non_join_query_term();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1401;
            this.joined_table();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_join_query_termContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_non_join_query_term;
    return this;
}

Non_join_query_termContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_join_query_termContext.prototype.constructor = Non_join_query_termContext;

Non_join_query_termContext.prototype.non_join_query_primary = function() {
    return this.getTypedRuleContext(Non_join_query_primaryContext,0);
};

Non_join_query_termContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Non_join_query_termContext.prototype.INTERSECT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.INTERSECT);
    } else {
        return this.getToken(SQLParser.INTERSECT, i);
    }
};


Non_join_query_termContext.prototype.query_primary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_primaryContext);
    } else {
        return this.getTypedRuleContext(Query_primaryContext,i);
    }
};

Non_join_query_termContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.ALL);
    } else {
        return this.getToken(SQLParser.ALL, i);
    }
};


Non_join_query_termContext.prototype.DISTINCT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.DISTINCT);
    } else {
        return this.getToken(SQLParser.DISTINCT, i);
    }
};


Non_join_query_termContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNon_join_query_term(this);
	}
};

Non_join_query_termContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNon_join_query_term(this);
	}
};

Non_join_query_termContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNon_join_query_term(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Non_join_query_termContext = Non_join_query_termContext;

SQLParser.prototype.non_join_query_term = function() {

    var localctx = new Non_join_query_termContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, SQLParser.RULE_non_join_query_term);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1412;
        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1404;
            this.non_join_query_primary();
            break;

        case 2:
            this.state = 1405;
            this.joined_table();
            this.state = 1406;
            this.match(SQLParser.INTERSECT);
            this.state = 1408;
            _la = this._input.LA(1);
            if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
                this.state = 1407;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.ALL || _la===SQLParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1410;
            this.query_primary();
            break;

        }
        this.state = 1421;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.INTERSECT) {
            this.state = 1414;
            this.match(SQLParser.INTERSECT);
            this.state = 1416;
            _la = this._input.LA(1);
            if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
                this.state = 1415;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.ALL || _la===SQLParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1418;
            this.query_primary();
            this.state = 1423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_query_primary;
    return this;
}

Query_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_primaryContext.prototype.constructor = Query_primaryContext;

Query_primaryContext.prototype.non_join_query_primary = function() {
    return this.getTypedRuleContext(Non_join_query_primaryContext,0);
};

Query_primaryContext.prototype.joined_table = function() {
    return this.getTypedRuleContext(Joined_tableContext,0);
};

Query_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuery_primary(this);
	}
};

Query_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuery_primary(this);
	}
};

Query_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuery_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Query_primaryContext = Query_primaryContext;

SQLParser.prototype.query_primary = function() {

    var localctx = new Query_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, SQLParser.RULE_query_primary);
    try {
        this.state = 1426;
        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1424;
            this.non_join_query_primary();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1425;
            this.joined_table();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_join_query_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_non_join_query_primary;
    return this;
}

Non_join_query_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_join_query_primaryContext.prototype.constructor = Non_join_query_primaryContext;

Non_join_query_primaryContext.prototype.simple_table = function() {
    return this.getTypedRuleContext(Simple_tableContext,0);
};

Non_join_query_primaryContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Non_join_query_primaryContext.prototype.non_join_query_expression = function() {
    return this.getTypedRuleContext(Non_join_query_expressionContext,0);
};

Non_join_query_primaryContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Non_join_query_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNon_join_query_primary(this);
	}
};

Non_join_query_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNon_join_query_primary(this);
	}
};

Non_join_query_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNon_join_query_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Non_join_query_primaryContext = Non_join_query_primaryContext;

SQLParser.prototype.non_join_query_primary = function() {

    var localctx = new Non_join_query_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, SQLParser.RULE_non_join_query_primary);
    try {
        this.state = 1433;
        switch(this._input.LA(1)) {
        case SQLParser.SELECT:
        case SQLParser.TABLE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1428;
            this.simple_table();
            break;
        case SQLParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1429;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 1430;
            this.non_join_query_expression();
            this.state = 1431;
            this.match(SQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_simple_table;
    return this;
}

Simple_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_tableContext.prototype.constructor = Simple_tableContext;

Simple_tableContext.prototype.query_specification = function() {
    return this.getTypedRuleContext(Query_specificationContext,0);
};

Simple_tableContext.prototype.explicit_table = function() {
    return this.getTypedRuleContext(Explicit_tableContext,0);
};

Simple_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSimple_table(this);
	}
};

Simple_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSimple_table(this);
	}
};

Simple_tableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSimple_table(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Simple_tableContext = Simple_tableContext;

SQLParser.prototype.simple_table = function() {

    var localctx = new Simple_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, SQLParser.RULE_simple_table);
    try {
        this.state = 1437;
        switch(this._input.LA(1)) {
        case SQLParser.SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1435;
            this.query_specification();
            break;
        case SQLParser.TABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1436;
            this.explicit_table();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explicit_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_explicit_table;
    return this;
}

Explicit_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explicit_tableContext.prototype.constructor = Explicit_tableContext;

Explicit_tableContext.prototype.TABLE = function() {
    return this.getToken(SQLParser.TABLE, 0);
};

Explicit_tableContext.prototype.table_or_query_name = function() {
    return this.getTypedRuleContext(Table_or_query_nameContext,0);
};

Explicit_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExplicit_table(this);
	}
};

Explicit_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExplicit_table(this);
	}
};

Explicit_tableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExplicit_table(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Explicit_tableContext = Explicit_tableContext;

SQLParser.prototype.explicit_table = function() {

    var localctx = new Explicit_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, SQLParser.RULE_explicit_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1439;
        this.match(SQLParser.TABLE);
        this.state = 1440;
        this.table_or_query_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_or_query_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_or_query_name;
    return this;
}

Table_or_query_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_or_query_nameContext.prototype.constructor = Table_or_query_nameContext;

Table_or_query_nameContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Table_or_query_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Table_or_query_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_or_query_name(this);
	}
};

Table_or_query_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_or_query_name(this);
	}
};

Table_or_query_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_or_query_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_or_query_nameContext = Table_or_query_nameContext;

SQLParser.prototype.table_or_query_name = function() {

    var localctx = new Table_or_query_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, SQLParser.RULE_table_or_query_name);
    try {
        this.state = 1444;
        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1442;
            this.table_name();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1443;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_name;
    return this;
}

Table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_nameContext.prototype.constructor = Table_nameContext;

Table_nameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Table_nameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.DOT);
    } else {
        return this.getToken(SQLParser.DOT, i);
    }
};


Table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_name(this);
	}
};

Table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_name(this);
	}
};

Table_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_nameContext = Table_nameContext;

SQLParser.prototype.table_name = function() {

    var localctx = new Table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, SQLParser.RULE_table_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1446;
        this.identifier();
        this.state = 1453;
        _la = this._input.LA(1);
        if(_la===SQLParser.DOT) {
            this.state = 1447;
            this.match(SQLParser.DOT);
            this.state = 1448;
            this.identifier();
            this.state = 1451;
            _la = this._input.LA(1);
            if(_la===SQLParser.DOT) {
                this.state = 1449;
                this.match(SQLParser.DOT);
                this.state = 1450;
                this.identifier();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_query_specification;
    return this;
}

Query_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_specificationContext.prototype.constructor = Query_specificationContext;

Query_specificationContext.prototype.SELECT = function() {
    return this.getToken(SQLParser.SELECT, 0);
};

Query_specificationContext.prototype.select_list = function() {
    return this.getTypedRuleContext(Select_listContext,0);
};

Query_specificationContext.prototype.set_qualifier = function() {
    return this.getTypedRuleContext(Set_qualifierContext,0);
};

Query_specificationContext.prototype.table_expression = function() {
    return this.getTypedRuleContext(Table_expressionContext,0);
};

Query_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuery_specification(this);
	}
};

Query_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuery_specification(this);
	}
};

Query_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuery_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Query_specificationContext = Query_specificationContext;

SQLParser.prototype.query_specification = function() {

    var localctx = new Query_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, SQLParser.RULE_query_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1455;
        this.match(SQLParser.SELECT);
        this.state = 1457;
        _la = this._input.LA(1);
        if(_la===SQLParser.ALL || _la===SQLParser.DISTINCT) {
            this.state = 1456;
            this.set_qualifier();
        }

        this.state = 1459;
        this.select_list();
        this.state = 1461;
        _la = this._input.LA(1);
        if(_la===SQLParser.FROM) {
            this.state = 1460;
            this.table_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_select_list;
    return this;
}

Select_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_listContext.prototype.constructor = Select_listContext;

Select_listContext.prototype.select_sublist = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_sublistContext);
    } else {
        return this.getTypedRuleContext(Select_sublistContext,i);
    }
};

Select_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Select_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSelect_list(this);
	}
};

Select_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSelect_list(this);
	}
};

Select_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSelect_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Select_listContext = Select_listContext;

SQLParser.prototype.select_list = function() {

    var localctx = new Select_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, SQLParser.RULE_select_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1463;
        this.select_sublist();
        this.state = 1468;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1464;
            this.match(SQLParser.COMMA);
            this.state = 1465;
            this.select_sublist();
            this.state = 1470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_sublistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_select_sublist;
    return this;
}

Select_sublistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_sublistContext.prototype.constructor = Select_sublistContext;

Select_sublistContext.prototype.derived_column = function() {
    return this.getTypedRuleContext(Derived_columnContext,0);
};

Select_sublistContext.prototype.qualified_asterisk = function() {
    return this.getTypedRuleContext(Qualified_asteriskContext,0);
};

Select_sublistContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSelect_sublist(this);
	}
};

Select_sublistContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSelect_sublist(this);
	}
};

Select_sublistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSelect_sublist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Select_sublistContext = Select_sublistContext;

SQLParser.prototype.select_sublist = function() {

    var localctx = new Select_sublistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, SQLParser.RULE_select_sublist);
    try {
        this.state = 1473;
        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1471;
            this.derived_column();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1472;
            this.qualified_asterisk();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_derived_column;
    return this;
}

Derived_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_columnContext.prototype.constructor = Derived_columnContext;

Derived_columnContext.prototype.value_expression = function() {
    return this.getTypedRuleContext(Value_expressionContext,0);
};

Derived_columnContext.prototype.as_clause = function() {
    return this.getTypedRuleContext(As_clauseContext,0);
};

Derived_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDerived_column(this);
	}
};

Derived_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDerived_column(this);
	}
};

Derived_columnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitDerived_column(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Derived_columnContext = Derived_columnContext;

SQLParser.prototype.derived_column = function() {

    var localctx = new Derived_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, SQLParser.RULE_derived_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1475;
        this.value_expression();
        this.state = 1477;
        _la = this._input.LA(1);
        if(_la===SQLParser.AS || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (SQLParser.AVG - 54)) | (1 << (SQLParser.BETWEEN - 54)) | (1 << (SQLParser.BY - 54)) | (1 << (SQLParser.CENTURY - 54)) | (1 << (SQLParser.CHARACTER - 54)) | (1 << (SQLParser.COLLECT - 54)) | (1 << (SQLParser.COALESCE - 54)) | (1 << (SQLParser.COLUMN - 54)) | (1 << (SQLParser.COUNT - 54)) | (1 << (SQLParser.CUBE - 54)) | (1 << (SQLParser.DAY - 54)) | (1 << (SQLParser.DEC - 54)) | (1 << (SQLParser.DECADE - 54)) | (1 << (SQLParser.DOW - 54)) | (1 << (SQLParser.DOY - 54)) | (1 << (SQLParser.DROP - 54)) | (1 << (SQLParser.EPOCH - 54)) | (1 << (SQLParser.EVERY - 54)) | (1 << (SQLParser.EXISTS - 54)) | (1 << (SQLParser.EXTERNAL - 54)) | (1 << (SQLParser.EXTRACT - 54)) | (1 << (SQLParser.FILTER - 54)) | (1 << (SQLParser.FIRST - 54)) | (1 << (SQLParser.FORMAT - 54)) | (1 << (SQLParser.FUSION - 54)) | (1 << (SQLParser.GROUPING - 54)) | (1 << (SQLParser.HASH - 54)) | (1 << (SQLParser.INDEX - 54)) | (1 << (SQLParser.INSERT - 54)) | (1 << (SQLParser.INTERSECTION - 54)) | (1 << (SQLParser.ISODOW - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (SQLParser.ISOYEAR - 86)) | (1 << (SQLParser.LAST - 86)) | (1 << (SQLParser.LESS - 86)) | (1 << (SQLParser.LIST - 86)) | (1 << (SQLParser.LOCATION - 86)) | (1 << (SQLParser.MAX - 86)) | (1 << (SQLParser.MAXVALUE - 86)) | (1 << (SQLParser.MICROSECONDS - 86)) | (1 << (SQLParser.MILLENNIUM - 86)) | (1 << (SQLParser.MILLISECONDS - 86)) | (1 << (SQLParser.MIN - 86)) | (1 << (SQLParser.MINUTE - 86)) | (1 << (SQLParser.MONTH - 86)) | (1 << (SQLParser.NATIONAL - 86)) | (1 << (SQLParser.NULLIF - 86)) | (1 << (SQLParser.OVERWRITE - 86)) | (1 << (SQLParser.PARTITION - 86)) | (1 << (SQLParser.PARTITIONS - 86)) | (1 << (SQLParser.PRECISION - 86)) | (1 << (SQLParser.PURGE - 86)) | (1 << (SQLParser.QUARTER - 86)) | (1 << (SQLParser.RANGE - 86)) | (1 << (SQLParser.REGEXP - 86)) | (1 << (SQLParser.RLIKE - 86)) | (1 << (SQLParser.ROLLUP - 86)) | (1 << (SQLParser.SECOND - 86)) | (1 << (SQLParser.SET - 86)) | (1 << (SQLParser.SIMILAR - 86)) | (1 << (SQLParser.STDDEV_POP - 86)) | (1 << (SQLParser.STDDEV_SAMP - 86)) | (1 << (SQLParser.SUBPARTITION - 86)) | (1 << (SQLParser.SUM - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (SQLParser.TABLESPACE - 118)) | (1 << (SQLParser.THAN - 118)) | (1 << (SQLParser.TIMEZONE - 118)) | (1 << (SQLParser.TIMEZONE_HOUR - 118)) | (1 << (SQLParser.TIMEZONE_MINUTE - 118)) | (1 << (SQLParser.TRIM - 118)) | (1 << (SQLParser.TO - 118)) | (1 << (SQLParser.UNKNOWN - 118)) | (1 << (SQLParser.VALUES - 118)) | (1 << (SQLParser.VAR_SAMP - 118)) | (1 << (SQLParser.VAR_POP - 118)) | (1 << (SQLParser.VARYING - 118)) | (1 << (SQLParser.WEEK - 118)) | (1 << (SQLParser.YEAR - 118)) | (1 << (SQLParser.ZONE - 118)) | (1 << (SQLParser.BOOLEAN - 118)) | (1 << (SQLParser.BOOL - 118)) | (1 << (SQLParser.BIT - 118)) | (1 << (SQLParser.VARBIT - 118)) | (1 << (SQLParser.INT1 - 118)) | (1 << (SQLParser.INT2 - 118)) | (1 << (SQLParser.INT4 - 118)) | (1 << (SQLParser.INT8 - 118)) | (1 << (SQLParser.TINYINT - 118)) | (1 << (SQLParser.SMALLINT - 118)) | (1 << (SQLParser.INT - 118)) | (1 << (SQLParser.INTEGER - 118)) | (1 << (SQLParser.BIGINT - 118)) | (1 << (SQLParser.FLOAT4 - 118)) | (1 << (SQLParser.FLOAT8 - 118)) | (1 << (SQLParser.REAL - 118)) | (1 << (SQLParser.FLOAT - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (SQLParser.DOUBLE - 150)) | (1 << (SQLParser.NUMERIC - 150)) | (1 << (SQLParser.DECIMAL - 150)) | (1 << (SQLParser.CHAR - 150)) | (1 << (SQLParser.VARCHAR - 150)) | (1 << (SQLParser.NCHAR - 150)) | (1 << (SQLParser.NVARCHAR - 150)) | (1 << (SQLParser.DATE - 150)) | (1 << (SQLParser.TIME - 150)) | (1 << (SQLParser.TIMETZ - 150)) | (1 << (SQLParser.TIMESTAMP - 150)) | (1 << (SQLParser.TIMESTAMPTZ - 150)) | (1 << (SQLParser.TEXT - 150)) | (1 << (SQLParser.VARBINARY - 150)) | (1 << (SQLParser.BLOB - 150)) | (1 << (SQLParser.BYTEA - 150)) | (1 << (SQLParser.INET4 - 150)))) !== 0) || _la===SQLParser.Identifier) {
            this.state = 1476;
            this.as_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Qualified_asteriskContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_qualified_asterisk;
    this.tb_name = null; // Token
    return this;
}

Qualified_asteriskContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_asteriskContext.prototype.constructor = Qualified_asteriskContext;

Qualified_asteriskContext.prototype.MULTIPLY = function() {
    return this.getToken(SQLParser.MULTIPLY, 0);
};

Qualified_asteriskContext.prototype.DOT = function() {
    return this.getToken(SQLParser.DOT, 0);
};

Qualified_asteriskContext.prototype.Identifier = function() {
    return this.getToken(SQLParser.Identifier, 0);
};

Qualified_asteriskContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQualified_asterisk(this);
	}
};

Qualified_asteriskContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQualified_asterisk(this);
	}
};

Qualified_asteriskContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQualified_asterisk(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Qualified_asteriskContext = Qualified_asteriskContext;

SQLParser.prototype.qualified_asterisk = function() {

    var localctx = new Qualified_asteriskContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, SQLParser.RULE_qualified_asterisk);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1481;
        _la = this._input.LA(1);
        if(_la===SQLParser.Identifier) {
            this.state = 1479;
            localctx.tb_name = this.match(SQLParser.Identifier);
            this.state = 1480;
            this.match(SQLParser.DOT);
        }

        this.state = 1483;
        this.match(SQLParser.MULTIPLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_qualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_set_qualifier;
    return this;
}

Set_qualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_qualifierContext.prototype.constructor = Set_qualifierContext;

Set_qualifierContext.prototype.DISTINCT = function() {
    return this.getToken(SQLParser.DISTINCT, 0);
};

Set_qualifierContext.prototype.ALL = function() {
    return this.getToken(SQLParser.ALL, 0);
};

Set_qualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSet_qualifier(this);
	}
};

Set_qualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSet_qualifier(this);
	}
};

Set_qualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSet_qualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Set_qualifierContext = Set_qualifierContext;

SQLParser.prototype.set_qualifier = function() {

    var localctx = new Set_qualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, SQLParser.RULE_set_qualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1485;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.ALL || _la===SQLParser.DISTINCT)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_referenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_reference;
    this.tb_name = null; // IdentifierContext
    this.name = null; // IdentifierContext
    return this;
}

Column_referenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_referenceContext.prototype.constructor = Column_referenceContext;

Column_referenceContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Column_referenceContext.prototype.DOT = function() {
    return this.getToken(SQLParser.DOT, 0);
};

Column_referenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumn_reference(this);
	}
};

Column_referenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumn_reference(this);
	}
};

Column_referenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitColumn_reference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Column_referenceContext = Column_referenceContext;

SQLParser.prototype.column_reference = function() {

    var localctx = new Column_referenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, SQLParser.RULE_column_reference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1490;
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        if(la_===1) {
            this.state = 1487;
            localctx.tb_name = this.identifier();
            this.state = 1488;
            this.match(SQLParser.DOT);

        }
        this.state = 1492;
        localctx.name = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function As_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_as_clause;
    return this;
}

As_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
As_clauseContext.prototype.constructor = As_clauseContext;

As_clauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

As_clauseContext.prototype.AS = function() {
    return this.getToken(SQLParser.AS, 0);
};

As_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterAs_clause(this);
	}
};

As_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitAs_clause(this);
	}
};

As_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitAs_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.As_clauseContext = As_clauseContext;

SQLParser.prototype.as_clause = function() {

    var localctx = new As_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, SQLParser.RULE_as_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1495;
        _la = this._input.LA(1);
        if(_la===SQLParser.AS) {
            this.state = 1494;
            this.match(SQLParser.AS);
        }

        this.state = 1497;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_reference_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_reference_list;
    return this;
}

Column_reference_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_reference_listContext.prototype.constructor = Column_reference_listContext;

Column_reference_listContext.prototype.column_reference = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_referenceContext);
    } else {
        return this.getTypedRuleContext(Column_referenceContext,i);
    }
};

Column_reference_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Column_reference_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumn_reference_list(this);
	}
};

Column_reference_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumn_reference_list(this);
	}
};

Column_reference_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitColumn_reference_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Column_reference_listContext = Column_reference_listContext;

SQLParser.prototype.column_reference_list = function() {

    var localctx = new Column_reference_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, SQLParser.RULE_column_reference_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1499;
        this.column_reference();
        this.state = 1504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1500;
            this.match(SQLParser.COMMA);
            this.state = 1501;
            this.column_reference();
            this.state = 1506;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Scalar_subqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_scalar_subquery;
    return this;
}

Scalar_subqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Scalar_subqueryContext.prototype.constructor = Scalar_subqueryContext;

Scalar_subqueryContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Scalar_subqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterScalar_subquery(this);
	}
};

Scalar_subqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitScalar_subquery(this);
	}
};

Scalar_subqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitScalar_subquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Scalar_subqueryContext = Scalar_subqueryContext;

SQLParser.prototype.scalar_subquery = function() {

    var localctx = new Scalar_subqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, SQLParser.RULE_scalar_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1507;
        this.subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_subqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_row_subquery;
    return this;
}

Row_subqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_subqueryContext.prototype.constructor = Row_subqueryContext;

Row_subqueryContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Row_subqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRow_subquery(this);
	}
};

Row_subqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRow_subquery(this);
	}
};

Row_subqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRow_subquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Row_subqueryContext = Row_subqueryContext;

SQLParser.prototype.row_subquery = function() {

    var localctx = new Row_subqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, SQLParser.RULE_row_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1509;
        this.subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_subqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_subquery;
    return this;
}

Table_subqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_subqueryContext.prototype.constructor = Table_subqueryContext;

Table_subqueryContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Table_subqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTable_subquery(this);
	}
};

Table_subqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTable_subquery(this);
	}
};

Table_subqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitTable_subquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Table_subqueryContext = Table_subqueryContext;

SQLParser.prototype.table_subquery = function() {

    var localctx = new Table_subqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, SQLParser.RULE_table_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1511;
        this.subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_subquery;
    return this;
}

SubqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SubqueryContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

SubqueryContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

SubqueryContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSubquery(this);
	}
};

SubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSubquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.SubqueryContext = SubqueryContext;

SQLParser.prototype.subquery = function() {

    var localctx = new SubqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, SQLParser.RULE_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1513;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1514;
        this.query_expression();
        this.state = 1515;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.comparison_predicate = function() {
    return this.getTypedRuleContext(Comparison_predicateContext,0);
};

PredicateContext.prototype.between_predicate = function() {
    return this.getTypedRuleContext(Between_predicateContext,0);
};

PredicateContext.prototype.in_predicate = function() {
    return this.getTypedRuleContext(In_predicateContext,0);
};

PredicateContext.prototype.pattern_matching_predicate = function() {
    return this.getTypedRuleContext(Pattern_matching_predicateContext,0);
};

PredicateContext.prototype.null_predicate = function() {
    return this.getTypedRuleContext(Null_predicateContext,0);
};

PredicateContext.prototype.exists_predicate = function() {
    return this.getTypedRuleContext(Exists_predicateContext,0);
};

PredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPredicate(this);
	}
};

PredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPredicate(this);
	}
};

PredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.PredicateContext = PredicateContext;

SQLParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, SQLParser.RULE_predicate);
    try {
        this.state = 1523;
        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1517;
            this.comparison_predicate();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1518;
            this.between_predicate();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1519;
            this.in_predicate();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1520;
            this.pattern_matching_predicate();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1521;
            this.null_predicate();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1522;
            this.exists_predicate();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comparison_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_comparison_predicate;
    this.left = null; // Row_value_predicandContext
    this.c = null; // Comp_opContext
    this.right = null; // Row_value_predicandContext
    return this;
}

Comparison_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comparison_predicateContext.prototype.constructor = Comparison_predicateContext;

Comparison_predicateContext.prototype.row_value_predicand = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Row_value_predicandContext);
    } else {
        return this.getTypedRuleContext(Row_value_predicandContext,i);
    }
};

Comparison_predicateContext.prototype.comp_op = function() {
    return this.getTypedRuleContext(Comp_opContext,0);
};

Comparison_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterComparison_predicate(this);
	}
};

Comparison_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitComparison_predicate(this);
	}
};

Comparison_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitComparison_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Comparison_predicateContext = Comparison_predicateContext;

SQLParser.prototype.comparison_predicate = function() {

    var localctx = new Comparison_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, SQLParser.RULE_comparison_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1525;
        localctx.left = this.row_value_predicand();
        this.state = 1526;
        localctx.c = this.comp_op();
        this.state = 1527;
        localctx.right = this.row_value_predicand();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_comp_op;
    return this;
}

Comp_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_opContext.prototype.constructor = Comp_opContext;

Comp_opContext.prototype.EQUAL = function() {
    return this.getToken(SQLParser.EQUAL, 0);
};

Comp_opContext.prototype.NOT_EQUAL = function() {
    return this.getToken(SQLParser.NOT_EQUAL, 0);
};

Comp_opContext.prototype.LTH = function() {
    return this.getToken(SQLParser.LTH, 0);
};

Comp_opContext.prototype.LEQ = function() {
    return this.getToken(SQLParser.LEQ, 0);
};

Comp_opContext.prototype.GTH = function() {
    return this.getToken(SQLParser.GTH, 0);
};

Comp_opContext.prototype.GEQ = function() {
    return this.getToken(SQLParser.GEQ, 0);
};

Comp_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterComp_op(this);
	}
};

Comp_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitComp_op(this);
	}
};

Comp_opContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitComp_op(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Comp_opContext = Comp_opContext;

SQLParser.prototype.comp_op = function() {

    var localctx = new Comp_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, SQLParser.RULE_comp_op);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1529;
        _la = this._input.LA(1);
        if(!(((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (SQLParser.EQUAL - 174)) | (1 << (SQLParser.NOT_EQUAL - 174)) | (1 << (SQLParser.LTH - 174)) | (1 << (SQLParser.LEQ - 174)) | (1 << (SQLParser.GTH - 174)) | (1 << (SQLParser.GEQ - 174)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Between_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_between_predicate;
    this.predicand = null; // Row_value_predicandContext
    return this;
}

Between_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Between_predicateContext.prototype.constructor = Between_predicateContext;

Between_predicateContext.prototype.between_predicate_part_2 = function() {
    return this.getTypedRuleContext(Between_predicate_part_2Context,0);
};

Between_predicateContext.prototype.row_value_predicand = function() {
    return this.getTypedRuleContext(Row_value_predicandContext,0);
};

Between_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBetween_predicate(this);
	}
};

Between_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBetween_predicate(this);
	}
};

Between_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBetween_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Between_predicateContext = Between_predicateContext;

SQLParser.prototype.between_predicate = function() {

    var localctx = new Between_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, SQLParser.RULE_between_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1531;
        localctx.predicand = this.row_value_predicand();
        this.state = 1532;
        this.between_predicate_part_2();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Between_predicate_part_2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_between_predicate_part_2;
    this.begin = null; // Row_value_predicandContext
    this.end = null; // Row_value_predicandContext
    return this;
}

Between_predicate_part_2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Between_predicate_part_2Context.prototype.constructor = Between_predicate_part_2Context;

Between_predicate_part_2Context.prototype.BETWEEN = function() {
    return this.getToken(SQLParser.BETWEEN, 0);
};

Between_predicate_part_2Context.prototype.AND = function() {
    return this.getToken(SQLParser.AND, 0);
};

Between_predicate_part_2Context.prototype.row_value_predicand = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Row_value_predicandContext);
    } else {
        return this.getTypedRuleContext(Row_value_predicandContext,i);
    }
};

Between_predicate_part_2Context.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Between_predicate_part_2Context.prototype.ASYMMETRIC = function() {
    return this.getToken(SQLParser.ASYMMETRIC, 0);
};

Between_predicate_part_2Context.prototype.SYMMETRIC = function() {
    return this.getToken(SQLParser.SYMMETRIC, 0);
};

Between_predicate_part_2Context.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterBetween_predicate_part_2(this);
	}
};

Between_predicate_part_2Context.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitBetween_predicate_part_2(this);
	}
};

Between_predicate_part_2Context.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitBetween_predicate_part_2(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Between_predicate_part_2Context = Between_predicate_part_2Context;

SQLParser.prototype.between_predicate_part_2 = function() {

    var localctx = new Between_predicate_part_2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 344, SQLParser.RULE_between_predicate_part_2);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1535;
        _la = this._input.LA(1);
        if(_la===SQLParser.NOT) {
            this.state = 1534;
            this.match(SQLParser.NOT);
        }

        this.state = 1537;
        this.match(SQLParser.BETWEEN);
        this.state = 1539;
        _la = this._input.LA(1);
        if(_la===SQLParser.ASYMMETRIC || _la===SQLParser.SYMMETRIC) {
            this.state = 1538;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.ASYMMETRIC || _la===SQLParser.SYMMETRIC)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 1541;
        localctx.begin = this.row_value_predicand();
        this.state = 1542;
        this.match(SQLParser.AND);
        this.state = 1543;
        localctx.end = this.row_value_predicand();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function In_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_in_predicate;
    this.predicand = null; // Numeric_value_expressionContext
    return this;
}

In_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
In_predicateContext.prototype.constructor = In_predicateContext;

In_predicateContext.prototype.IN = function() {
    return this.getToken(SQLParser.IN, 0);
};

In_predicateContext.prototype.in_predicate_value = function() {
    return this.getTypedRuleContext(In_predicate_valueContext,0);
};

In_predicateContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

In_predicateContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

In_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIn_predicate(this);
	}
};

In_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIn_predicate(this);
	}
};

In_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIn_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.In_predicateContext = In_predicateContext;

SQLParser.prototype.in_predicate = function() {

    var localctx = new In_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, SQLParser.RULE_in_predicate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1545;
        localctx.predicand = this.numeric_value_expression();
        this.state = 1547;
        _la = this._input.LA(1);
        if(_la===SQLParser.NOT) {
            this.state = 1546;
            this.match(SQLParser.NOT);
        }

        this.state = 1549;
        this.match(SQLParser.IN);
        this.state = 1550;
        this.in_predicate_value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function In_predicate_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_in_predicate_value;
    return this;
}

In_predicate_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
In_predicate_valueContext.prototype.constructor = In_predicate_valueContext;

In_predicate_valueContext.prototype.table_subquery = function() {
    return this.getTypedRuleContext(Table_subqueryContext,0);
};

In_predicate_valueContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

In_predicate_valueContext.prototype.in_value_list = function() {
    return this.getTypedRuleContext(In_value_listContext,0);
};

In_predicate_valueContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

In_predicate_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIn_predicate_value(this);
	}
};

In_predicate_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIn_predicate_value(this);
	}
};

In_predicate_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIn_predicate_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.In_predicate_valueContext = In_predicate_valueContext;

SQLParser.prototype.in_predicate_value = function() {

    var localctx = new In_predicate_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, SQLParser.RULE_in_predicate_value);
    try {
        this.state = 1557;
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1552;
            this.table_subquery();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1553;
            this.match(SQLParser.LEFT_PAREN);
            this.state = 1554;
            this.in_value_list();
            this.state = 1555;
            this.match(SQLParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function In_value_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_in_value_list;
    return this;
}

In_value_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
In_value_listContext.prototype.constructor = In_value_listContext;

In_value_listContext.prototype.row_value_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Row_value_expressionContext);
    } else {
        return this.getTypedRuleContext(Row_value_expressionContext,i);
    }
};

In_value_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


In_value_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIn_value_list(this);
	}
};

In_value_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIn_value_list(this);
	}
};

In_value_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitIn_value_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.In_value_listContext = In_value_listContext;

SQLParser.prototype.in_value_list = function() {

    var localctx = new In_value_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, SQLParser.RULE_in_value_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1559;
        this.row_value_expression();
        this.state = 1564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1560;
            this.match(SQLParser.COMMA);
            this.state = 1561;
            this.row_value_expression();
            this.state = 1566;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pattern_matching_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_pattern_matching_predicate;
    this.f = null; // Row_value_predicandContext
    this.s = null; // Token
    return this;
}

Pattern_matching_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_matching_predicateContext.prototype.constructor = Pattern_matching_predicateContext;

Pattern_matching_predicateContext.prototype.pattern_matcher = function() {
    return this.getTypedRuleContext(Pattern_matcherContext,0);
};

Pattern_matching_predicateContext.prototype.row_value_predicand = function() {
    return this.getTypedRuleContext(Row_value_predicandContext,0);
};

Pattern_matching_predicateContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Pattern_matching_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPattern_matching_predicate(this);
	}
};

Pattern_matching_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPattern_matching_predicate(this);
	}
};

Pattern_matching_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPattern_matching_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Pattern_matching_predicateContext = Pattern_matching_predicateContext;

SQLParser.prototype.pattern_matching_predicate = function() {

    var localctx = new Pattern_matching_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, SQLParser.RULE_pattern_matching_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1567;
        localctx.f = this.row_value_predicand();
        this.state = 1568;
        this.pattern_matcher();
        this.state = 1569;
        localctx.s = this.match(SQLParser.Character_String_Literal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pattern_matcherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_pattern_matcher;
    return this;
}

Pattern_matcherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_matcherContext.prototype.constructor = Pattern_matcherContext;

Pattern_matcherContext.prototype.negativable_matcher = function() {
    return this.getTypedRuleContext(Negativable_matcherContext,0);
};

Pattern_matcherContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Pattern_matcherContext.prototype.regex_matcher = function() {
    return this.getTypedRuleContext(Regex_matcherContext,0);
};

Pattern_matcherContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPattern_matcher(this);
	}
};

Pattern_matcherContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPattern_matcher(this);
	}
};

Pattern_matcherContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPattern_matcher(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Pattern_matcherContext = Pattern_matcherContext;

SQLParser.prototype.pattern_matcher = function() {

    var localctx = new Pattern_matcherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, SQLParser.RULE_pattern_matcher);
    var _la = 0; // Token type
    try {
        this.state = 1576;
        switch(this._input.LA(1)) {
        case SQLParser.ILIKE:
        case SQLParser.LIKE:
        case SQLParser.NOT:
        case SQLParser.REGEXP:
        case SQLParser.RLIKE:
        case SQLParser.SIMILAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 1572;
            _la = this._input.LA(1);
            if(_la===SQLParser.NOT) {
                this.state = 1571;
                this.match(SQLParser.NOT);
            }

            this.state = 1574;
            this.negativable_matcher();
            break;
        case SQLParser.Similar_To:
        case SQLParser.Not_Similar_To:
        case SQLParser.Similar_To_Case_Insensitive:
        case SQLParser.Not_Similar_To_Case_Insensitive:
            this.enterOuterAlt(localctx, 2);
            this.state = 1575;
            this.regex_matcher();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Negativable_matcherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_negativable_matcher;
    return this;
}

Negativable_matcherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Negativable_matcherContext.prototype.constructor = Negativable_matcherContext;

Negativable_matcherContext.prototype.LIKE = function() {
    return this.getToken(SQLParser.LIKE, 0);
};

Negativable_matcherContext.prototype.ILIKE = function() {
    return this.getToken(SQLParser.ILIKE, 0);
};

Negativable_matcherContext.prototype.SIMILAR = function() {
    return this.getToken(SQLParser.SIMILAR, 0);
};

Negativable_matcherContext.prototype.TO = function() {
    return this.getToken(SQLParser.TO, 0);
};

Negativable_matcherContext.prototype.REGEXP = function() {
    return this.getToken(SQLParser.REGEXP, 0);
};

Negativable_matcherContext.prototype.RLIKE = function() {
    return this.getToken(SQLParser.RLIKE, 0);
};

Negativable_matcherContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNegativable_matcher(this);
	}
};

Negativable_matcherContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNegativable_matcher(this);
	}
};

Negativable_matcherContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNegativable_matcher(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Negativable_matcherContext = Negativable_matcherContext;

SQLParser.prototype.negativable_matcher = function() {

    var localctx = new Negativable_matcherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, SQLParser.RULE_negativable_matcher);
    try {
        this.state = 1584;
        switch(this._input.LA(1)) {
        case SQLParser.LIKE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1578;
            this.match(SQLParser.LIKE);
            break;
        case SQLParser.ILIKE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1579;
            this.match(SQLParser.ILIKE);
            break;
        case SQLParser.SIMILAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 1580;
            this.match(SQLParser.SIMILAR);
            this.state = 1581;
            this.match(SQLParser.TO);
            break;
        case SQLParser.REGEXP:
            this.enterOuterAlt(localctx, 4);
            this.state = 1582;
            this.match(SQLParser.REGEXP);
            break;
        case SQLParser.RLIKE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1583;
            this.match(SQLParser.RLIKE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Regex_matcherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_regex_matcher;
    return this;
}

Regex_matcherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Regex_matcherContext.prototype.constructor = Regex_matcherContext;

Regex_matcherContext.prototype.Similar_To = function() {
    return this.getToken(SQLParser.Similar_To, 0);
};

Regex_matcherContext.prototype.Not_Similar_To = function() {
    return this.getToken(SQLParser.Not_Similar_To, 0);
};

Regex_matcherContext.prototype.Similar_To_Case_Insensitive = function() {
    return this.getToken(SQLParser.Similar_To_Case_Insensitive, 0);
};

Regex_matcherContext.prototype.Not_Similar_To_Case_Insensitive = function() {
    return this.getToken(SQLParser.Not_Similar_To_Case_Insensitive, 0);
};

Regex_matcherContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRegex_matcher(this);
	}
};

Regex_matcherContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRegex_matcher(this);
	}
};

Regex_matcherContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRegex_matcher(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Regex_matcherContext = Regex_matcherContext;

SQLParser.prototype.regex_matcher = function() {

    var localctx = new Regex_matcherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, SQLParser.RULE_regex_matcher);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1586;
        _la = this._input.LA(1);
        if(!(((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (SQLParser.Similar_To - 168)) | (1 << (SQLParser.Not_Similar_To - 168)) | (1 << (SQLParser.Similar_To_Case_Insensitive - 168)) | (1 << (SQLParser.Not_Similar_To_Case_Insensitive - 168)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_null_predicate;
    this.predicand = null; // Row_value_predicandContext
    this.n = null; // Token
    return this;
}

Null_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_predicateContext.prototype.constructor = Null_predicateContext;

Null_predicateContext.prototype.IS = function() {
    return this.getToken(SQLParser.IS, 0);
};

Null_predicateContext.prototype.NULL = function() {
    return this.getToken(SQLParser.NULL, 0);
};

Null_predicateContext.prototype.row_value_predicand = function() {
    return this.getTypedRuleContext(Row_value_predicandContext,0);
};

Null_predicateContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Null_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNull_predicate(this);
	}
};

Null_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNull_predicate(this);
	}
};

Null_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNull_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Null_predicateContext = Null_predicateContext;

SQLParser.prototype.null_predicate = function() {

    var localctx = new Null_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, SQLParser.RULE_null_predicate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1588;
        localctx.predicand = this.row_value_predicand();
        this.state = 1589;
        this.match(SQLParser.IS);
        this.state = 1591;
        _la = this._input.LA(1);
        if(_la===SQLParser.NOT) {
            this.state = 1590;
            localctx.n = this.match(SQLParser.NOT);
        }

        this.state = 1593;
        this.match(SQLParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Quantified_comparison_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_quantified_comparison_predicate;
    this.l = null; // Numeric_value_expressionContext
    this.c = null; // Comp_opContext
    this.q = null; // QuantifierContext
    this.s = null; // Table_subqueryContext
    return this;
}

Quantified_comparison_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quantified_comparison_predicateContext.prototype.constructor = Quantified_comparison_predicateContext;

Quantified_comparison_predicateContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

Quantified_comparison_predicateContext.prototype.comp_op = function() {
    return this.getTypedRuleContext(Comp_opContext,0);
};

Quantified_comparison_predicateContext.prototype.quantifier = function() {
    return this.getTypedRuleContext(QuantifierContext,0);
};

Quantified_comparison_predicateContext.prototype.table_subquery = function() {
    return this.getTypedRuleContext(Table_subqueryContext,0);
};

Quantified_comparison_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuantified_comparison_predicate(this);
	}
};

Quantified_comparison_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuantified_comparison_predicate(this);
	}
};

Quantified_comparison_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuantified_comparison_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Quantified_comparison_predicateContext = Quantified_comparison_predicateContext;

SQLParser.prototype.quantified_comparison_predicate = function() {

    var localctx = new Quantified_comparison_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, SQLParser.RULE_quantified_comparison_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1595;
        localctx.l = this.numeric_value_expression();
        this.state = 1596;
        localctx.c = this.comp_op();
        this.state = 1597;
        localctx.q = this.quantifier();
        this.state = 1598;
        localctx.s = this.table_subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_quantifier;
    return this;
}

QuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuantifierContext.prototype.constructor = QuantifierContext;

QuantifierContext.prototype.all = function() {
    return this.getTypedRuleContext(AllContext,0);
};

QuantifierContext.prototype.some = function() {
    return this.getTypedRuleContext(SomeContext,0);
};

QuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterQuantifier(this);
	}
};

QuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitQuantifier(this);
	}
};

QuantifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitQuantifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.QuantifierContext = QuantifierContext;

SQLParser.prototype.quantifier = function() {

    var localctx = new QuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, SQLParser.RULE_quantifier);
    try {
        this.state = 1602;
        switch(this._input.LA(1)) {
        case SQLParser.ALL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1600;
            this.all();
            break;
        case SQLParser.ANY:
        case SQLParser.SOME:
            this.enterOuterAlt(localctx, 2);
            this.state = 1601;
            this.some();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AllContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_all;
    return this;
}

AllContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllContext.prototype.constructor = AllContext;

AllContext.prototype.ALL = function() {
    return this.getToken(SQLParser.ALL, 0);
};

AllContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterAll(this);
	}
};

AllContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitAll(this);
	}
};

AllContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitAll(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.AllContext = AllContext;

SQLParser.prototype.all = function() {

    var localctx = new AllContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, SQLParser.RULE_all);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1604;
        this.match(SQLParser.ALL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SomeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_some;
    return this;
}

SomeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SomeContext.prototype.constructor = SomeContext;

SomeContext.prototype.SOME = function() {
    return this.getToken(SQLParser.SOME, 0);
};

SomeContext.prototype.ANY = function() {
    return this.getToken(SQLParser.ANY, 0);
};

SomeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSome(this);
	}
};

SomeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSome(this);
	}
};

SomeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSome(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.SomeContext = SomeContext;

SQLParser.prototype.some = function() {

    var localctx = new SomeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, SQLParser.RULE_some);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1606;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.ANY || _la===SQLParser.SOME)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exists_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_exists_predicate;
    this.s = null; // Table_subqueryContext
    return this;
}

Exists_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exists_predicateContext.prototype.constructor = Exists_predicateContext;

Exists_predicateContext.prototype.EXISTS = function() {
    return this.getToken(SQLParser.EXISTS, 0);
};

Exists_predicateContext.prototype.table_subquery = function() {
    return this.getTypedRuleContext(Table_subqueryContext,0);
};

Exists_predicateContext.prototype.NOT = function() {
    return this.getToken(SQLParser.NOT, 0);
};

Exists_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExists_predicate(this);
	}
};

Exists_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExists_predicate(this);
	}
};

Exists_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExists_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Exists_predicateContext = Exists_predicateContext;

SQLParser.prototype.exists_predicate = function() {

    var localctx = new Exists_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, SQLParser.RULE_exists_predicate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1609;
        _la = this._input.LA(1);
        if(_la===SQLParser.NOT) {
            this.state = 1608;
            this.match(SQLParser.NOT);
        }

        this.state = 1611;
        this.match(SQLParser.EXISTS);
        this.state = 1612;
        localctx.s = this.table_subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unique_predicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_unique_predicate;
    this.s = null; // Table_subqueryContext
    return this;
}

Unique_predicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unique_predicateContext.prototype.constructor = Unique_predicateContext;

Unique_predicateContext.prototype.UNIQUE = function() {
    return this.getToken(SQLParser.UNIQUE, 0);
};

Unique_predicateContext.prototype.table_subquery = function() {
    return this.getTypedRuleContext(Table_subqueryContext,0);
};

Unique_predicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUnique_predicate(this);
	}
};

Unique_predicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUnique_predicate(this);
	}
};

Unique_predicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitUnique_predicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Unique_predicateContext = Unique_predicateContext;

SQLParser.prototype.unique_predicate = function() {

    var localctx = new Unique_predicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, SQLParser.RULE_unique_predicate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1614;
        this.match(SQLParser.UNIQUE);
        this.state = 1615;
        localctx.s = this.table_subquery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Primary_datetime_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_primary_datetime_field;
    return this;
}

Primary_datetime_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_datetime_fieldContext.prototype.constructor = Primary_datetime_fieldContext;

Primary_datetime_fieldContext.prototype.non_second_primary_datetime_field = function() {
    return this.getTypedRuleContext(Non_second_primary_datetime_fieldContext,0);
};

Primary_datetime_fieldContext.prototype.SECOND = function() {
    return this.getToken(SQLParser.SECOND, 0);
};

Primary_datetime_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPrimary_datetime_field(this);
	}
};

Primary_datetime_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPrimary_datetime_field(this);
	}
};

Primary_datetime_fieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitPrimary_datetime_field(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Primary_datetime_fieldContext = Primary_datetime_fieldContext;

SQLParser.prototype.primary_datetime_field = function() {

    var localctx = new Primary_datetime_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, SQLParser.RULE_primary_datetime_field);
    try {
        this.state = 1619;
        switch(this._input.LA(1)) {
        case SQLParser.DAY:
        case SQLParser.HOUR:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.YEAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 1617;
            this.non_second_primary_datetime_field();
            break;
        case SQLParser.SECOND:
            this.enterOuterAlt(localctx, 2);
            this.state = 1618;
            this.match(SQLParser.SECOND);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_second_primary_datetime_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_non_second_primary_datetime_field;
    return this;
}

Non_second_primary_datetime_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_second_primary_datetime_fieldContext.prototype.constructor = Non_second_primary_datetime_fieldContext;

Non_second_primary_datetime_fieldContext.prototype.YEAR = function() {
    return this.getToken(SQLParser.YEAR, 0);
};

Non_second_primary_datetime_fieldContext.prototype.MONTH = function() {
    return this.getToken(SQLParser.MONTH, 0);
};

Non_second_primary_datetime_fieldContext.prototype.DAY = function() {
    return this.getToken(SQLParser.DAY, 0);
};

Non_second_primary_datetime_fieldContext.prototype.HOUR = function() {
    return this.getToken(SQLParser.HOUR, 0);
};

Non_second_primary_datetime_fieldContext.prototype.MINUTE = function() {
    return this.getToken(SQLParser.MINUTE, 0);
};

Non_second_primary_datetime_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNon_second_primary_datetime_field(this);
	}
};

Non_second_primary_datetime_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNon_second_primary_datetime_field(this);
	}
};

Non_second_primary_datetime_fieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNon_second_primary_datetime_field(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Non_second_primary_datetime_fieldContext = Non_second_primary_datetime_fieldContext;

SQLParser.prototype.non_second_primary_datetime_field = function() {

    var localctx = new Non_second_primary_datetime_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, SQLParser.RULE_non_second_primary_datetime_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1621;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.DAY || _la===SQLParser.HOUR || _la===SQLParser.MINUTE || _la===SQLParser.MONTH || _la===SQLParser.YEAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extended_datetime_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_extended_datetime_field;
    return this;
}

Extended_datetime_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extended_datetime_fieldContext.prototype.constructor = Extended_datetime_fieldContext;

Extended_datetime_fieldContext.prototype.CENTURY = function() {
    return this.getToken(SQLParser.CENTURY, 0);
};

Extended_datetime_fieldContext.prototype.DECADE = function() {
    return this.getToken(SQLParser.DECADE, 0);
};

Extended_datetime_fieldContext.prototype.DOW = function() {
    return this.getToken(SQLParser.DOW, 0);
};

Extended_datetime_fieldContext.prototype.DOY = function() {
    return this.getToken(SQLParser.DOY, 0);
};

Extended_datetime_fieldContext.prototype.EPOCH = function() {
    return this.getToken(SQLParser.EPOCH, 0);
};

Extended_datetime_fieldContext.prototype.ISODOW = function() {
    return this.getToken(SQLParser.ISODOW, 0);
};

Extended_datetime_fieldContext.prototype.ISOYEAR = function() {
    return this.getToken(SQLParser.ISOYEAR, 0);
};

Extended_datetime_fieldContext.prototype.MICROSECONDS = function() {
    return this.getToken(SQLParser.MICROSECONDS, 0);
};

Extended_datetime_fieldContext.prototype.MILLENNIUM = function() {
    return this.getToken(SQLParser.MILLENNIUM, 0);
};

Extended_datetime_fieldContext.prototype.MILLISECONDS = function() {
    return this.getToken(SQLParser.MILLISECONDS, 0);
};

Extended_datetime_fieldContext.prototype.QUARTER = function() {
    return this.getToken(SQLParser.QUARTER, 0);
};

Extended_datetime_fieldContext.prototype.WEEK = function() {
    return this.getToken(SQLParser.WEEK, 0);
};

Extended_datetime_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterExtended_datetime_field(this);
	}
};

Extended_datetime_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitExtended_datetime_field(this);
	}
};

Extended_datetime_fieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitExtended_datetime_field(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Extended_datetime_fieldContext = Extended_datetime_fieldContext;

SQLParser.prototype.extended_datetime_field = function() {

    var localctx = new Extended_datetime_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, SQLParser.RULE_extended_datetime_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1623;
        _la = this._input.LA(1);
        if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (SQLParser.CENTURY - 57)) | (1 << (SQLParser.DECADE - 57)) | (1 << (SQLParser.DOW - 57)) | (1 << (SQLParser.DOY - 57)) | (1 << (SQLParser.EPOCH - 57)) | (1 << (SQLParser.ISODOW - 57)) | (1 << (SQLParser.ISOYEAR - 57)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SQLParser.MICROSECONDS - 93)) | (1 << (SQLParser.MILLENNIUM - 93)) | (1 << (SQLParser.MILLISECONDS - 93)) | (1 << (SQLParser.QUARTER - 93)))) !== 0) || _la===SQLParser.WEEK)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Routine_invocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_routine_invocation;
    return this;
}

Routine_invocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Routine_invocationContext.prototype.constructor = Routine_invocationContext;

Routine_invocationContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Routine_invocationContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Routine_invocationContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Routine_invocationContext.prototype.sql_argument_list = function() {
    return this.getTypedRuleContext(Sql_argument_listContext,0);
};

Routine_invocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterRoutine_invocation(this);
	}
};

Routine_invocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitRoutine_invocation(this);
	}
};

Routine_invocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitRoutine_invocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Routine_invocationContext = Routine_invocationContext;

SQLParser.prototype.routine_invocation = function() {

    var localctx = new Routine_invocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, SQLParser.RULE_routine_invocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1625;
        this.function_name();
        this.state = 1626;
        this.match(SQLParser.LEFT_PAREN);
        this.state = 1628;
        _la = this._input.LA(1);
        if(((((_la - 4)) & ~0x1f) == 0 && ((1 << (_la - 4)) & ((1 << (SQLParser.ANY - 4)) | (1 << (SQLParser.CASE - 4)) | (1 << (SQLParser.CAST - 4)) | (1 << (SQLParser.FALSE - 4)) | (1 << (SQLParser.LEFT - 4)) | (1 << (SQLParser.NOT - 4)) | (1 << (SQLParser.NULL - 4)))) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (SQLParser.RIGHT - 40)) | (1 << (SQLParser.SOME - 40)) | (1 << (SQLParser.TRUE - 40)) | (1 << (SQLParser.AVG - 40)) | (1 << (SQLParser.BETWEEN - 40)) | (1 << (SQLParser.BY - 40)) | (1 << (SQLParser.CENTURY - 40)) | (1 << (SQLParser.CHARACTER - 40)) | (1 << (SQLParser.COLLECT - 40)) | (1 << (SQLParser.COALESCE - 40)) | (1 << (SQLParser.COLUMN - 40)) | (1 << (SQLParser.COUNT - 40)) | (1 << (SQLParser.CUBE - 40)) | (1 << (SQLParser.DAY - 40)) | (1 << (SQLParser.DEC - 40)) | (1 << (SQLParser.DECADE - 40)) | (1 << (SQLParser.DOW - 40)) | (1 << (SQLParser.DOY - 40)) | (1 << (SQLParser.DROP - 40)) | (1 << (SQLParser.EPOCH - 40)) | (1 << (SQLParser.EVERY - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (SQLParser.EXISTS - 72)) | (1 << (SQLParser.EXTERNAL - 72)) | (1 << (SQLParser.EXTRACT - 72)) | (1 << (SQLParser.FILTER - 72)) | (1 << (SQLParser.FIRST - 72)) | (1 << (SQLParser.FORMAT - 72)) | (1 << (SQLParser.FUSION - 72)) | (1 << (SQLParser.GROUPING - 72)) | (1 << (SQLParser.HASH - 72)) | (1 << (SQLParser.INDEX - 72)) | (1 << (SQLParser.INSERT - 72)) | (1 << (SQLParser.INTERSECTION - 72)) | (1 << (SQLParser.ISODOW - 72)) | (1 << (SQLParser.ISOYEAR - 72)) | (1 << (SQLParser.LAST - 72)) | (1 << (SQLParser.LESS - 72)) | (1 << (SQLParser.LIST - 72)) | (1 << (SQLParser.LOCATION - 72)) | (1 << (SQLParser.MAX - 72)) | (1 << (SQLParser.MAXVALUE - 72)) | (1 << (SQLParser.MICROSECONDS - 72)) | (1 << (SQLParser.MILLENNIUM - 72)) | (1 << (SQLParser.MILLISECONDS - 72)) | (1 << (SQLParser.MIN - 72)) | (1 << (SQLParser.MINUTE - 72)) | (1 << (SQLParser.MONTH - 72)) | (1 << (SQLParser.NATIONAL - 72)) | (1 << (SQLParser.NULLIF - 72)) | (1 << (SQLParser.OVERWRITE - 72)) | (1 << (SQLParser.PARTITION - 72)) | (1 << (SQLParser.PARTITIONS - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (SQLParser.PRECISION - 104)) | (1 << (SQLParser.PURGE - 104)) | (1 << (SQLParser.QUARTER - 104)) | (1 << (SQLParser.RANGE - 104)) | (1 << (SQLParser.REGEXP - 104)) | (1 << (SQLParser.RLIKE - 104)) | (1 << (SQLParser.ROLLUP - 104)) | (1 << (SQLParser.SECOND - 104)) | (1 << (SQLParser.SET - 104)) | (1 << (SQLParser.SIMILAR - 104)) | (1 << (SQLParser.STDDEV_POP - 104)) | (1 << (SQLParser.STDDEV_SAMP - 104)) | (1 << (SQLParser.SUBPARTITION - 104)) | (1 << (SQLParser.SUM - 104)) | (1 << (SQLParser.TABLESPACE - 104)) | (1 << (SQLParser.THAN - 104)) | (1 << (SQLParser.TIMEZONE - 104)) | (1 << (SQLParser.TIMEZONE_HOUR - 104)) | (1 << (SQLParser.TIMEZONE_MINUTE - 104)) | (1 << (SQLParser.TRIM - 104)) | (1 << (SQLParser.TO - 104)) | (1 << (SQLParser.UNKNOWN - 104)) | (1 << (SQLParser.VALUES - 104)) | (1 << (SQLParser.VAR_SAMP - 104)) | (1 << (SQLParser.VAR_POP - 104)) | (1 << (SQLParser.VARYING - 104)) | (1 << (SQLParser.WEEK - 104)) | (1 << (SQLParser.YEAR - 104)) | (1 << (SQLParser.ZONE - 104)) | (1 << (SQLParser.BOOLEAN - 104)) | (1 << (SQLParser.BOOL - 104)) | (1 << (SQLParser.BIT - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (SQLParser.VARBIT - 136)) | (1 << (SQLParser.INT1 - 136)) | (1 << (SQLParser.INT2 - 136)) | (1 << (SQLParser.INT4 - 136)) | (1 << (SQLParser.INT8 - 136)) | (1 << (SQLParser.TINYINT - 136)) | (1 << (SQLParser.SMALLINT - 136)) | (1 << (SQLParser.INT - 136)) | (1 << (SQLParser.INTEGER - 136)) | (1 << (SQLParser.BIGINT - 136)) | (1 << (SQLParser.FLOAT4 - 136)) | (1 << (SQLParser.FLOAT8 - 136)) | (1 << (SQLParser.REAL - 136)) | (1 << (SQLParser.FLOAT - 136)) | (1 << (SQLParser.DOUBLE - 136)) | (1 << (SQLParser.NUMERIC - 136)) | (1 << (SQLParser.DECIMAL - 136)) | (1 << (SQLParser.CHAR - 136)) | (1 << (SQLParser.VARCHAR - 136)) | (1 << (SQLParser.NCHAR - 136)) | (1 << (SQLParser.NVARCHAR - 136)) | (1 << (SQLParser.DATE - 136)) | (1 << (SQLParser.TIME - 136)) | (1 << (SQLParser.TIMETZ - 136)) | (1 << (SQLParser.TIMESTAMP - 136)) | (1 << (SQLParser.TIMESTAMPTZ - 136)) | (1 << (SQLParser.TEXT - 136)) | (1 << (SQLParser.VARBINARY - 136)) | (1 << (SQLParser.BLOB - 136)) | (1 << (SQLParser.BYTEA - 136)) | (1 << (SQLParser.INET4 - 136)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (SQLParser.LEFT_PAREN - 184)) | (1 << (SQLParser.PLUS - 184)) | (1 << (SQLParser.MINUS - 184)) | (1 << (SQLParser.NUMBER - 184)) | (1 << (SQLParser.REAL_NUMBER - 184)) | (1 << (SQLParser.Identifier - 184)) | (1 << (SQLParser.Character_String_Literal - 184)))) !== 0)) {
            this.state = 1627;
            this.sql_argument_list();
        }

        this.state = 1630;
        this.match(SQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_names_for_reserved_wordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_function_names_for_reserved_words;
    return this;
}

Function_names_for_reserved_wordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_names_for_reserved_wordsContext.prototype.constructor = Function_names_for_reserved_wordsContext;

Function_names_for_reserved_wordsContext.prototype.LEFT = function() {
    return this.getToken(SQLParser.LEFT, 0);
};

Function_names_for_reserved_wordsContext.prototype.RIGHT = function() {
    return this.getToken(SQLParser.RIGHT, 0);
};

Function_names_for_reserved_wordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFunction_names_for_reserved_words(this);
	}
};

Function_names_for_reserved_wordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFunction_names_for_reserved_words(this);
	}
};

Function_names_for_reserved_wordsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitFunction_names_for_reserved_words(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Function_names_for_reserved_wordsContext = Function_names_for_reserved_wordsContext;

SQLParser.prototype.function_names_for_reserved_words = function() {

    var localctx = new Function_names_for_reserved_wordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, SQLParser.RULE_function_names_for_reserved_words);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1632;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.LEFT || _la===SQLParser.RIGHT)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Function_nameContext.prototype.function_names_for_reserved_words = function() {
    return this.getTypedRuleContext(Function_names_for_reserved_wordsContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFunction_name(this);
	}
};

Function_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitFunction_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Function_nameContext = Function_nameContext;

SQLParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, SQLParser.RULE_function_name);
    try {
        this.state = 1636;
        switch(this._input.LA(1)) {
        case SQLParser.AVG:
        case SQLParser.BETWEEN:
        case SQLParser.BY:
        case SQLParser.CENTURY:
        case SQLParser.CHARACTER:
        case SQLParser.COLLECT:
        case SQLParser.COALESCE:
        case SQLParser.COLUMN:
        case SQLParser.COUNT:
        case SQLParser.CUBE:
        case SQLParser.DAY:
        case SQLParser.DEC:
        case SQLParser.DECADE:
        case SQLParser.DOW:
        case SQLParser.DOY:
        case SQLParser.DROP:
        case SQLParser.EPOCH:
        case SQLParser.EVERY:
        case SQLParser.EXISTS:
        case SQLParser.EXTERNAL:
        case SQLParser.EXTRACT:
        case SQLParser.FILTER:
        case SQLParser.FIRST:
        case SQLParser.FORMAT:
        case SQLParser.FUSION:
        case SQLParser.GROUPING:
        case SQLParser.HASH:
        case SQLParser.INDEX:
        case SQLParser.INSERT:
        case SQLParser.INTERSECTION:
        case SQLParser.ISODOW:
        case SQLParser.ISOYEAR:
        case SQLParser.LAST:
        case SQLParser.LESS:
        case SQLParser.LIST:
        case SQLParser.LOCATION:
        case SQLParser.MAX:
        case SQLParser.MAXVALUE:
        case SQLParser.MICROSECONDS:
        case SQLParser.MILLENNIUM:
        case SQLParser.MILLISECONDS:
        case SQLParser.MIN:
        case SQLParser.MINUTE:
        case SQLParser.MONTH:
        case SQLParser.NATIONAL:
        case SQLParser.NULLIF:
        case SQLParser.OVERWRITE:
        case SQLParser.PARTITION:
        case SQLParser.PARTITIONS:
        case SQLParser.PRECISION:
        case SQLParser.PURGE:
        case SQLParser.QUARTER:
        case SQLParser.RANGE:
        case SQLParser.REGEXP:
        case SQLParser.RLIKE:
        case SQLParser.ROLLUP:
        case SQLParser.SECOND:
        case SQLParser.SET:
        case SQLParser.SIMILAR:
        case SQLParser.STDDEV_POP:
        case SQLParser.STDDEV_SAMP:
        case SQLParser.SUBPARTITION:
        case SQLParser.SUM:
        case SQLParser.TABLESPACE:
        case SQLParser.THAN:
        case SQLParser.TIMEZONE:
        case SQLParser.TIMEZONE_HOUR:
        case SQLParser.TIMEZONE_MINUTE:
        case SQLParser.TRIM:
        case SQLParser.TO:
        case SQLParser.UNKNOWN:
        case SQLParser.VALUES:
        case SQLParser.VAR_SAMP:
        case SQLParser.VAR_POP:
        case SQLParser.VARYING:
        case SQLParser.WEEK:
        case SQLParser.YEAR:
        case SQLParser.ZONE:
        case SQLParser.BOOLEAN:
        case SQLParser.BOOL:
        case SQLParser.BIT:
        case SQLParser.VARBIT:
        case SQLParser.INT1:
        case SQLParser.INT2:
        case SQLParser.INT4:
        case SQLParser.INT8:
        case SQLParser.TINYINT:
        case SQLParser.SMALLINT:
        case SQLParser.INT:
        case SQLParser.INTEGER:
        case SQLParser.BIGINT:
        case SQLParser.FLOAT4:
        case SQLParser.FLOAT8:
        case SQLParser.REAL:
        case SQLParser.FLOAT:
        case SQLParser.DOUBLE:
        case SQLParser.NUMERIC:
        case SQLParser.DECIMAL:
        case SQLParser.CHAR:
        case SQLParser.VARCHAR:
        case SQLParser.NCHAR:
        case SQLParser.NVARCHAR:
        case SQLParser.DATE:
        case SQLParser.TIME:
        case SQLParser.TIMETZ:
        case SQLParser.TIMESTAMP:
        case SQLParser.TIMESTAMPTZ:
        case SQLParser.TEXT:
        case SQLParser.VARBINARY:
        case SQLParser.BLOB:
        case SQLParser.BYTEA:
        case SQLParser.INET4:
        case SQLParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1634;
            this.identifier();
            break;
        case SQLParser.LEFT:
        case SQLParser.RIGHT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1635;
            this.function_names_for_reserved_words();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sql_argument_list;
    return this;
}

Sql_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_argument_listContext.prototype.constructor = Sql_argument_listContext;

Sql_argument_listContext.prototype.value_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_expressionContext);
    } else {
        return this.getTypedRuleContext(Value_expressionContext,i);
    }
};

Sql_argument_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Sql_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSql_argument_list(this);
	}
};

Sql_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSql_argument_list(this);
	}
};

Sql_argument_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSql_argument_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Sql_argument_listContext = Sql_argument_listContext;

SQLParser.prototype.sql_argument_list = function() {

    var localctx = new Sql_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, SQLParser.RULE_sql_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1638;
        this.value_expression();
        this.state = 1643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1639;
            this.match(SQLParser.COMMA);
            this.state = 1640;
            this.value_expression();
            this.state = 1645;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Orderby_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_orderby_clause;
    return this;
}

Orderby_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Orderby_clauseContext.prototype.constructor = Orderby_clauseContext;

Orderby_clauseContext.prototype.ORDER = function() {
    return this.getToken(SQLParser.ORDER, 0);
};

Orderby_clauseContext.prototype.BY = function() {
    return this.getToken(SQLParser.BY, 0);
};

Orderby_clauseContext.prototype.sort_specifier_list = function() {
    return this.getTypedRuleContext(Sort_specifier_listContext,0);
};

Orderby_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOrderby_clause(this);
	}
};

Orderby_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOrderby_clause(this);
	}
};

Orderby_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOrderby_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Orderby_clauseContext = Orderby_clauseContext;

SQLParser.prototype.orderby_clause = function() {

    var localctx = new Orderby_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, SQLParser.RULE_orderby_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1646;
        this.match(SQLParser.ORDER);
        this.state = 1647;
        this.match(SQLParser.BY);
        this.state = 1648;
        this.sort_specifier_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sort_specifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sort_specifier_list;
    return this;
}

Sort_specifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sort_specifier_listContext.prototype.constructor = Sort_specifier_listContext;

Sort_specifier_listContext.prototype.sort_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sort_specifierContext);
    } else {
        return this.getTypedRuleContext(Sort_specifierContext,i);
    }
};

Sort_specifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


Sort_specifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSort_specifier_list(this);
	}
};

Sort_specifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSort_specifier_list(this);
	}
};

Sort_specifier_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSort_specifier_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Sort_specifier_listContext = Sort_specifier_listContext;

SQLParser.prototype.sort_specifier_list = function() {

    var localctx = new Sort_specifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, SQLParser.RULE_sort_specifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1650;
        this.sort_specifier();
        this.state = 1655;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1651;
            this.match(SQLParser.COMMA);
            this.state = 1652;
            this.sort_specifier();
            this.state = 1657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sort_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sort_specifier;
    this.key = null; // Row_value_predicandContext
    this.order = null; // Order_specificationContext
    this.null_order = null; // Null_orderingContext
    return this;
}

Sort_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sort_specifierContext.prototype.constructor = Sort_specifierContext;

Sort_specifierContext.prototype.row_value_predicand = function() {
    return this.getTypedRuleContext(Row_value_predicandContext,0);
};

Sort_specifierContext.prototype.order_specification = function() {
    return this.getTypedRuleContext(Order_specificationContext,0);
};

Sort_specifierContext.prototype.null_ordering = function() {
    return this.getTypedRuleContext(Null_orderingContext,0);
};

Sort_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSort_specifier(this);
	}
};

Sort_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSort_specifier(this);
	}
};

Sort_specifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitSort_specifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Sort_specifierContext = Sort_specifierContext;

SQLParser.prototype.sort_specifier = function() {

    var localctx = new Sort_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, SQLParser.RULE_sort_specifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1658;
        localctx.key = this.row_value_predicand();
        this.state = 1660;
        _la = this._input.LA(1);
        if(_la===SQLParser.ASC || _la===SQLParser.DESC) {
            this.state = 1659;
            localctx.order = this.order_specification();
        }

        this.state = 1663;
        _la = this._input.LA(1);
        if(_la===SQLParser.NULL) {
            this.state = 1662;
            localctx.null_order = this.null_ordering();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_order_specification;
    return this;
}

Order_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_specificationContext.prototype.constructor = Order_specificationContext;

Order_specificationContext.prototype.ASC = function() {
    return this.getToken(SQLParser.ASC, 0);
};

Order_specificationContext.prototype.DESC = function() {
    return this.getToken(SQLParser.DESC, 0);
};

Order_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOrder_specification(this);
	}
};

Order_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOrder_specification(this);
	}
};

Order_specificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitOrder_specification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Order_specificationContext = Order_specificationContext;

SQLParser.prototype.order_specification = function() {

    var localctx = new Order_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, SQLParser.RULE_order_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1665;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.ASC || _la===SQLParser.DESC)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Limit_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_limit_clause;
    this.e = null; // Numeric_value_expressionContext
    return this;
}

Limit_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Limit_clauseContext.prototype.constructor = Limit_clauseContext;

Limit_clauseContext.prototype.LIMIT = function() {
    return this.getToken(SQLParser.LIMIT, 0);
};

Limit_clauseContext.prototype.numeric_value_expression = function() {
    return this.getTypedRuleContext(Numeric_value_expressionContext,0);
};

Limit_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterLimit_clause(this);
	}
};

Limit_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitLimit_clause(this);
	}
};

Limit_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitLimit_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Limit_clauseContext = Limit_clauseContext;

SQLParser.prototype.limit_clause = function() {

    var localctx = new Limit_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, SQLParser.RULE_limit_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1667;
        this.match(SQLParser.LIMIT);
        this.state = 1668;
        localctx.e = this.numeric_value_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_orderingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_null_ordering;
    return this;
}

Null_orderingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_orderingContext.prototype.constructor = Null_orderingContext;

Null_orderingContext.prototype.NULL = function() {
    return this.getToken(SQLParser.NULL, 0);
};

Null_orderingContext.prototype.FIRST = function() {
    return this.getToken(SQLParser.FIRST, 0);
};

Null_orderingContext.prototype.LAST = function() {
    return this.getToken(SQLParser.LAST, 0);
};

Null_orderingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterNull_ordering(this);
	}
};

Null_orderingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitNull_ordering(this);
	}
};

Null_orderingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitNull_ordering(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Null_orderingContext = Null_orderingContext;

SQLParser.prototype.null_ordering = function() {

    var localctx = new Null_orderingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, SQLParser.RULE_null_ordering);
    try {
        this.state = 1674;
        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1670;
            this.match(SQLParser.NULL);
            this.state = 1671;
            this.match(SQLParser.FIRST);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1672;
            this.match(SQLParser.NULL);
            this.state = 1673;
            this.match(SQLParser.LAST);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_insert_statement;
    this.path = null; // Token
    this.file_type = null; // IdentifierContext
    return this;
}

Insert_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_statementContext.prototype.constructor = Insert_statementContext;

Insert_statementContext.prototype.INSERT = function() {
    return this.getToken(SQLParser.INSERT, 0);
};

Insert_statementContext.prototype.INTO = function() {
    return this.getToken(SQLParser.INTO, 0);
};

Insert_statementContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Insert_statementContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Insert_statementContext.prototype.OVERWRITE = function() {
    return this.getToken(SQLParser.OVERWRITE, 0);
};

Insert_statementContext.prototype.LEFT_PAREN = function() {
    return this.getToken(SQLParser.LEFT_PAREN, 0);
};

Insert_statementContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Insert_statementContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(SQLParser.RIGHT_PAREN, 0);
};

Insert_statementContext.prototype.LOCATION = function() {
    return this.getToken(SQLParser.LOCATION, 0);
};

Insert_statementContext.prototype.Character_String_Literal = function() {
    return this.getToken(SQLParser.Character_String_Literal, 0);
};

Insert_statementContext.prototype.USING = function() {
    return this.getToken(SQLParser.USING, 0);
};

Insert_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Insert_statementContext.prototype.param_clause = function() {
    return this.getTypedRuleContext(Param_clauseContext,0);
};

Insert_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterInsert_statement(this);
	}
};

Insert_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitInsert_statement(this);
	}
};

Insert_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLParserVisitor ) {
        return visitor.visitInsert_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLParser.Insert_statementContext = Insert_statementContext;

SQLParser.prototype.insert_statement = function() {

    var localctx = new Insert_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, SQLParser.RULE_insert_statement);
    var _la = 0; // Token type
    try {
        this.state = 1705;
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1676;
            this.match(SQLParser.INSERT);
            this.state = 1678;
            _la = this._input.LA(1);
            if(_la===SQLParser.OVERWRITE) {
                this.state = 1677;
                this.match(SQLParser.OVERWRITE);
            }

            this.state = 1680;
            this.match(SQLParser.INTO);
            this.state = 1681;
            this.table_name();
            this.state = 1686;
            var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
            if(la_===1) {
                this.state = 1682;
                this.match(SQLParser.LEFT_PAREN);
                this.state = 1683;
                this.column_name_list();
                this.state = 1684;
                this.match(SQLParser.RIGHT_PAREN);

            }
            this.state = 1688;
            this.query_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1690;
            this.match(SQLParser.INSERT);
            this.state = 1692;
            _la = this._input.LA(1);
            if(_la===SQLParser.OVERWRITE) {
                this.state = 1691;
                this.match(SQLParser.OVERWRITE);
            }

            this.state = 1694;
            this.match(SQLParser.INTO);
            this.state = 1695;
            this.match(SQLParser.LOCATION);
            this.state = 1696;
            localctx.path = this.match(SQLParser.Character_String_Literal);
            this.state = 1702;
            _la = this._input.LA(1);
            if(_la===SQLParser.USING) {
                this.state = 1697;
                this.match(SQLParser.USING);
                this.state = 1698;
                localctx.file_type = this.identifier();
                this.state = 1700;
                _la = this._input.LA(1);
                if(_la===SQLParser.WITH) {
                    this.state = 1699;
                    this.param_clause();
                }

            }

            this.state = 1704;
            this.query_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

return SQLParser;

};
},{}],4:[function(require,module,exports){
// Generated from grammars/sql/SQLParser.g4 by ANTLR 4.5.1
// jshint ignore: start
module.exports = function (antlr4) {

// This class defines a complete listener for a parse tree produced by SQLParser.
function SQLParserListener() {
	antlr4.tree.ParseTreeListener.call(this);
	return this;
}

SQLParserListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
SQLParserListener.prototype.constructor = SQLParserListener;

// Enter a parse tree produced by SQLParser#sql.
SQLParserListener.prototype.enterSql = function(ctx) {
};

// Exit a parse tree produced by SQLParser#sql.
SQLParserListener.prototype.exitSql = function(ctx) {
};


// Enter a parse tree produced by SQLParser#statement.
SQLParserListener.prototype.enterStatement = function(ctx) {
};

// Exit a parse tree produced by SQLParser#statement.
SQLParserListener.prototype.exitStatement = function(ctx) {
};


// Enter a parse tree produced by SQLParser#data_statement.
SQLParserListener.prototype.enterData_statement = function(ctx) {
};

// Exit a parse tree produced by SQLParser#data_statement.
SQLParserListener.prototype.exitData_statement = function(ctx) {
};


// Enter a parse tree produced by SQLParser#data_change_statement.
SQLParserListener.prototype.enterData_change_statement = function(ctx) {
};

// Exit a parse tree produced by SQLParser#data_change_statement.
SQLParserListener.prototype.exitData_change_statement = function(ctx) {
};


// Enter a parse tree produced by SQLParser#schema_statement.
SQLParserListener.prototype.enterSchema_statement = function(ctx) {
};

// Exit a parse tree produced by SQLParser#schema_statement.
SQLParserListener.prototype.exitSchema_statement = function(ctx) {
};


// Enter a parse tree produced by SQLParser#index_statement.
SQLParserListener.prototype.enterIndex_statement = function(ctx) {
};

// Exit a parse tree produced by SQLParser#index_statement.
SQLParserListener.prototype.exitIndex_statement = function(ctx) {
};


// Enter a parse tree produced by SQLParser#create_table_statement.
SQLParserListener.prototype.enterCreate_table_statement = function(ctx) {
};

// Exit a parse tree produced by SQLParser#create_table_statement.
SQLParserListener.prototype.exitCreate_table_statement = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_elements.
SQLParserListener.prototype.enterTable_elements = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_elements.
SQLParserListener.prototype.exitTable_elements = function(ctx) {
};


// Enter a parse tree produced by SQLParser#field_element.
SQLParserListener.prototype.enterField_element = function(ctx) {
};

// Exit a parse tree produced by SQLParser#field_element.
SQLParserListener.prototype.exitField_element = function(ctx) {
};


// Enter a parse tree produced by SQLParser#field_type.
SQLParserListener.prototype.enterField_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#field_type.
SQLParserListener.prototype.exitField_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#param_clause.
SQLParserListener.prototype.enterParam_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#param_clause.
SQLParserListener.prototype.exitParam_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#param.
SQLParserListener.prototype.enterParam = function(ctx) {
};

// Exit a parse tree produced by SQLParser#param.
SQLParserListener.prototype.exitParam = function(ctx) {
};


// Enter a parse tree produced by SQLParser#method_specifier.
SQLParserListener.prototype.enterMethod_specifier = function(ctx) {
};

// Exit a parse tree produced by SQLParser#method_specifier.
SQLParserListener.prototype.exitMethod_specifier = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_space_specifier.
SQLParserListener.prototype.enterTable_space_specifier = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_space_specifier.
SQLParserListener.prototype.exitTable_space_specifier = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_space_name.
SQLParserListener.prototype.enterTable_space_name = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_space_name.
SQLParserListener.prototype.exitTable_space_name = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_partitioning_clauses.
SQLParserListener.prototype.enterTable_partitioning_clauses = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_partitioning_clauses.
SQLParserListener.prototype.exitTable_partitioning_clauses = function(ctx) {
};


// Enter a parse tree produced by SQLParser#range_partitions.
SQLParserListener.prototype.enterRange_partitions = function(ctx) {
};

// Exit a parse tree produced by SQLParser#range_partitions.
SQLParserListener.prototype.exitRange_partitions = function(ctx) {
};


// Enter a parse tree produced by SQLParser#range_value_clause_list.
SQLParserListener.prototype.enterRange_value_clause_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#range_value_clause_list.
SQLParserListener.prototype.exitRange_value_clause_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#range_value_clause.
SQLParserListener.prototype.enterRange_value_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#range_value_clause.
SQLParserListener.prototype.exitRange_value_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#hash_partitions.
SQLParserListener.prototype.enterHash_partitions = function(ctx) {
};

// Exit a parse tree produced by SQLParser#hash_partitions.
SQLParserListener.prototype.exitHash_partitions = function(ctx) {
};


// Enter a parse tree produced by SQLParser#individual_hash_partitions.
SQLParserListener.prototype.enterIndividual_hash_partitions = function(ctx) {
};

// Exit a parse tree produced by SQLParser#individual_hash_partitions.
SQLParserListener.prototype.exitIndividual_hash_partitions = function(ctx) {
};


// Enter a parse tree produced by SQLParser#individual_hash_partition.
SQLParserListener.prototype.enterIndividual_hash_partition = function(ctx) {
};

// Exit a parse tree produced by SQLParser#individual_hash_partition.
SQLParserListener.prototype.exitIndividual_hash_partition = function(ctx) {
};


// Enter a parse tree produced by SQLParser#hash_partitions_by_quantity.
SQLParserListener.prototype.enterHash_partitions_by_quantity = function(ctx) {
};

// Exit a parse tree produced by SQLParser#hash_partitions_by_quantity.
SQLParserListener.prototype.exitHash_partitions_by_quantity = function(ctx) {
};


// Enter a parse tree produced by SQLParser#list_partitions.
SQLParserListener.prototype.enterList_partitions = function(ctx) {
};

// Exit a parse tree produced by SQLParser#list_partitions.
SQLParserListener.prototype.exitList_partitions = function(ctx) {
};


// Enter a parse tree produced by SQLParser#list_value_clause_list.
SQLParserListener.prototype.enterList_value_clause_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#list_value_clause_list.
SQLParserListener.prototype.exitList_value_clause_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#list_value_partition.
SQLParserListener.prototype.enterList_value_partition = function(ctx) {
};

// Exit a parse tree produced by SQLParser#list_value_partition.
SQLParserListener.prototype.exitList_value_partition = function(ctx) {
};


// Enter a parse tree produced by SQLParser#column_partitions.
SQLParserListener.prototype.enterColumn_partitions = function(ctx) {
};

// Exit a parse tree produced by SQLParser#column_partitions.
SQLParserListener.prototype.exitColumn_partitions = function(ctx) {
};


// Enter a parse tree produced by SQLParser#partition_name.
SQLParserListener.prototype.enterPartition_name = function(ctx) {
};

// Exit a parse tree produced by SQLParser#partition_name.
SQLParserListener.prototype.exitPartition_name = function(ctx) {
};


// Enter a parse tree produced by SQLParser#drop_table_statement.
SQLParserListener.prototype.enterDrop_table_statement = function(ctx) {
};

// Exit a parse tree produced by SQLParser#drop_table_statement.
SQLParserListener.prototype.exitDrop_table_statement = function(ctx) {
};


// Enter a parse tree produced by SQLParser#identifier.
SQLParserListener.prototype.enterIdentifier = function(ctx) {
};

// Exit a parse tree produced by SQLParser#identifier.
SQLParserListener.prototype.exitIdentifier = function(ctx) {
};


// Enter a parse tree produced by SQLParser#nonreserved_keywords.
SQLParserListener.prototype.enterNonreserved_keywords = function(ctx) {
};

// Exit a parse tree produced by SQLParser#nonreserved_keywords.
SQLParserListener.prototype.exitNonreserved_keywords = function(ctx) {
};


// Enter a parse tree produced by SQLParser#unsigned_literal.
SQLParserListener.prototype.enterUnsigned_literal = function(ctx) {
};

// Exit a parse tree produced by SQLParser#unsigned_literal.
SQLParserListener.prototype.exitUnsigned_literal = function(ctx) {
};


// Enter a parse tree produced by SQLParser#general_literal.
SQLParserListener.prototype.enterGeneral_literal = function(ctx) {
};

// Exit a parse tree produced by SQLParser#general_literal.
SQLParserListener.prototype.exitGeneral_literal = function(ctx) {
};


// Enter a parse tree produced by SQLParser#datetime_literal.
SQLParserListener.prototype.enterDatetime_literal = function(ctx) {
};

// Exit a parse tree produced by SQLParser#datetime_literal.
SQLParserListener.prototype.exitDatetime_literal = function(ctx) {
};


// Enter a parse tree produced by SQLParser#time_literal.
SQLParserListener.prototype.enterTime_literal = function(ctx) {
};

// Exit a parse tree produced by SQLParser#time_literal.
SQLParserListener.prototype.exitTime_literal = function(ctx) {
};


// Enter a parse tree produced by SQLParser#timestamp_literal.
SQLParserListener.prototype.enterTimestamp_literal = function(ctx) {
};

// Exit a parse tree produced by SQLParser#timestamp_literal.
SQLParserListener.prototype.exitTimestamp_literal = function(ctx) {
};


// Enter a parse tree produced by SQLParser#date_literal.
SQLParserListener.prototype.enterDate_literal = function(ctx) {
};

// Exit a parse tree produced by SQLParser#date_literal.
SQLParserListener.prototype.exitDate_literal = function(ctx) {
};


// Enter a parse tree produced by SQLParser#boolean_literal.
SQLParserListener.prototype.enterBoolean_literal = function(ctx) {
};

// Exit a parse tree produced by SQLParser#boolean_literal.
SQLParserListener.prototype.exitBoolean_literal = function(ctx) {
};


// Enter a parse tree produced by SQLParser#data_type.
SQLParserListener.prototype.enterData_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#data_type.
SQLParserListener.prototype.exitData_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#predefined_type.
SQLParserListener.prototype.enterPredefined_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#predefined_type.
SQLParserListener.prototype.exitPredefined_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#network_type.
SQLParserListener.prototype.enterNetwork_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#network_type.
SQLParserListener.prototype.exitNetwork_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#character_string_type.
SQLParserListener.prototype.enterCharacter_string_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#character_string_type.
SQLParserListener.prototype.exitCharacter_string_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#type_length.
SQLParserListener.prototype.enterType_length = function(ctx) {
};

// Exit a parse tree produced by SQLParser#type_length.
SQLParserListener.prototype.exitType_length = function(ctx) {
};


// Enter a parse tree produced by SQLParser#national_character_string_type.
SQLParserListener.prototype.enterNational_character_string_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#national_character_string_type.
SQLParserListener.prototype.exitNational_character_string_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#binary_large_object_string_type.
SQLParserListener.prototype.enterBinary_large_object_string_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#binary_large_object_string_type.
SQLParserListener.prototype.exitBinary_large_object_string_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#numeric_type.
SQLParserListener.prototype.enterNumeric_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#numeric_type.
SQLParserListener.prototype.exitNumeric_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#exact_numeric_type.
SQLParserListener.prototype.enterExact_numeric_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#exact_numeric_type.
SQLParserListener.prototype.exitExact_numeric_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#approximate_numeric_type.
SQLParserListener.prototype.enterApproximate_numeric_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#approximate_numeric_type.
SQLParserListener.prototype.exitApproximate_numeric_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#precision_param.
SQLParserListener.prototype.enterPrecision_param = function(ctx) {
};

// Exit a parse tree produced by SQLParser#precision_param.
SQLParserListener.prototype.exitPrecision_param = function(ctx) {
};


// Enter a parse tree produced by SQLParser#boolean_type.
SQLParserListener.prototype.enterBoolean_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#boolean_type.
SQLParserListener.prototype.exitBoolean_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#datetime_type.
SQLParserListener.prototype.enterDatetime_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#datetime_type.
SQLParserListener.prototype.exitDatetime_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#bit_type.
SQLParserListener.prototype.enterBit_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#bit_type.
SQLParserListener.prototype.exitBit_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#binary_type.
SQLParserListener.prototype.enterBinary_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#binary_type.
SQLParserListener.prototype.exitBinary_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#value_expression_primary.
SQLParserListener.prototype.enterValue_expression_primary = function(ctx) {
};

// Exit a parse tree produced by SQLParser#value_expression_primary.
SQLParserListener.prototype.exitValue_expression_primary = function(ctx) {
};


// Enter a parse tree produced by SQLParser#parenthesized_value_expression.
SQLParserListener.prototype.enterParenthesized_value_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#parenthesized_value_expression.
SQLParserListener.prototype.exitParenthesized_value_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#nonparenthesized_value_expression_primary.
SQLParserListener.prototype.enterNonparenthesized_value_expression_primary = function(ctx) {
};

// Exit a parse tree produced by SQLParser#nonparenthesized_value_expression_primary.
SQLParserListener.prototype.exitNonparenthesized_value_expression_primary = function(ctx) {
};


// Enter a parse tree produced by SQLParser#unsigned_value_specification.
SQLParserListener.prototype.enterUnsigned_value_specification = function(ctx) {
};

// Exit a parse tree produced by SQLParser#unsigned_value_specification.
SQLParserListener.prototype.exitUnsigned_value_specification = function(ctx) {
};


// Enter a parse tree produced by SQLParser#unsigned_numeric_literal.
SQLParserListener.prototype.enterUnsigned_numeric_literal = function(ctx) {
};

// Exit a parse tree produced by SQLParser#unsigned_numeric_literal.
SQLParserListener.prototype.exitUnsigned_numeric_literal = function(ctx) {
};


// Enter a parse tree produced by SQLParser#signed_numerical_literal.
SQLParserListener.prototype.enterSigned_numerical_literal = function(ctx) {
};

// Exit a parse tree produced by SQLParser#signed_numerical_literal.
SQLParserListener.prototype.exitSigned_numerical_literal = function(ctx) {
};


// Enter a parse tree produced by SQLParser#set_function_specification.
SQLParserListener.prototype.enterSet_function_specification = function(ctx) {
};

// Exit a parse tree produced by SQLParser#set_function_specification.
SQLParserListener.prototype.exitSet_function_specification = function(ctx) {
};


// Enter a parse tree produced by SQLParser#aggregate_function.
SQLParserListener.prototype.enterAggregate_function = function(ctx) {
};

// Exit a parse tree produced by SQLParser#aggregate_function.
SQLParserListener.prototype.exitAggregate_function = function(ctx) {
};


// Enter a parse tree produced by SQLParser#general_set_function.
SQLParserListener.prototype.enterGeneral_set_function = function(ctx) {
};

// Exit a parse tree produced by SQLParser#general_set_function.
SQLParserListener.prototype.exitGeneral_set_function = function(ctx) {
};


// Enter a parse tree produced by SQLParser#set_function_type.
SQLParserListener.prototype.enterSet_function_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#set_function_type.
SQLParserListener.prototype.exitSet_function_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#filter_clause.
SQLParserListener.prototype.enterFilter_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#filter_clause.
SQLParserListener.prototype.exitFilter_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#grouping_operation.
SQLParserListener.prototype.enterGrouping_operation = function(ctx) {
};

// Exit a parse tree produced by SQLParser#grouping_operation.
SQLParserListener.prototype.exitGrouping_operation = function(ctx) {
};


// Enter a parse tree produced by SQLParser#case_expression.
SQLParserListener.prototype.enterCase_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#case_expression.
SQLParserListener.prototype.exitCase_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#case_abbreviation.
SQLParserListener.prototype.enterCase_abbreviation = function(ctx) {
};

// Exit a parse tree produced by SQLParser#case_abbreviation.
SQLParserListener.prototype.exitCase_abbreviation = function(ctx) {
};


// Enter a parse tree produced by SQLParser#case_specification.
SQLParserListener.prototype.enterCase_specification = function(ctx) {
};

// Exit a parse tree produced by SQLParser#case_specification.
SQLParserListener.prototype.exitCase_specification = function(ctx) {
};


// Enter a parse tree produced by SQLParser#simple_case.
SQLParserListener.prototype.enterSimple_case = function(ctx) {
};

// Exit a parse tree produced by SQLParser#simple_case.
SQLParserListener.prototype.exitSimple_case = function(ctx) {
};


// Enter a parse tree produced by SQLParser#searched_case.
SQLParserListener.prototype.enterSearched_case = function(ctx) {
};

// Exit a parse tree produced by SQLParser#searched_case.
SQLParserListener.prototype.exitSearched_case = function(ctx) {
};


// Enter a parse tree produced by SQLParser#simple_when_clause.
SQLParserListener.prototype.enterSimple_when_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#simple_when_clause.
SQLParserListener.prototype.exitSimple_when_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#searched_when_clause.
SQLParserListener.prototype.enterSearched_when_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#searched_when_clause.
SQLParserListener.prototype.exitSearched_when_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#else_clause.
SQLParserListener.prototype.enterElse_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#else_clause.
SQLParserListener.prototype.exitElse_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#result.
SQLParserListener.prototype.enterResult = function(ctx) {
};

// Exit a parse tree produced by SQLParser#result.
SQLParserListener.prototype.exitResult = function(ctx) {
};


// Enter a parse tree produced by SQLParser#cast_specification.
SQLParserListener.prototype.enterCast_specification = function(ctx) {
};

// Exit a parse tree produced by SQLParser#cast_specification.
SQLParserListener.prototype.exitCast_specification = function(ctx) {
};


// Enter a parse tree produced by SQLParser#cast_operand.
SQLParserListener.prototype.enterCast_operand = function(ctx) {
};

// Exit a parse tree produced by SQLParser#cast_operand.
SQLParserListener.prototype.exitCast_operand = function(ctx) {
};


// Enter a parse tree produced by SQLParser#cast_target.
SQLParserListener.prototype.enterCast_target = function(ctx) {
};

// Exit a parse tree produced by SQLParser#cast_target.
SQLParserListener.prototype.exitCast_target = function(ctx) {
};


// Enter a parse tree produced by SQLParser#value_expression.
SQLParserListener.prototype.enterValue_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#value_expression.
SQLParserListener.prototype.exitValue_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#common_value_expression.
SQLParserListener.prototype.enterCommon_value_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#common_value_expression.
SQLParserListener.prototype.exitCommon_value_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#numeric_value_expression.
SQLParserListener.prototype.enterNumeric_value_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#numeric_value_expression.
SQLParserListener.prototype.exitNumeric_value_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#term.
SQLParserListener.prototype.enterTerm = function(ctx) {
};

// Exit a parse tree produced by SQLParser#term.
SQLParserListener.prototype.exitTerm = function(ctx) {
};


// Enter a parse tree produced by SQLParser#factor.
SQLParserListener.prototype.enterFactor = function(ctx) {
};

// Exit a parse tree produced by SQLParser#factor.
SQLParserListener.prototype.exitFactor = function(ctx) {
};


// Enter a parse tree produced by SQLParser#array.
SQLParserListener.prototype.enterArray = function(ctx) {
};

// Exit a parse tree produced by SQLParser#array.
SQLParserListener.prototype.exitArray = function(ctx) {
};


// Enter a parse tree produced by SQLParser#numeric_primary.
SQLParserListener.prototype.enterNumeric_primary = function(ctx) {
};

// Exit a parse tree produced by SQLParser#numeric_primary.
SQLParserListener.prototype.exitNumeric_primary = function(ctx) {
};


// Enter a parse tree produced by SQLParser#sign.
SQLParserListener.prototype.enterSign = function(ctx) {
};

// Exit a parse tree produced by SQLParser#sign.
SQLParserListener.prototype.exitSign = function(ctx) {
};


// Enter a parse tree produced by SQLParser#numeric_value_function.
SQLParserListener.prototype.enterNumeric_value_function = function(ctx) {
};

// Exit a parse tree produced by SQLParser#numeric_value_function.
SQLParserListener.prototype.exitNumeric_value_function = function(ctx) {
};


// Enter a parse tree produced by SQLParser#extract_expression.
SQLParserListener.prototype.enterExtract_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#extract_expression.
SQLParserListener.prototype.exitExtract_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#extract_field.
SQLParserListener.prototype.enterExtract_field = function(ctx) {
};

// Exit a parse tree produced by SQLParser#extract_field.
SQLParserListener.prototype.exitExtract_field = function(ctx) {
};


// Enter a parse tree produced by SQLParser#time_zone_field.
SQLParserListener.prototype.enterTime_zone_field = function(ctx) {
};

// Exit a parse tree produced by SQLParser#time_zone_field.
SQLParserListener.prototype.exitTime_zone_field = function(ctx) {
};


// Enter a parse tree produced by SQLParser#extract_source.
SQLParserListener.prototype.enterExtract_source = function(ctx) {
};

// Exit a parse tree produced by SQLParser#extract_source.
SQLParserListener.prototype.exitExtract_source = function(ctx) {
};


// Enter a parse tree produced by SQLParser#string_value_expression.
SQLParserListener.prototype.enterString_value_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#string_value_expression.
SQLParserListener.prototype.exitString_value_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#character_value_expression.
SQLParserListener.prototype.enterCharacter_value_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#character_value_expression.
SQLParserListener.prototype.exitCharacter_value_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#character_factor.
SQLParserListener.prototype.enterCharacter_factor = function(ctx) {
};

// Exit a parse tree produced by SQLParser#character_factor.
SQLParserListener.prototype.exitCharacter_factor = function(ctx) {
};


// Enter a parse tree produced by SQLParser#character_primary.
SQLParserListener.prototype.enterCharacter_primary = function(ctx) {
};

// Exit a parse tree produced by SQLParser#character_primary.
SQLParserListener.prototype.exitCharacter_primary = function(ctx) {
};


// Enter a parse tree produced by SQLParser#string_value_function.
SQLParserListener.prototype.enterString_value_function = function(ctx) {
};

// Exit a parse tree produced by SQLParser#string_value_function.
SQLParserListener.prototype.exitString_value_function = function(ctx) {
};


// Enter a parse tree produced by SQLParser#trim_function.
SQLParserListener.prototype.enterTrim_function = function(ctx) {
};

// Exit a parse tree produced by SQLParser#trim_function.
SQLParserListener.prototype.exitTrim_function = function(ctx) {
};


// Enter a parse tree produced by SQLParser#trim_operands.
SQLParserListener.prototype.enterTrim_operands = function(ctx) {
};

// Exit a parse tree produced by SQLParser#trim_operands.
SQLParserListener.prototype.exitTrim_operands = function(ctx) {
};


// Enter a parse tree produced by SQLParser#trim_specification.
SQLParserListener.prototype.enterTrim_specification = function(ctx) {
};

// Exit a parse tree produced by SQLParser#trim_specification.
SQLParserListener.prototype.exitTrim_specification = function(ctx) {
};


// Enter a parse tree produced by SQLParser#boolean_value_expression.
SQLParserListener.prototype.enterBoolean_value_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#boolean_value_expression.
SQLParserListener.prototype.exitBoolean_value_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#or_predicate.
SQLParserListener.prototype.enterOr_predicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#or_predicate.
SQLParserListener.prototype.exitOr_predicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#and_predicate.
SQLParserListener.prototype.enterAnd_predicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#and_predicate.
SQLParserListener.prototype.exitAnd_predicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#boolean_factor.
SQLParserListener.prototype.enterBoolean_factor = function(ctx) {
};

// Exit a parse tree produced by SQLParser#boolean_factor.
SQLParserListener.prototype.exitBoolean_factor = function(ctx) {
};


// Enter a parse tree produced by SQLParser#boolean_test.
SQLParserListener.prototype.enterBoolean_test = function(ctx) {
};

// Exit a parse tree produced by SQLParser#boolean_test.
SQLParserListener.prototype.exitBoolean_test = function(ctx) {
};


// Enter a parse tree produced by SQLParser#is_clause.
SQLParserListener.prototype.enterIs_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#is_clause.
SQLParserListener.prototype.exitIs_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#truth_value.
SQLParserListener.prototype.enterTruth_value = function(ctx) {
};

// Exit a parse tree produced by SQLParser#truth_value.
SQLParserListener.prototype.exitTruth_value = function(ctx) {
};


// Enter a parse tree produced by SQLParser#boolean_primary.
SQLParserListener.prototype.enterBoolean_primary = function(ctx) {
};

// Exit a parse tree produced by SQLParser#boolean_primary.
SQLParserListener.prototype.exitBoolean_primary = function(ctx) {
};


// Enter a parse tree produced by SQLParser#boolean_predicand.
SQLParserListener.prototype.enterBoolean_predicand = function(ctx) {
};

// Exit a parse tree produced by SQLParser#boolean_predicand.
SQLParserListener.prototype.exitBoolean_predicand = function(ctx) {
};


// Enter a parse tree produced by SQLParser#parenthesized_boolean_value_expression.
SQLParserListener.prototype.enterParenthesized_boolean_value_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#parenthesized_boolean_value_expression.
SQLParserListener.prototype.exitParenthesized_boolean_value_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#row_value_expression.
SQLParserListener.prototype.enterRow_value_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#row_value_expression.
SQLParserListener.prototype.exitRow_value_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#row_value_special_case.
SQLParserListener.prototype.enterRow_value_special_case = function(ctx) {
};

// Exit a parse tree produced by SQLParser#row_value_special_case.
SQLParserListener.prototype.exitRow_value_special_case = function(ctx) {
};


// Enter a parse tree produced by SQLParser#explicit_row_value_constructor.
SQLParserListener.prototype.enterExplicit_row_value_constructor = function(ctx) {
};

// Exit a parse tree produced by SQLParser#explicit_row_value_constructor.
SQLParserListener.prototype.exitExplicit_row_value_constructor = function(ctx) {
};


// Enter a parse tree produced by SQLParser#row_value_predicand.
SQLParserListener.prototype.enterRow_value_predicand = function(ctx) {
};

// Exit a parse tree produced by SQLParser#row_value_predicand.
SQLParserListener.prototype.exitRow_value_predicand = function(ctx) {
};


// Enter a parse tree produced by SQLParser#row_value_constructor_predicand.
SQLParserListener.prototype.enterRow_value_constructor_predicand = function(ctx) {
};

// Exit a parse tree produced by SQLParser#row_value_constructor_predicand.
SQLParserListener.prototype.exitRow_value_constructor_predicand = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_expression.
SQLParserListener.prototype.enterTable_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_expression.
SQLParserListener.prototype.exitTable_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#from_clause.
SQLParserListener.prototype.enterFrom_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#from_clause.
SQLParserListener.prototype.exitFrom_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_reference_list.
SQLParserListener.prototype.enterTable_reference_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_reference_list.
SQLParserListener.prototype.exitTable_reference_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_reference.
SQLParserListener.prototype.enterTable_reference = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_reference.
SQLParserListener.prototype.exitTable_reference = function(ctx) {
};


// Enter a parse tree produced by SQLParser#joined_table.
SQLParserListener.prototype.enterJoined_table = function(ctx) {
};

// Exit a parse tree produced by SQLParser#joined_table.
SQLParserListener.prototype.exitJoined_table = function(ctx) {
};


// Enter a parse tree produced by SQLParser#joined_table_primary.
SQLParserListener.prototype.enterJoined_table_primary = function(ctx) {
};

// Exit a parse tree produced by SQLParser#joined_table_primary.
SQLParserListener.prototype.exitJoined_table_primary = function(ctx) {
};


// Enter a parse tree produced by SQLParser#cross_join.
SQLParserListener.prototype.enterCross_join = function(ctx) {
};

// Exit a parse tree produced by SQLParser#cross_join.
SQLParserListener.prototype.exitCross_join = function(ctx) {
};


// Enter a parse tree produced by SQLParser#qualified_join.
SQLParserListener.prototype.enterQualified_join = function(ctx) {
};

// Exit a parse tree produced by SQLParser#qualified_join.
SQLParserListener.prototype.exitQualified_join = function(ctx) {
};


// Enter a parse tree produced by SQLParser#natural_join.
SQLParserListener.prototype.enterNatural_join = function(ctx) {
};

// Exit a parse tree produced by SQLParser#natural_join.
SQLParserListener.prototype.exitNatural_join = function(ctx) {
};


// Enter a parse tree produced by SQLParser#union_join.
SQLParserListener.prototype.enterUnion_join = function(ctx) {
};

// Exit a parse tree produced by SQLParser#union_join.
SQLParserListener.prototype.exitUnion_join = function(ctx) {
};


// Enter a parse tree produced by SQLParser#join_type.
SQLParserListener.prototype.enterJoin_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#join_type.
SQLParserListener.prototype.exitJoin_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#outer_join_type.
SQLParserListener.prototype.enterOuter_join_type = function(ctx) {
};

// Exit a parse tree produced by SQLParser#outer_join_type.
SQLParserListener.prototype.exitOuter_join_type = function(ctx) {
};


// Enter a parse tree produced by SQLParser#outer_join_type_part2.
SQLParserListener.prototype.enterOuter_join_type_part2 = function(ctx) {
};

// Exit a parse tree produced by SQLParser#outer_join_type_part2.
SQLParserListener.prototype.exitOuter_join_type_part2 = function(ctx) {
};


// Enter a parse tree produced by SQLParser#join_specification.
SQLParserListener.prototype.enterJoin_specification = function(ctx) {
};

// Exit a parse tree produced by SQLParser#join_specification.
SQLParserListener.prototype.exitJoin_specification = function(ctx) {
};


// Enter a parse tree produced by SQLParser#join_condition.
SQLParserListener.prototype.enterJoin_condition = function(ctx) {
};

// Exit a parse tree produced by SQLParser#join_condition.
SQLParserListener.prototype.exitJoin_condition = function(ctx) {
};


// Enter a parse tree produced by SQLParser#named_columns_join.
SQLParserListener.prototype.enterNamed_columns_join = function(ctx) {
};

// Exit a parse tree produced by SQLParser#named_columns_join.
SQLParserListener.prototype.exitNamed_columns_join = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_primary.
SQLParserListener.prototype.enterTable_primary = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_primary.
SQLParserListener.prototype.exitTable_primary = function(ctx) {
};


// Enter a parse tree produced by SQLParser#column_name_list.
SQLParserListener.prototype.enterColumn_name_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#column_name_list.
SQLParserListener.prototype.exitColumn_name_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#derived_table.
SQLParserListener.prototype.enterDerived_table = function(ctx) {
};

// Exit a parse tree produced by SQLParser#derived_table.
SQLParserListener.prototype.exitDerived_table = function(ctx) {
};


// Enter a parse tree produced by SQLParser#where_clause.
SQLParserListener.prototype.enterWhere_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#where_clause.
SQLParserListener.prototype.exitWhere_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#search_condition.
SQLParserListener.prototype.enterSearch_condition = function(ctx) {
};

// Exit a parse tree produced by SQLParser#search_condition.
SQLParserListener.prototype.exitSearch_condition = function(ctx) {
};


// Enter a parse tree produced by SQLParser#groupby_clause.
SQLParserListener.prototype.enterGroupby_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#groupby_clause.
SQLParserListener.prototype.exitGroupby_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#grouping_element_list.
SQLParserListener.prototype.enterGrouping_element_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#grouping_element_list.
SQLParserListener.prototype.exitGrouping_element_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#grouping_element.
SQLParserListener.prototype.enterGrouping_element = function(ctx) {
};

// Exit a parse tree produced by SQLParser#grouping_element.
SQLParserListener.prototype.exitGrouping_element = function(ctx) {
};


// Enter a parse tree produced by SQLParser#ordinary_grouping_set.
SQLParserListener.prototype.enterOrdinary_grouping_set = function(ctx) {
};

// Exit a parse tree produced by SQLParser#ordinary_grouping_set.
SQLParserListener.prototype.exitOrdinary_grouping_set = function(ctx) {
};


// Enter a parse tree produced by SQLParser#ordinary_grouping_set_list.
SQLParserListener.prototype.enterOrdinary_grouping_set_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#ordinary_grouping_set_list.
SQLParserListener.prototype.exitOrdinary_grouping_set_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#rollup_list.
SQLParserListener.prototype.enterRollup_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#rollup_list.
SQLParserListener.prototype.exitRollup_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#cube_list.
SQLParserListener.prototype.enterCube_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#cube_list.
SQLParserListener.prototype.exitCube_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#empty_grouping_set.
SQLParserListener.prototype.enterEmpty_grouping_set = function(ctx) {
};

// Exit a parse tree produced by SQLParser#empty_grouping_set.
SQLParserListener.prototype.exitEmpty_grouping_set = function(ctx) {
};


// Enter a parse tree produced by SQLParser#having_clause.
SQLParserListener.prototype.enterHaving_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#having_clause.
SQLParserListener.prototype.exitHaving_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#row_value_predicand_list.
SQLParserListener.prototype.enterRow_value_predicand_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#row_value_predicand_list.
SQLParserListener.prototype.exitRow_value_predicand_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#query_expression.
SQLParserListener.prototype.enterQuery_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#query_expression.
SQLParserListener.prototype.exitQuery_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#query_expression_body.
SQLParserListener.prototype.enterQuery_expression_body = function(ctx) {
};

// Exit a parse tree produced by SQLParser#query_expression_body.
SQLParserListener.prototype.exitQuery_expression_body = function(ctx) {
};


// Enter a parse tree produced by SQLParser#non_join_query_expression.
SQLParserListener.prototype.enterNon_join_query_expression = function(ctx) {
};

// Exit a parse tree produced by SQLParser#non_join_query_expression.
SQLParserListener.prototype.exitNon_join_query_expression = function(ctx) {
};


// Enter a parse tree produced by SQLParser#query_term.
SQLParserListener.prototype.enterQuery_term = function(ctx) {
};

// Exit a parse tree produced by SQLParser#query_term.
SQLParserListener.prototype.exitQuery_term = function(ctx) {
};


// Enter a parse tree produced by SQLParser#non_join_query_term.
SQLParserListener.prototype.enterNon_join_query_term = function(ctx) {
};

// Exit a parse tree produced by SQLParser#non_join_query_term.
SQLParserListener.prototype.exitNon_join_query_term = function(ctx) {
};


// Enter a parse tree produced by SQLParser#query_primary.
SQLParserListener.prototype.enterQuery_primary = function(ctx) {
};

// Exit a parse tree produced by SQLParser#query_primary.
SQLParserListener.prototype.exitQuery_primary = function(ctx) {
};


// Enter a parse tree produced by SQLParser#non_join_query_primary.
SQLParserListener.prototype.enterNon_join_query_primary = function(ctx) {
};

// Exit a parse tree produced by SQLParser#non_join_query_primary.
SQLParserListener.prototype.exitNon_join_query_primary = function(ctx) {
};


// Enter a parse tree produced by SQLParser#simple_table.
SQLParserListener.prototype.enterSimple_table = function(ctx) {
};

// Exit a parse tree produced by SQLParser#simple_table.
SQLParserListener.prototype.exitSimple_table = function(ctx) {
};


// Enter a parse tree produced by SQLParser#explicit_table.
SQLParserListener.prototype.enterExplicit_table = function(ctx) {
};

// Exit a parse tree produced by SQLParser#explicit_table.
SQLParserListener.prototype.exitExplicit_table = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_or_query_name.
SQLParserListener.prototype.enterTable_or_query_name = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_or_query_name.
SQLParserListener.prototype.exitTable_or_query_name = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_name.
SQLParserListener.prototype.enterTable_name = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_name.
SQLParserListener.prototype.exitTable_name = function(ctx) {
};


// Enter a parse tree produced by SQLParser#query_specification.
SQLParserListener.prototype.enterQuery_specification = function(ctx) {
};

// Exit a parse tree produced by SQLParser#query_specification.
SQLParserListener.prototype.exitQuery_specification = function(ctx) {
};


// Enter a parse tree produced by SQLParser#select_list.
SQLParserListener.prototype.enterSelect_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#select_list.
SQLParserListener.prototype.exitSelect_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#select_sublist.
SQLParserListener.prototype.enterSelect_sublist = function(ctx) {
};

// Exit a parse tree produced by SQLParser#select_sublist.
SQLParserListener.prototype.exitSelect_sublist = function(ctx) {
};


// Enter a parse tree produced by SQLParser#derived_column.
SQLParserListener.prototype.enterDerived_column = function(ctx) {
};

// Exit a parse tree produced by SQLParser#derived_column.
SQLParserListener.prototype.exitDerived_column = function(ctx) {
};


// Enter a parse tree produced by SQLParser#qualified_asterisk.
SQLParserListener.prototype.enterQualified_asterisk = function(ctx) {
};

// Exit a parse tree produced by SQLParser#qualified_asterisk.
SQLParserListener.prototype.exitQualified_asterisk = function(ctx) {
};


// Enter a parse tree produced by SQLParser#set_qualifier.
SQLParserListener.prototype.enterSet_qualifier = function(ctx) {
};

// Exit a parse tree produced by SQLParser#set_qualifier.
SQLParserListener.prototype.exitSet_qualifier = function(ctx) {
};


// Enter a parse tree produced by SQLParser#column_reference.
SQLParserListener.prototype.enterColumn_reference = function(ctx) {
};

// Exit a parse tree produced by SQLParser#column_reference.
SQLParserListener.prototype.exitColumn_reference = function(ctx) {
};


// Enter a parse tree produced by SQLParser#as_clause.
SQLParserListener.prototype.enterAs_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#as_clause.
SQLParserListener.prototype.exitAs_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#column_reference_list.
SQLParserListener.prototype.enterColumn_reference_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#column_reference_list.
SQLParserListener.prototype.exitColumn_reference_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#scalar_subquery.
SQLParserListener.prototype.enterScalar_subquery = function(ctx) {
};

// Exit a parse tree produced by SQLParser#scalar_subquery.
SQLParserListener.prototype.exitScalar_subquery = function(ctx) {
};


// Enter a parse tree produced by SQLParser#row_subquery.
SQLParserListener.prototype.enterRow_subquery = function(ctx) {
};

// Exit a parse tree produced by SQLParser#row_subquery.
SQLParserListener.prototype.exitRow_subquery = function(ctx) {
};


// Enter a parse tree produced by SQLParser#table_subquery.
SQLParserListener.prototype.enterTable_subquery = function(ctx) {
};

// Exit a parse tree produced by SQLParser#table_subquery.
SQLParserListener.prototype.exitTable_subquery = function(ctx) {
};


// Enter a parse tree produced by SQLParser#subquery.
SQLParserListener.prototype.enterSubquery = function(ctx) {
};

// Exit a parse tree produced by SQLParser#subquery.
SQLParserListener.prototype.exitSubquery = function(ctx) {
};


// Enter a parse tree produced by SQLParser#predicate.
SQLParserListener.prototype.enterPredicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#predicate.
SQLParserListener.prototype.exitPredicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#comparison_predicate.
SQLParserListener.prototype.enterComparison_predicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#comparison_predicate.
SQLParserListener.prototype.exitComparison_predicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#comp_op.
SQLParserListener.prototype.enterComp_op = function(ctx) {
};

// Exit a parse tree produced by SQLParser#comp_op.
SQLParserListener.prototype.exitComp_op = function(ctx) {
};


// Enter a parse tree produced by SQLParser#between_predicate.
SQLParserListener.prototype.enterBetween_predicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#between_predicate.
SQLParserListener.prototype.exitBetween_predicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#between_predicate_part_2.
SQLParserListener.prototype.enterBetween_predicate_part_2 = function(ctx) {
};

// Exit a parse tree produced by SQLParser#between_predicate_part_2.
SQLParserListener.prototype.exitBetween_predicate_part_2 = function(ctx) {
};


// Enter a parse tree produced by SQLParser#in_predicate.
SQLParserListener.prototype.enterIn_predicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#in_predicate.
SQLParserListener.prototype.exitIn_predicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#in_predicate_value.
SQLParserListener.prototype.enterIn_predicate_value = function(ctx) {
};

// Exit a parse tree produced by SQLParser#in_predicate_value.
SQLParserListener.prototype.exitIn_predicate_value = function(ctx) {
};


// Enter a parse tree produced by SQLParser#in_value_list.
SQLParserListener.prototype.enterIn_value_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#in_value_list.
SQLParserListener.prototype.exitIn_value_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#pattern_matching_predicate.
SQLParserListener.prototype.enterPattern_matching_predicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#pattern_matching_predicate.
SQLParserListener.prototype.exitPattern_matching_predicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#pattern_matcher.
SQLParserListener.prototype.enterPattern_matcher = function(ctx) {
};

// Exit a parse tree produced by SQLParser#pattern_matcher.
SQLParserListener.prototype.exitPattern_matcher = function(ctx) {
};


// Enter a parse tree produced by SQLParser#negativable_matcher.
SQLParserListener.prototype.enterNegativable_matcher = function(ctx) {
};

// Exit a parse tree produced by SQLParser#negativable_matcher.
SQLParserListener.prototype.exitNegativable_matcher = function(ctx) {
};


// Enter a parse tree produced by SQLParser#regex_matcher.
SQLParserListener.prototype.enterRegex_matcher = function(ctx) {
};

// Exit a parse tree produced by SQLParser#regex_matcher.
SQLParserListener.prototype.exitRegex_matcher = function(ctx) {
};


// Enter a parse tree produced by SQLParser#null_predicate.
SQLParserListener.prototype.enterNull_predicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#null_predicate.
SQLParserListener.prototype.exitNull_predicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#quantified_comparison_predicate.
SQLParserListener.prototype.enterQuantified_comparison_predicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#quantified_comparison_predicate.
SQLParserListener.prototype.exitQuantified_comparison_predicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#quantifier.
SQLParserListener.prototype.enterQuantifier = function(ctx) {
};

// Exit a parse tree produced by SQLParser#quantifier.
SQLParserListener.prototype.exitQuantifier = function(ctx) {
};


// Enter a parse tree produced by SQLParser#all.
SQLParserListener.prototype.enterAll = function(ctx) {
};

// Exit a parse tree produced by SQLParser#all.
SQLParserListener.prototype.exitAll = function(ctx) {
};


// Enter a parse tree produced by SQLParser#some.
SQLParserListener.prototype.enterSome = function(ctx) {
};

// Exit a parse tree produced by SQLParser#some.
SQLParserListener.prototype.exitSome = function(ctx) {
};


// Enter a parse tree produced by SQLParser#exists_predicate.
SQLParserListener.prototype.enterExists_predicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#exists_predicate.
SQLParserListener.prototype.exitExists_predicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#unique_predicate.
SQLParserListener.prototype.enterUnique_predicate = function(ctx) {
};

// Exit a parse tree produced by SQLParser#unique_predicate.
SQLParserListener.prototype.exitUnique_predicate = function(ctx) {
};


// Enter a parse tree produced by SQLParser#primary_datetime_field.
SQLParserListener.prototype.enterPrimary_datetime_field = function(ctx) {
};

// Exit a parse tree produced by SQLParser#primary_datetime_field.
SQLParserListener.prototype.exitPrimary_datetime_field = function(ctx) {
};


// Enter a parse tree produced by SQLParser#non_second_primary_datetime_field.
SQLParserListener.prototype.enterNon_second_primary_datetime_field = function(ctx) {
};

// Exit a parse tree produced by SQLParser#non_second_primary_datetime_field.
SQLParserListener.prototype.exitNon_second_primary_datetime_field = function(ctx) {
};


// Enter a parse tree produced by SQLParser#extended_datetime_field.
SQLParserListener.prototype.enterExtended_datetime_field = function(ctx) {
};

// Exit a parse tree produced by SQLParser#extended_datetime_field.
SQLParserListener.prototype.exitExtended_datetime_field = function(ctx) {
};


// Enter a parse tree produced by SQLParser#routine_invocation.
SQLParserListener.prototype.enterRoutine_invocation = function(ctx) {
};

// Exit a parse tree produced by SQLParser#routine_invocation.
SQLParserListener.prototype.exitRoutine_invocation = function(ctx) {
};


// Enter a parse tree produced by SQLParser#function_names_for_reserved_words.
SQLParserListener.prototype.enterFunction_names_for_reserved_words = function(ctx) {
};

// Exit a parse tree produced by SQLParser#function_names_for_reserved_words.
SQLParserListener.prototype.exitFunction_names_for_reserved_words = function(ctx) {
};


// Enter a parse tree produced by SQLParser#function_name.
SQLParserListener.prototype.enterFunction_name = function(ctx) {
};

// Exit a parse tree produced by SQLParser#function_name.
SQLParserListener.prototype.exitFunction_name = function(ctx) {
};


// Enter a parse tree produced by SQLParser#sql_argument_list.
SQLParserListener.prototype.enterSql_argument_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#sql_argument_list.
SQLParserListener.prototype.exitSql_argument_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#orderby_clause.
SQLParserListener.prototype.enterOrderby_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#orderby_clause.
SQLParserListener.prototype.exitOrderby_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#sort_specifier_list.
SQLParserListener.prototype.enterSort_specifier_list = function(ctx) {
};

// Exit a parse tree produced by SQLParser#sort_specifier_list.
SQLParserListener.prototype.exitSort_specifier_list = function(ctx) {
};


// Enter a parse tree produced by SQLParser#sort_specifier.
SQLParserListener.prototype.enterSort_specifier = function(ctx) {
};

// Exit a parse tree produced by SQLParser#sort_specifier.
SQLParserListener.prototype.exitSort_specifier = function(ctx) {
};


// Enter a parse tree produced by SQLParser#order_specification.
SQLParserListener.prototype.enterOrder_specification = function(ctx) {
};

// Exit a parse tree produced by SQLParser#order_specification.
SQLParserListener.prototype.exitOrder_specification = function(ctx) {
};


// Enter a parse tree produced by SQLParser#limit_clause.
SQLParserListener.prototype.enterLimit_clause = function(ctx) {
};

// Exit a parse tree produced by SQLParser#limit_clause.
SQLParserListener.prototype.exitLimit_clause = function(ctx) {
};


// Enter a parse tree produced by SQLParser#null_ordering.
SQLParserListener.prototype.enterNull_ordering = function(ctx) {
};

// Exit a parse tree produced by SQLParser#null_ordering.
SQLParserListener.prototype.exitNull_ordering = function(ctx) {
};


// Enter a parse tree produced by SQLParser#insert_statement.
SQLParserListener.prototype.enterInsert_statement = function(ctx) {
};

// Exit a parse tree produced by SQLParser#insert_statement.
SQLParserListener.prototype.exitInsert_statement = function(ctx) {
};

return SQLParserListener;

};

},{}],5:[function(require,module,exports){
// Generated from grammars/sql/SQLParser.g4 by ANTLR 4.5.1
// jshint ignore: start

module.exports = function (antlr4) {

// This class defines a complete generic visitor for a parse tree produced by SQLParser.

function SQLParserVisitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	return this;
}

SQLParserVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
SQLParserVisitor.prototype.constructor = SQLParserVisitor;

// Visit a parse tree produced by SQLParser#sql.
SQLParserVisitor.prototype.visitSql = function(ctx) {
};


// Visit a parse tree produced by SQLParser#statement.
SQLParserVisitor.prototype.visitStatement = function(ctx) {
};


// Visit a parse tree produced by SQLParser#data_statement.
SQLParserVisitor.prototype.visitData_statement = function(ctx) {
};


// Visit a parse tree produced by SQLParser#data_change_statement.
SQLParserVisitor.prototype.visitData_change_statement = function(ctx) {
};


// Visit a parse tree produced by SQLParser#schema_statement.
SQLParserVisitor.prototype.visitSchema_statement = function(ctx) {
};


// Visit a parse tree produced by SQLParser#index_statement.
SQLParserVisitor.prototype.visitIndex_statement = function(ctx) {
};


// Visit a parse tree produced by SQLParser#create_table_statement.
SQLParserVisitor.prototype.visitCreate_table_statement = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_elements.
SQLParserVisitor.prototype.visitTable_elements = function(ctx) {
};


// Visit a parse tree produced by SQLParser#field_element.
SQLParserVisitor.prototype.visitField_element = function(ctx) {
};


// Visit a parse tree produced by SQLParser#field_type.
SQLParserVisitor.prototype.visitField_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#param_clause.
SQLParserVisitor.prototype.visitParam_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#param.
SQLParserVisitor.prototype.visitParam = function(ctx) {
};


// Visit a parse tree produced by SQLParser#method_specifier.
SQLParserVisitor.prototype.visitMethod_specifier = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_space_specifier.
SQLParserVisitor.prototype.visitTable_space_specifier = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_space_name.
SQLParserVisitor.prototype.visitTable_space_name = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_partitioning_clauses.
SQLParserVisitor.prototype.visitTable_partitioning_clauses = function(ctx) {
};


// Visit a parse tree produced by SQLParser#range_partitions.
SQLParserVisitor.prototype.visitRange_partitions = function(ctx) {
};


// Visit a parse tree produced by SQLParser#range_value_clause_list.
SQLParserVisitor.prototype.visitRange_value_clause_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#range_value_clause.
SQLParserVisitor.prototype.visitRange_value_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#hash_partitions.
SQLParserVisitor.prototype.visitHash_partitions = function(ctx) {
};


// Visit a parse tree produced by SQLParser#individual_hash_partitions.
SQLParserVisitor.prototype.visitIndividual_hash_partitions = function(ctx) {
};


// Visit a parse tree produced by SQLParser#individual_hash_partition.
SQLParserVisitor.prototype.visitIndividual_hash_partition = function(ctx) {
};


// Visit a parse tree produced by SQLParser#hash_partitions_by_quantity.
SQLParserVisitor.prototype.visitHash_partitions_by_quantity = function(ctx) {
};


// Visit a parse tree produced by SQLParser#list_partitions.
SQLParserVisitor.prototype.visitList_partitions = function(ctx) {
};


// Visit a parse tree produced by SQLParser#list_value_clause_list.
SQLParserVisitor.prototype.visitList_value_clause_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#list_value_partition.
SQLParserVisitor.prototype.visitList_value_partition = function(ctx) {
};


// Visit a parse tree produced by SQLParser#column_partitions.
SQLParserVisitor.prototype.visitColumn_partitions = function(ctx) {
};


// Visit a parse tree produced by SQLParser#partition_name.
SQLParserVisitor.prototype.visitPartition_name = function(ctx) {
};


// Visit a parse tree produced by SQLParser#drop_table_statement.
SQLParserVisitor.prototype.visitDrop_table_statement = function(ctx) {
};


// Visit a parse tree produced by SQLParser#identifier.
SQLParserVisitor.prototype.visitIdentifier = function(ctx) {
};


// Visit a parse tree produced by SQLParser#nonreserved_keywords.
SQLParserVisitor.prototype.visitNonreserved_keywords = function(ctx) {
};


// Visit a parse tree produced by SQLParser#unsigned_literal.
SQLParserVisitor.prototype.visitUnsigned_literal = function(ctx) {
};


// Visit a parse tree produced by SQLParser#general_literal.
SQLParserVisitor.prototype.visitGeneral_literal = function(ctx) {
};


// Visit a parse tree produced by SQLParser#datetime_literal.
SQLParserVisitor.prototype.visitDatetime_literal = function(ctx) {
};


// Visit a parse tree produced by SQLParser#time_literal.
SQLParserVisitor.prototype.visitTime_literal = function(ctx) {
};


// Visit a parse tree produced by SQLParser#timestamp_literal.
SQLParserVisitor.prototype.visitTimestamp_literal = function(ctx) {
};


// Visit a parse tree produced by SQLParser#date_literal.
SQLParserVisitor.prototype.visitDate_literal = function(ctx) {
};


// Visit a parse tree produced by SQLParser#boolean_literal.
SQLParserVisitor.prototype.visitBoolean_literal = function(ctx) {
};


// Visit a parse tree produced by SQLParser#data_type.
SQLParserVisitor.prototype.visitData_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#predefined_type.
SQLParserVisitor.prototype.visitPredefined_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#network_type.
SQLParserVisitor.prototype.visitNetwork_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#character_string_type.
SQLParserVisitor.prototype.visitCharacter_string_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#type_length.
SQLParserVisitor.prototype.visitType_length = function(ctx) {
};


// Visit a parse tree produced by SQLParser#national_character_string_type.
SQLParserVisitor.prototype.visitNational_character_string_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#binary_large_object_string_type.
SQLParserVisitor.prototype.visitBinary_large_object_string_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#numeric_type.
SQLParserVisitor.prototype.visitNumeric_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#exact_numeric_type.
SQLParserVisitor.prototype.visitExact_numeric_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#approximate_numeric_type.
SQLParserVisitor.prototype.visitApproximate_numeric_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#precision_param.
SQLParserVisitor.prototype.visitPrecision_param = function(ctx) {
};


// Visit a parse tree produced by SQLParser#boolean_type.
SQLParserVisitor.prototype.visitBoolean_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#datetime_type.
SQLParserVisitor.prototype.visitDatetime_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#bit_type.
SQLParserVisitor.prototype.visitBit_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#binary_type.
SQLParserVisitor.prototype.visitBinary_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#value_expression_primary.
SQLParserVisitor.prototype.visitValue_expression_primary = function(ctx) {
};


// Visit a parse tree produced by SQLParser#parenthesized_value_expression.
SQLParserVisitor.prototype.visitParenthesized_value_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#nonparenthesized_value_expression_primary.
SQLParserVisitor.prototype.visitNonparenthesized_value_expression_primary = function(ctx) {
};


// Visit a parse tree produced by SQLParser#unsigned_value_specification.
SQLParserVisitor.prototype.visitUnsigned_value_specification = function(ctx) {
};


// Visit a parse tree produced by SQLParser#unsigned_numeric_literal.
SQLParserVisitor.prototype.visitUnsigned_numeric_literal = function(ctx) {
};


// Visit a parse tree produced by SQLParser#signed_numerical_literal.
SQLParserVisitor.prototype.visitSigned_numerical_literal = function(ctx) {
};


// Visit a parse tree produced by SQLParser#set_function_specification.
SQLParserVisitor.prototype.visitSet_function_specification = function(ctx) {
};


// Visit a parse tree produced by SQLParser#aggregate_function.
SQLParserVisitor.prototype.visitAggregate_function = function(ctx) {
};


// Visit a parse tree produced by SQLParser#general_set_function.
SQLParserVisitor.prototype.visitGeneral_set_function = function(ctx) {
};


// Visit a parse tree produced by SQLParser#set_function_type.
SQLParserVisitor.prototype.visitSet_function_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#filter_clause.
SQLParserVisitor.prototype.visitFilter_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#grouping_operation.
SQLParserVisitor.prototype.visitGrouping_operation = function(ctx) {
};


// Visit a parse tree produced by SQLParser#case_expression.
SQLParserVisitor.prototype.visitCase_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#case_abbreviation.
SQLParserVisitor.prototype.visitCase_abbreviation = function(ctx) {
};


// Visit a parse tree produced by SQLParser#case_specification.
SQLParserVisitor.prototype.visitCase_specification = function(ctx) {
};


// Visit a parse tree produced by SQLParser#simple_case.
SQLParserVisitor.prototype.visitSimple_case = function(ctx) {
};


// Visit a parse tree produced by SQLParser#searched_case.
SQLParserVisitor.prototype.visitSearched_case = function(ctx) {
};


// Visit a parse tree produced by SQLParser#simple_when_clause.
SQLParserVisitor.prototype.visitSimple_when_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#searched_when_clause.
SQLParserVisitor.prototype.visitSearched_when_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#else_clause.
SQLParserVisitor.prototype.visitElse_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#result.
SQLParserVisitor.prototype.visitResult = function(ctx) {
};


// Visit a parse tree produced by SQLParser#cast_specification.
SQLParserVisitor.prototype.visitCast_specification = function(ctx) {
};


// Visit a parse tree produced by SQLParser#cast_operand.
SQLParserVisitor.prototype.visitCast_operand = function(ctx) {
};


// Visit a parse tree produced by SQLParser#cast_target.
SQLParserVisitor.prototype.visitCast_target = function(ctx) {
};


// Visit a parse tree produced by SQLParser#value_expression.
SQLParserVisitor.prototype.visitValue_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#common_value_expression.
SQLParserVisitor.prototype.visitCommon_value_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#numeric_value_expression.
SQLParserVisitor.prototype.visitNumeric_value_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#term.
SQLParserVisitor.prototype.visitTerm = function(ctx) {
};


// Visit a parse tree produced by SQLParser#factor.
SQLParserVisitor.prototype.visitFactor = function(ctx) {
};


// Visit a parse tree produced by SQLParser#array.
SQLParserVisitor.prototype.visitArray = function(ctx) {
};


// Visit a parse tree produced by SQLParser#numeric_primary.
SQLParserVisitor.prototype.visitNumeric_primary = function(ctx) {
};


// Visit a parse tree produced by SQLParser#sign.
SQLParserVisitor.prototype.visitSign = function(ctx) {
};


// Visit a parse tree produced by SQLParser#numeric_value_function.
SQLParserVisitor.prototype.visitNumeric_value_function = function(ctx) {
};


// Visit a parse tree produced by SQLParser#extract_expression.
SQLParserVisitor.prototype.visitExtract_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#extract_field.
SQLParserVisitor.prototype.visitExtract_field = function(ctx) {
};


// Visit a parse tree produced by SQLParser#time_zone_field.
SQLParserVisitor.prototype.visitTime_zone_field = function(ctx) {
};


// Visit a parse tree produced by SQLParser#extract_source.
SQLParserVisitor.prototype.visitExtract_source = function(ctx) {
};


// Visit a parse tree produced by SQLParser#string_value_expression.
SQLParserVisitor.prototype.visitString_value_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#character_value_expression.
SQLParserVisitor.prototype.visitCharacter_value_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#character_factor.
SQLParserVisitor.prototype.visitCharacter_factor = function(ctx) {
};


// Visit a parse tree produced by SQLParser#character_primary.
SQLParserVisitor.prototype.visitCharacter_primary = function(ctx) {
};


// Visit a parse tree produced by SQLParser#string_value_function.
SQLParserVisitor.prototype.visitString_value_function = function(ctx) {
};


// Visit a parse tree produced by SQLParser#trim_function.
SQLParserVisitor.prototype.visitTrim_function = function(ctx) {
};


// Visit a parse tree produced by SQLParser#trim_operands.
SQLParserVisitor.prototype.visitTrim_operands = function(ctx) {
};


// Visit a parse tree produced by SQLParser#trim_specification.
SQLParserVisitor.prototype.visitTrim_specification = function(ctx) {
};


// Visit a parse tree produced by SQLParser#boolean_value_expression.
SQLParserVisitor.prototype.visitBoolean_value_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#or_predicate.
SQLParserVisitor.prototype.visitOr_predicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#and_predicate.
SQLParserVisitor.prototype.visitAnd_predicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#boolean_factor.
SQLParserVisitor.prototype.visitBoolean_factor = function(ctx) {
};


// Visit a parse tree produced by SQLParser#boolean_test.
SQLParserVisitor.prototype.visitBoolean_test = function(ctx) {
};


// Visit a parse tree produced by SQLParser#is_clause.
SQLParserVisitor.prototype.visitIs_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#truth_value.
SQLParserVisitor.prototype.visitTruth_value = function(ctx) {
};


// Visit a parse tree produced by SQLParser#boolean_primary.
SQLParserVisitor.prototype.visitBoolean_primary = function(ctx) {
};


// Visit a parse tree produced by SQLParser#boolean_predicand.
SQLParserVisitor.prototype.visitBoolean_predicand = function(ctx) {
};


// Visit a parse tree produced by SQLParser#parenthesized_boolean_value_expression.
SQLParserVisitor.prototype.visitParenthesized_boolean_value_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#row_value_expression.
SQLParserVisitor.prototype.visitRow_value_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#row_value_special_case.
SQLParserVisitor.prototype.visitRow_value_special_case = function(ctx) {
};


// Visit a parse tree produced by SQLParser#explicit_row_value_constructor.
SQLParserVisitor.prototype.visitExplicit_row_value_constructor = function(ctx) {
};


// Visit a parse tree produced by SQLParser#row_value_predicand.
SQLParserVisitor.prototype.visitRow_value_predicand = function(ctx) {
};


// Visit a parse tree produced by SQLParser#row_value_constructor_predicand.
SQLParserVisitor.prototype.visitRow_value_constructor_predicand = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_expression.
SQLParserVisitor.prototype.visitTable_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#from_clause.
SQLParserVisitor.prototype.visitFrom_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_reference_list.
SQLParserVisitor.prototype.visitTable_reference_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_reference.
SQLParserVisitor.prototype.visitTable_reference = function(ctx) {
};


// Visit a parse tree produced by SQLParser#joined_table.
SQLParserVisitor.prototype.visitJoined_table = function(ctx) {
};


// Visit a parse tree produced by SQLParser#joined_table_primary.
SQLParserVisitor.prototype.visitJoined_table_primary = function(ctx) {
};


// Visit a parse tree produced by SQLParser#cross_join.
SQLParserVisitor.prototype.visitCross_join = function(ctx) {
};


// Visit a parse tree produced by SQLParser#qualified_join.
SQLParserVisitor.prototype.visitQualified_join = function(ctx) {
};


// Visit a parse tree produced by SQLParser#natural_join.
SQLParserVisitor.prototype.visitNatural_join = function(ctx) {
};


// Visit a parse tree produced by SQLParser#union_join.
SQLParserVisitor.prototype.visitUnion_join = function(ctx) {
};


// Visit a parse tree produced by SQLParser#join_type.
SQLParserVisitor.prototype.visitJoin_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#outer_join_type.
SQLParserVisitor.prototype.visitOuter_join_type = function(ctx) {
};


// Visit a parse tree produced by SQLParser#outer_join_type_part2.
SQLParserVisitor.prototype.visitOuter_join_type_part2 = function(ctx) {
};


// Visit a parse tree produced by SQLParser#join_specification.
SQLParserVisitor.prototype.visitJoin_specification = function(ctx) {
};


// Visit a parse tree produced by SQLParser#join_condition.
SQLParserVisitor.prototype.visitJoin_condition = function(ctx) {
};


// Visit a parse tree produced by SQLParser#named_columns_join.
SQLParserVisitor.prototype.visitNamed_columns_join = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_primary.
SQLParserVisitor.prototype.visitTable_primary = function(ctx) {
};


// Visit a parse tree produced by SQLParser#column_name_list.
SQLParserVisitor.prototype.visitColumn_name_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#derived_table.
SQLParserVisitor.prototype.visitDerived_table = function(ctx) {
};


// Visit a parse tree produced by SQLParser#where_clause.
SQLParserVisitor.prototype.visitWhere_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#search_condition.
SQLParserVisitor.prototype.visitSearch_condition = function(ctx) {
};


// Visit a parse tree produced by SQLParser#groupby_clause.
SQLParserVisitor.prototype.visitGroupby_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#grouping_element_list.
SQLParserVisitor.prototype.visitGrouping_element_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#grouping_element.
SQLParserVisitor.prototype.visitGrouping_element = function(ctx) {
};


// Visit a parse tree produced by SQLParser#ordinary_grouping_set.
SQLParserVisitor.prototype.visitOrdinary_grouping_set = function(ctx) {
};


// Visit a parse tree produced by SQLParser#ordinary_grouping_set_list.
SQLParserVisitor.prototype.visitOrdinary_grouping_set_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#rollup_list.
SQLParserVisitor.prototype.visitRollup_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#cube_list.
SQLParserVisitor.prototype.visitCube_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#empty_grouping_set.
SQLParserVisitor.prototype.visitEmpty_grouping_set = function(ctx) {
};


// Visit a parse tree produced by SQLParser#having_clause.
SQLParserVisitor.prototype.visitHaving_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#row_value_predicand_list.
SQLParserVisitor.prototype.visitRow_value_predicand_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#query_expression.
SQLParserVisitor.prototype.visitQuery_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#query_expression_body.
SQLParserVisitor.prototype.visitQuery_expression_body = function(ctx) {
};


// Visit a parse tree produced by SQLParser#non_join_query_expression.
SQLParserVisitor.prototype.visitNon_join_query_expression = function(ctx) {
};


// Visit a parse tree produced by SQLParser#query_term.
SQLParserVisitor.prototype.visitQuery_term = function(ctx) {
};


// Visit a parse tree produced by SQLParser#non_join_query_term.
SQLParserVisitor.prototype.visitNon_join_query_term = function(ctx) {
};


// Visit a parse tree produced by SQLParser#query_primary.
SQLParserVisitor.prototype.visitQuery_primary = function(ctx) {
};


// Visit a parse tree produced by SQLParser#non_join_query_primary.
SQLParserVisitor.prototype.visitNon_join_query_primary = function(ctx) {
};


// Visit a parse tree produced by SQLParser#simple_table.
SQLParserVisitor.prototype.visitSimple_table = function(ctx) {
};


// Visit a parse tree produced by SQLParser#explicit_table.
SQLParserVisitor.prototype.visitExplicit_table = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_or_query_name.
SQLParserVisitor.prototype.visitTable_or_query_name = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_name.
SQLParserVisitor.prototype.visitTable_name = function(ctx) {
};


// Visit a parse tree produced by SQLParser#query_specification.
SQLParserVisitor.prototype.visitQuery_specification = function(ctx) {
};


// Visit a parse tree produced by SQLParser#select_list.
SQLParserVisitor.prototype.visitSelect_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#select_sublist.
SQLParserVisitor.prototype.visitSelect_sublist = function(ctx) {
};


// Visit a parse tree produced by SQLParser#derived_column.
SQLParserVisitor.prototype.visitDerived_column = function(ctx) {
};


// Visit a parse tree produced by SQLParser#qualified_asterisk.
SQLParserVisitor.prototype.visitQualified_asterisk = function(ctx) {
};


// Visit a parse tree produced by SQLParser#set_qualifier.
SQLParserVisitor.prototype.visitSet_qualifier = function(ctx) {
};


// Visit a parse tree produced by SQLParser#column_reference.
SQLParserVisitor.prototype.visitColumn_reference = function(ctx) {
};


// Visit a parse tree produced by SQLParser#as_clause.
SQLParserVisitor.prototype.visitAs_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#column_reference_list.
SQLParserVisitor.prototype.visitColumn_reference_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#scalar_subquery.
SQLParserVisitor.prototype.visitScalar_subquery = function(ctx) {
};


// Visit a parse tree produced by SQLParser#row_subquery.
SQLParserVisitor.prototype.visitRow_subquery = function(ctx) {
};


// Visit a parse tree produced by SQLParser#table_subquery.
SQLParserVisitor.prototype.visitTable_subquery = function(ctx) {
};


// Visit a parse tree produced by SQLParser#subquery.
SQLParserVisitor.prototype.visitSubquery = function(ctx) {
};


// Visit a parse tree produced by SQLParser#predicate.
SQLParserVisitor.prototype.visitPredicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#comparison_predicate.
SQLParserVisitor.prototype.visitComparison_predicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#comp_op.
SQLParserVisitor.prototype.visitComp_op = function(ctx) {
};


// Visit a parse tree produced by SQLParser#between_predicate.
SQLParserVisitor.prototype.visitBetween_predicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#between_predicate_part_2.
SQLParserVisitor.prototype.visitBetween_predicate_part_2 = function(ctx) {
};


// Visit a parse tree produced by SQLParser#in_predicate.
SQLParserVisitor.prototype.visitIn_predicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#in_predicate_value.
SQLParserVisitor.prototype.visitIn_predicate_value = function(ctx) {
};


// Visit a parse tree produced by SQLParser#in_value_list.
SQLParserVisitor.prototype.visitIn_value_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#pattern_matching_predicate.
SQLParserVisitor.prototype.visitPattern_matching_predicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#pattern_matcher.
SQLParserVisitor.prototype.visitPattern_matcher = function(ctx) {
};


// Visit a parse tree produced by SQLParser#negativable_matcher.
SQLParserVisitor.prototype.visitNegativable_matcher = function(ctx) {
};


// Visit a parse tree produced by SQLParser#regex_matcher.
SQLParserVisitor.prototype.visitRegex_matcher = function(ctx) {
};


// Visit a parse tree produced by SQLParser#null_predicate.
SQLParserVisitor.prototype.visitNull_predicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#quantified_comparison_predicate.
SQLParserVisitor.prototype.visitQuantified_comparison_predicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#quantifier.
SQLParserVisitor.prototype.visitQuantifier = function(ctx) {
};


// Visit a parse tree produced by SQLParser#all.
SQLParserVisitor.prototype.visitAll = function(ctx) {
};


// Visit a parse tree produced by SQLParser#some.
SQLParserVisitor.prototype.visitSome = function(ctx) {
};


// Visit a parse tree produced by SQLParser#exists_predicate.
SQLParserVisitor.prototype.visitExists_predicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#unique_predicate.
SQLParserVisitor.prototype.visitUnique_predicate = function(ctx) {
};


// Visit a parse tree produced by SQLParser#primary_datetime_field.
SQLParserVisitor.prototype.visitPrimary_datetime_field = function(ctx) {
};


// Visit a parse tree produced by SQLParser#non_second_primary_datetime_field.
SQLParserVisitor.prototype.visitNon_second_primary_datetime_field = function(ctx) {
};


// Visit a parse tree produced by SQLParser#extended_datetime_field.
SQLParserVisitor.prototype.visitExtended_datetime_field = function(ctx) {
};


// Visit a parse tree produced by SQLParser#routine_invocation.
SQLParserVisitor.prototype.visitRoutine_invocation = function(ctx) {
};


// Visit a parse tree produced by SQLParser#function_names_for_reserved_words.
SQLParserVisitor.prototype.visitFunction_names_for_reserved_words = function(ctx) {
};


// Visit a parse tree produced by SQLParser#function_name.
SQLParserVisitor.prototype.visitFunction_name = function(ctx) {
};


// Visit a parse tree produced by SQLParser#sql_argument_list.
SQLParserVisitor.prototype.visitSql_argument_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#orderby_clause.
SQLParserVisitor.prototype.visitOrderby_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#sort_specifier_list.
SQLParserVisitor.prototype.visitSort_specifier_list = function(ctx) {
};


// Visit a parse tree produced by SQLParser#sort_specifier.
SQLParserVisitor.prototype.visitSort_specifier = function(ctx) {
};


// Visit a parse tree produced by SQLParser#order_specification.
SQLParserVisitor.prototype.visitOrder_specification = function(ctx) {
};


// Visit a parse tree produced by SQLParser#limit_clause.
SQLParserVisitor.prototype.visitLimit_clause = function(ctx) {
};


// Visit a parse tree produced by SQLParser#null_ordering.
SQLParserVisitor.prototype.visitNull_ordering = function(ctx) {
};


// Visit a parse tree produced by SQLParser#insert_statement.
SQLParserVisitor.prototype.visitInsert_statement = function(ctx) {
};

return SQLParserVisitor;
};
},{}],6:[function(require,module,exports){
var SQLLexer = require('./lib/SQLLexer.js');
var SQLParser = require('./lib/SQLParser.js');
var SQLParserListener = require('./lib/SQLParserListener');
var SQLParserVisitor = require('./lib/SQLParserVisitor');

(function (root, factory) {

    if (typeof define === 'function' && define.amd) {
        // AMD
        define(['antlr4'], factory);
    } else if (typeof exports === 'object') {
        // Node, CommonJS-like
        module.exports = factory(require('antlr4'));
    } else {
        // Browser globals (root is window)
        root.returnExports = factory(root.antlr4);
    }
}(this, function (antlr4) {

    var listener = SQLParserListener(antlr4);

    return {
      SQLLexer: SQLLexer(antlr4),
      SQLParser: SQLParser(antlr4, listener), 
      SQLParserListener: listener,
      SQLParserVisitor: SQLParserVisitor(antlr4)
    };

}));
},{"./lib/SQLLexer.js":2,"./lib/SQLParser.js":3,"./lib/SQLParserListener":4,"./lib/SQLParserVisitor":5,"antlr4":47}],7:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = require('./Token').Token;
var Lexer = require('./Lexer').Lexer;
var Interval = require('./IntervalSet').Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function() {
	return 0;
};

BufferedTokenStream.prototype.release = function(marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function() {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function(index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function(index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function() {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function(i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function(n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function(start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function(i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function(k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function(k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) { // return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function(i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function() {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function() {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function(tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
};

// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (this.tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1,
			Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1,
			Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function() {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function(interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function() {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;

},{"./IntervalSet":12,"./Lexer":14,"./Token":20}],8:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = require('./Token').CommonToken;

function TokenFactory() {
	return this;
}

function CommonTokenFactory(copyText) {
	TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText===undefined ? false : copyText;
	return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !==null) {
        t.text = text;
    } else if (this.copyText && source[1] !==null) {
        t.text = source[1].getText(start,stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function(type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;

},{"./Token":20}],9:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = require('./Token').Token;
var BufferedTokenStream = require('./BufferedTokenStream').BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
	BufferedTokenStream.call(this, lexer);
    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function(i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function(k) {
    if (k===0 || this.index-k<0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function(k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {
    var n = 0;
    this.fill();
    for (var i =0; i< this.tokens.length;i++) {
        var t = this.tokens[i];
        if( t.channel===this.channel) {
            n += 1;
        }
        if( t.type===Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;
},{"./BufferedTokenStream":7,"./Token":20}],10:[function(require,module,exports){
//
//  [The "BSD license"]
//   Copyright (c) 2012 Terence Parr
//   Copyright (c) 2012 Sam Harwell
//   Copyright (c) 2014 Eric Vergnaud
//   All rights reserved.
// 
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions
//   are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. The name of the author may not be used to endorse or promote products
//      derived from this software without specific prior written permission.
// 
//   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
// 
var InputStream = require('./InputStream').InputStream;
try {
	var fs = require("fs");
} catch(ex) {
	// probably running from browser, no "Node.js/fs" makes sense 
}
	
function FileStream(fileName) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;

},{"./InputStream":11,"fs":1}],11:[function(require,module,exports){
// 
//  [The "BSD license"]
//   Copyright (c) 2012 Terence Parr
//   Copyright (c) 2012 Sam Harwell
//   Copyright (c) 2014 Eric Vergnaud
//   All rights reserved.
// 
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions
//   are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. The name of the author may not be used to endorse or promote products
//      derived from this software without specific prior written permission.
// 
//   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 

var Token = require('./Token').Token;

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream) {
	stream._index = 0;
	stream.data = [];
	for (var i = 0; i < stream.strdata.length; i++) {
		stream.data.push(stream.strdata.charCodeAt(i));
	}
	stream._size = stream.data.length;
}

function InputStream(data) {
	this.name = "<empty>";
	this.strdata = data;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get : function() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get : function() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function() {
	this._index = 0;
};

InputStream.prototype.consume = function() {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw ("cannot consume EOF");
	}
	this._index += 1;
};

InputStream.prototype.LA = function(offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) { // invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function(offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function() {
	return -1;
};

InputStream.prototype.release = function(marker) {
};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function(_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
								// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function(start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		return this.strdata.slice(start, stop + 1);
	}
};

InputStream.prototype.toString = function() {
	return this.strdata;
};

exports.InputStream = InputStream;

},{"./Token":20}],12:[function(require,module,exports){
/*jslint smarttabs:true */

var Token = require('./Token').Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function(item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function() {
	if(this.start===this.stop-1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop-1).toString();
	}
};


Object.defineProperty(Interval.prototype, "length", {
	get : function() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function(v) {
	if (this.intervals === null || this.intervals.length===0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function(v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function(l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function(v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
				this.intervals[k].start = v.start;
				return;
			}
			// overlapping range -> adjust and reduce
			else if (v.start <= i.stop) {
				this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
				this.reduce(k);
				return;
			}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function(other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function(k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function(start, stop) {
    var result = new IntervalSet();
    result.addInterval(new Interval(start,stop+1));
    for(var i=0; i<this.intervals.length; i++) {
        result.removeRange(this.intervals[i]);
    }
    return result;
};

IntervalSet.prototype.contains = function(item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if(this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get : function() {
		var len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
});

IntervalSet.prototype.removeRange = function(v) {
    if(v.start===v.stop-1) {
        this.removeOne(v.start);
    } else if (this.intervals!==null) {
        var k = 0;
        for(var n=0; n<this.intervals.length; n++) {
            var i = this.intervals[k];
            // intervals are ordered
            if (v.stop<=i.start) {
                return;
            }
            // check for including range, split it
            else if(v.start>i.start && v.stop<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
                var x = new Interval(v.stop, i.stop);
                this.intervals.splice(k, 0, x);
                return;
            }
            // check for included range, remove it
            else if(v.start<=i.start && v.stop>=i.stop) {
                this.intervals.splice(k, 1);
                k = k - 1; // need another pass
            }
            // check for lower boundary
            else if(v.start<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
            }
            // check for upper boundary
            else if(v.stop<i.stop) {
                this.intervals[k] = new Interval(v.stop, i.stop);
            }
            k += 1;
        }
    }
};

IntervalSet.prototype.removeOne = function(v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
				this.intervals.splice(k, 1);
				return;
			}
			// check for lower boundary
			else if (v === i.start) {
				this.intervals[k] = new Interval(i.start + 1, i.stop);
				return;
			}
			// check for upper boundary
			else if (v === i.stop - 1) {
				this.intervals[k] = new Interval(i.start, i.stop - 1);
				return;
			}
			// split existing range
			else if (v < i.stop - 1) {
				var x = new Interval(i.start, v);
				i.start = v + 1;
				this.intervals.splice(k, 0, x);
				return;
			}
		}
	}
};

IntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if(literalNames!==null || symbolicNames!==null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if(elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toIndexString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop-1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;

},{"./Token":20}],13:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

var Set = require('./Utils').Set;
var BitSet = require('./Utils').BitSet;
var Token = require('./Token').Token;
var ATNConfig = require('./atn/ATNConfig').ATNConfig;
var Interval = require('./IntervalSet').Interval;
var IntervalSet = require('./IntervalSet').IntervalSet;
var RuleStopState = require('./atn/ATNState').RuleStopState;
var RuleTransition = require('./atn/Transition').RuleTransition;
var NotSetTransition = require('./atn/Transition').NotSetTransition;
var WildcardTransition = require('./atn/Transition').WildcardTransition;
var AbstractPredicateTransition = require('./atn/Transition').AbstractPredicateTransition;

var pc = require('./PredictionContext');
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer (atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;


//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function(s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for(var alt=0; alt< count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
              look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
	ctx = ctx || null;
    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};
    
//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({state:s, alt:0}, ctx);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState ) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for(var i=0; i<ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for(var j=0; j<s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition ) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if( t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;


},{"./IntervalSet":12,"./PredictionContext":17,"./Token":20,"./Utils":21,"./atn/ATNConfig":23,"./atn/ATNState":28,"./atn/Transition":36}],14:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  this SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  this SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest
//  of speed.
///

var Token = require('./Token').Token;
var Recognizer = require('./Recognizer').Recognizer;
var CommonTokenFactory = require('./CommonTokenFactory').CommonTokenFactory;
var LexerNoViableAltException = require('./error/Errors').LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [ this, input ];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = '\u0000';
Lexer.MAX_CHAR_VALUE = '\uFFFE';

Lexer.prototype.reset = function() {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function() {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
					this.notifyListeners(e); // report error
					this.recover(e);
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function() {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function() {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function(m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function(m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function() {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get : function() {
		return this._input;
	},
	set : function(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get : function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function(token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function() {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type,
			this._text, this._channel, this._tokenStartCharIndex, this
					.getCharIndex() - 1, this._tokenStartLine,
			this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function() {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
			null, Token.DEFAULT_CHANNEL, this._input.index,
			this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get : function() {
		return this.type;
	},
	set : function(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get : function() {
		return this._interp.line;
	},
	set : function(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get : function() {
		return this._interp.column;
	},
	set : function(column) {
		this._interp.column = column;
	}
});


// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function() {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set : function(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function() {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function(e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine,
			this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function(s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function(c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function(c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function(re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;

},{"./CommonTokenFactory":8,"./Recognizer":18,"./Token":20,"./error/Errors":45}],15:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  this SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  this SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var Token = require('./Token').Token;
var ParseTreeListener = require('./tree/Tree').ParseTreeListener;
var Recognizer = require('./Recognizer').Recognizer;
var DefaultErrorStrategy = require('./error/ErrorStrategy').DefaultErrorStrategy;
var ATNDeserializer = require('./atn/ATNDeserializer').ATNDeserializer;
var ATNDeserializationOptions = require('./atn/ATNDeserializationOptions').ATNDeserializationOptions;

function TraceListener(parser) {
	ParseTreeListener.call(this);
    this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function(ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function( node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function(ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function() {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function(ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function() {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function() {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function(listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function(listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function() {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function() {
	if (this._parseListeners !== null) {
        var ctx = this._ctx;
		this._parseListeners.map(function(listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function() {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
        var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function(listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function() {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function(factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function() {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions)
				.deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = require('./Lexer').Lexer;

Parser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().getTokenSource();
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function() {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function(input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function() {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function(input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function() {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function() {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
		if (hasListener) {
			this._parseListeners.map(function(listener) {
				listener.visitTerminal(node);
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function() {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function(localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function() {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function(localctx, altNum) {
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function() {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length-1];
	}
};

Parser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,
		precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function(parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function(ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function(localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length-1];
};

Parser.prototype.inContext = function(context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function(symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function() {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function() {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function(ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function(p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function() {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function() {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function() {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function(trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;
},{"./Lexer":14,"./Recognizer":18,"./Token":20,"./atn/ATNDeserializationOptions":25,"./atn/ATNDeserializer":26,"./error/ErrorStrategy":44,"./tree/Tree":48}],16:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = require('./RuleContext').RuleContext;
var Tree = require('./tree/Tree');
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = require("./IntervalSet").Interval;

function ParserRuleContext(parent, invokingStateNumber) {
	parent = parent || null;
	invokingStateNumber = invokingStateNumber || null;
	RuleContext.call(this, parent, invokingStateNumber);
	this.ruleIndex = -1;
    // * If we are debugging or building a parse tree for a visitor,
    // we need to track all of the tokens and rule invocations associated
    // with this rule's context. This is empty for parsing w/o tree constr.
    // operation because we don't the need to track the details about
    // how we parse this rule.
    // /
    this.children = null;
    this.start = null;
    this.stop = null;
    // The exception that forced this rule to return. If the rule successfully
    // completed, this is {@code null}.
    this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function(ctx) {
    // from RuleContext
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function(listener) {
};

ParserRuleContext.prototype.exitRule = function(listener) {
};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function(child) {
    if (this.children === null) {
        this.children = [];
    }
    this.children.push(child);
    return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function() {
    if (this.children !== null) {
        this.children.pop();
    }
};

ParserRuleContext.prototype.addTokenNode = function(token) {
    var node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.addErrorNode = function(badToken) {
    var node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.getChild = function(i, type) {
	type = type || null;
	if (type === null) {
		return this.children.length>=i ? this.children[i] : null;
	} else {
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if(child instanceof type) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
		}
		return null;
    }
};


ParserRuleContext.prototype.getToken = function(ttype, i) {
	for(var j=0; j<this.children.length; j++) {
		var child = this.children[j];
		if (child instanceof TerminalNode) {
			if (child.symbol.type === ttype) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
        }
	}
    return null;
};

ParserRuleContext.prototype.getTokens = function(ttype ) {
    if (this.children=== null) {
        return [];
    } else {
		var tokens = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					tokens.push(child);
				}
			}
		}
		return tokens;
    }
};

ParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {
    return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {
    if (this.children=== null) {
        return [];
    } else {
		var contexts = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof ctxType) {
				contexts.push(child);
			}
		}
		return contexts;
	}
};

ParserRuleContext.prototype.getChildCount = function() {
	if (this.children=== null) {
		return 0;
	} else {
		return this.children.length;
	}
};

ParserRuleContext.prototype.getSourceInterval = function() {
    if( this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
    } else {
        return Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
	ParserRuleContext.call(parent, invokingStateNumber);
    this.ruleIndex = ruleIndex;
    return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;
},{"./IntervalSet":12,"./RuleContext":19,"./tree/Tree":48}],17:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

var RuleContext = require('./RuleContext').RuleContext;

function PredictionContext(cachedHashString) {
	this.cachedHashString = cachedHashString;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function() {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function() {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashString = function() {
	return this.cachedHashString;
};

function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}

function calculateEmptyHashString() {
	return "";
}

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = {};
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function(ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache[ctx];
	if (existing !== null) {
		return existing;
	}
	this.cache[ctx] = ctx;
	return ctx;
};

PredictionContextCache.prototype.get = function(ctx) {
	return this.cache[ctx] || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get : function() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashString = parent !== null ? calculateHashString(parent, returnState)
			: calculateEmptyHashString();
	PredictionContext.call(this, hashString);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function(parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get : function() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function(index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashString() !== other.hashString()) {
		return false; // can't be same if hash is different
	} else {
		if(this.returnState !== other.returnState)
            return false;
        else if(this.parentCtx==null)
            return other.parentCtx==null
		else
            return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.hashString = function() {
	return this.cachedHashString;
};

SingletonPredictionContext.prototype.toString = function() {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === this.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function() {
	return true;
};

EmptyPredictionContext.prototype.getParent = function(index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function(other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function() {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var hash = calculateHashString(parents, returnStates);
	PredictionContext.call(this, hash);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function() {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get : function() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function(index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function(index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashString !== other.hashString()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates &&
				this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function() {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}

function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}

function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			var payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [ singleParent, singleParent ];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [ a.returnState, b.returnState ];
		var parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			var payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			var payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			var ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = {};

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(parent in uniqueParents)) {
			uniqueParents[parent] = parent;
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents[parents[q]];
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited[context] || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited[context] = existing;
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited[context] = context;
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited[updated] = updated;
	visited[context] = updated;

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = {};
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited[context] !== null) {
			return nodes;
		}
		visited[context] = context;
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;

},{"./RuleContext":19}],18:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

var Token = require('./Token').Token;
var ConsoleErrorListener = require('./error/ErrorListener').ConsoleErrorListener;
var ProxyErrorListener = require('./error/ErrorListener').ProxyErrorListener;

function Recognizer() {
    this._listeners = [ ConsoleErrorListener.INSTANCE ];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};


Recognizer.prototype.checkVersion = function(toolVersion) {
    var runtimeVersion = "4.5";
    if (runtimeVersion!==toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function(listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function() {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function() {
    var tokenNames = this.getTokenNames();
    if (tokenNames===null) {
        throw("The current recognizer does not provide a list of token names.");
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if(result===undefined) {
        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function() {
    var ruleNames = this.getRuleNames();
    if (ruleNames===null) {
        throw("The current recognizer does not provide a list of rule names.");
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if(result===undefined) {
        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function(tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !==undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};


// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function(e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};


// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function(t) {
    if (t===null) {
        return "<no token>";
    }
    var s = t.text;
    if (s===null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function() {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function(localctx , precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
	get : function() {
		return this._stateNumber;
	},
	set : function(state) {
		this._stateNumber = state;
	}
});


exports.Recognizer = Recognizer;

},{"./Token":20,"./error/ErrorListener":43}],19:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = require('./tree/Tree').RuleNode;
var INVALID_INTERVAL = require('./tree/Tree').INVALID_INTERVAL;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function() {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function() {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function() {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function() {
	return this;
};

RuleContext.prototype.getPayload = function() {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function() {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function(child) {
			return child.getText();
		}).join("");
	}
};

RuleContext.prototype.getChild = function(i) {
	return null;
};

RuleContext.prototype.getChildCount = function() {
	return 0;
};

RuleContext.prototype.accept = function(visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = require('./tree/Trees').Trees;


// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function(ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function(ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
					: "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};


},{"./tree/Tree":48,"./tree/Trees":49}],20:[function(require,module,exports){
//[The "BSD license"]
// Copyright (c) 2012 Terence Parr
// Copyright (c) 2012 Sam Harwell
// Copyright (c) 2014 Eric Vergnaud
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get : function() {
		return this._text;
	},
	set : function(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function() {
	return this.source[0];
};

Token.prototype.getInputStream = function() {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [ null, null ];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function() {
	var t = new CommonToken(this.source, this.type, this.channel, this.start,
			this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set : function(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function() {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
			txt + "',<" + this.type + ">" +
			(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
			this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;

},{}],21:[function(require,module,exports){
function arrayToString(a) {
	return "[" + a.join(", ") + "]";
}

String.prototype.hashCode = function(s) {
	var hash = 0;
	if (this.length === 0) {
		return hash;
	}
	for (var i = 0; i < this.length; i++) {
		var character = this.charCodeAt(i);
		hash = ((hash << 5) - hash) + character;
		hash = hash & hash; // Convert to 32bit integer
	}
	return hash;
};

function standardEqualsFunction(a,b) {
	return a.equals(b);
}

function standardHashFunction(a) {
	return a.hashString();
}

function Set(hashFunction, equalsFunction) {
	this.data = {};
	this.hashFunction = hashFunction || standardHashFunction;
	this.equalsFunction = equalsFunction || standardEqualsFunction;
	return this;
}

Object.defineProperty(Set.prototype, "length", {
	get : function() {
		return this.values().length;
	}
});

Set.prototype.add = function(value) {
	var hash = this.hashFunction(value);
	var key = "hash_" + hash.hashCode();
	if(key in this.data) {
		var i;
		var values = this.data[key];
		for(i=0;i<values.length; i++) {
			if(this.equalsFunction(value, values[i])) {
				return values[i];
			}
		}
		values.push(value);
		return value;
	} else {
		this.data[key] = [ value ];
		return value;
	}
};

Set.prototype.contains = function(value) {
	var hash = this.hashFunction(value);
	var key = hash.hashCode();
	if(key in this.data) {
		var i;
		var values = this.data[key];
		for(i=0;i<values.length; i++) {
			if(this.equalsFunction(value, values[i])) {
				return true;
			}
		}
	}
	return false;
};

Set.prototype.values = function() {
	var l = [];
	for(var key in this.data) {
		if(key.indexOf("hash_")===0) {
			l = l.concat(this.data[key]);
		}
	}
	return l;
};

Set.prototype.toString = function() {
	return arrayToString(this.values());
};

function BitSet() {
	this.data = [];
	return this;
}

BitSet.prototype.add = function(value) {
	this.data[value] = true;
};

BitSet.prototype.or = function(set) {
	var bits = this;
	Object.keys(set.data).map( function(alt) { bits.add(alt); });
};

BitSet.prototype.remove = function(value) {
	delete this.data[value];
};

BitSet.prototype.contains = function(value) {
	return this.data[value] === true;
};

BitSet.prototype.values = function() {
	return Object.keys(this.data);
};

BitSet.prototype.minValue = function() {
	return Math.min.apply(null, this.values());
};

BitSet.prototype.hashString = function() {
	return this.values().toString();
};

BitSet.prototype.equals = function(other) {
	if(!(other instanceof BitSet)) {
		return false;
	}
	return this.hashString()===other.hashString();
};

Object.defineProperty(BitSet.prototype, "length", {
	get : function() {
		return this.values().length;
	}
});

BitSet.prototype.toString = function() {
	return "{" + this.values().join(", ") + "}";
};

function AltDict() {
	this.data = {};
	return this;
}

AltDict.prototype.get = function(key) {
	key = "k-" + key;
	if(key in this.data){
		return this.data[key];
	} else {
		return null;
	}
};

AltDict.prototype.put = function(key, value) {
	key = "k-" + key;
	this.data[key] = value;
};

AltDict.prototype.values = function() {
	var data = this.data;
	var keys = Object.keys(this.data);
	return keys.map(function(key) {
		return data[key];
	});
};

function DoubleDict() {
	return this;
}

DoubleDict.prototype.get = function(a, b) {
	var d = this[a] || null;
	return d===null ? null : (d[b] || null);
};

DoubleDict.prototype.set = function(a, b, o) {
	var d = this[a] || null;
	if(d===null) {
		d = {};
		this[a] = d;
	}
	d[b] = o;
};


function escapeWhitespace(s, escapeSpaces) {
	s = s.replace("\t","\\t");
	s = s.replace("\n","\\n");
	s = s.replace("\r","\\r");
	if(escapeSpaces) {
		s = s.replace(" ","\u00B7");
	}
	return s;
}


exports.Set = Set;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;

},{}],22:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var LL1Analyzer = require('./../LL1Analyzer').LL1Analyzer;
var IntervalSet = require('./../IntervalSet').IntervalSet;

function ATN(grammarType , maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}
	
// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function(s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function(s) {
    if (s.nextTokenWithinRule !== null ) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readonly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function(s, ctx) {
    if ( ctx===undefined ) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function( state) {
    if ( state !== null ) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function( state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function( s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length-1;
    return s.decision;
};

ATN.prototype.getDecisionState = function( decision) {
    if (this.decisionToState.length===0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = require('./../Token').Token;

ATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {
    if ( stateNumber < 0 || stateNumber >= this.states.length ) {
        throw("Invalid state number.");
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;
},{"./../IntervalSet":12,"./../LL1Analyzer":13,"./../Token":20}],23:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = require('./ATNState').DecisionState;
var SemanticContext = require('./SemanticContext').SemanticContext;

function checkParams(params, isCfg) {
	if(params===null) {
		var result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		var props = {};
		props.state = params.state || null;
		props.alt = params.alt || null;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

function ATNConfig(params, config) {
	this.checkContext(params, config);
	params = checkParams(params);
	config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state!==null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt!==null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context!==null ? params.context : config.context;
    this.semanticContext = params.semanticContext!==null ? params.semanticContext :
        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function(params, config) {
	if((params.context===null || params.context===undefined) &&
			(config===null || config.context===null || config.context===undefined)) {
		this.context = null;
	}
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.
///
ATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            (this.context===null ? other.context===null : this.context.equals(other.context)) &&
            this.semanticContext.equals(other.semanticContext) &&
            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
    }
};

ATNConfig.prototype.shortHashString = function() {
    return "" + this.state.stateNumber + "/" + this.alt + "/" + this.semanticContext;
};

ATNConfig.prototype.hashString = function() {
    return "" + this.state.stateNumber + "/" + this.alt + "/" +
             (this.context===null ? "" : this.context.hashString()) +
             "/" + this.semanticContext.hashString();
};

ATNConfig.prototype.toString = function() {
    return "(" + this.state + "," + this.alt +
        (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
        (this.semanticContext !== SemanticContext.NONE ?
                ("," + this.semanticContext.toString())
                : "") +
        (this.reachesIntoOuterContext>0 ?
                (",up=" + this.reachesIntoOuterContext)
                : "") + ")";
};


function LexerATNConfig(params, config) {
	ATNConfig.call(this, params, config);
    
    // This is the backing field for {@link //getLexerActionExecutor}.
	var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.hashString = function() {
    return "" + this.state.stateNumber + this.alt + this.context +
            this.semanticContext + (this.passedThroughNonGreedyDecision ? 1 : 0) +
            this.lexerActionExecutor;
};

LexerATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (!(other instanceof LexerATNConfig)) {
        return false;
    } else if (this.passedThroughNonGreedyDecision !== other.passedThroughNonGreedyDecision) {
        return false;
    } else if (this.lexerActionExecutor !== other.lexerActionExecutor) {
        return false;
    } else {
        return ATNConfig.prototype.equals.call(this, other);
    }
};

LexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {
    return source.passedThroughNonGreedyDecision ||
        (target instanceof DecisionState) && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;
},{"./ATNState":28,"./SemanticContext":35}],24:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = require('./ATN').ATN;
var Utils = require('./../Utils');
var Set = Utils.Set;
var SemanticContext = require('./SemanticContext').SemanticContext;
var merge = require('./../PredictionContext').merge;

function hashATNConfig(c) {
	return c.shortHashString();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	}
	if ( a===null || b===null ) {
		return false;
	}
	return a.state.stateNumber===b.state.stateNumber &&
		a.alt===b.alt && a.semanticContext.equals(b.semanticContext);
}


function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readonly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashString = "-1";

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function(config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readonly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashString = "-1";
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function() {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function() {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get : function() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function(interpreter) {
	if (this.readonly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function(coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ATNConfigSet)) {
		return false;
	}
	return this.configs !== null && this.configs.equals(other.configs) &&
			this.fullCtx === other.fullCtx &&
			this.uniqueAlt === other.uniqueAlt &&
			this.conflictingAlts === other.conflictingAlts &&
			this.hasSemanticContext === other.hasSemanticContext &&
			this.dipsIntoOuterContext === other.dipsIntoOuterContext;
};

ATNConfigSet.prototype.hashString = function() {
	if (this.readonly) {
		if (this.cachedHashString === "-1") {
			this.cachedHashString = this.hashConfigs();
		}
		return this.cachedHashString;
	} else {
		return this.hashConfigs();
	}
};

ATNConfigSet.prototype.hashConfigs = function() {
	var s = "";
	this.configs.map(function(c) {
		s += c.toString();
	});
	return s;
};

Object.defineProperty(ATNConfigSet.prototype, "length", {
	get : function() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function() {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function() {
	if (this.readonly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashString = "-1";
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function(readonly) {
	this.readonly = readonly;
	if (readonly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function() {
	return Utils.arrayToString(this.configs) +
		(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
		(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
		(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
		(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;

},{"./../PredictionContext":17,"./../Utils":21,"./ATN":22,"./SemanticContext":35}],25:[function(require,module,exports){
//[The "BSD license"]
// Copyright (c) 2013 Terence Parr
// Copyright (c) 2013 Sam Harwell
// Copyright (c) 2014 Eric Vergnaud
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

function ATNDeserializationOptions(copyFrom) {
	if(copyFrom===undefined) {
		copyFrom = null;
	}
	this.readOnly = false;
    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;

    return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;

},{}],26:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var Token = require('./../Token').Token;
var ATN = require('./ATN').ATN;
var ATNType = require('./ATNType').ATNType;
var ATNStates = require('./ATNState');
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = require('./Transition');
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = require('./../IntervalSet').IntervalSet;
var Interval = require('./../IntervalSet').Interval;
var ATNDeserializationOptions = require('./ATNDeserializationOptions').ATNDeserializationOptions;
var LexerActions = require('./LexerAction');
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID ];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = BASE_SERIALIZED_UUID;

function initArray( length, value) {
	var tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

function ATNDeserializer (options) {
	
    if ( options=== undefined || options === null ) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;
    
    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.index(feature);
    if (idx1<0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.index(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function(data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = this.readSets(atn);
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function(data) {
	var adjust = function(c) {
        var v = c.charCodeAt(0);
        return v>1  ? v-2 : -1;
	};
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function() {
    var version = this.readInt();
    if ( version !== SERIALIZED_VERSION ) {
        throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
    }
};

ATNDeserializer.prototype.checkUUID = function() {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
        throw ("Could not deserialize ATN with UUID: " + uuid +
                        " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function() {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function(atn) {
	var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for(var i=0; i<nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype===ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) { // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if(s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
	// state instances have been initialized
    for (j=0; j<loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j=0; j<endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }
    
    var numNonGreedyStates = this.readInt();
    for (j=0; j<numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j=0; j<numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function(atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER ) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i=0; i<nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if ( atn.grammarType === ATNType.LEXER ) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function(atn) {
    var nmodes = this.readInt();
    for (var i=0; i<nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function(atn) {
    var sets = [];
    var m = this.readInt();
    for (var i=0; i<m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof!==0) {
            iset.addOne(-1);
        }
        for (var j=0; j<n; j++) {
            var i1 = this.readInt();
            var i2 = this.readInt();
            iset.addRange(i1, i2);
        }
    }
    return sets;
};

ATNDeserializer.prototype.readEdges = function(atn, sets) {
	var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i=0; i<nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for (j=0; j<state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
			var outermostPrecedenceReturn = -1;
			if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
				if (t.precedence === 0) {
					outermostPrecedenceReturn = t.target.ruleIndex;
				}
			}

			trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw ("IllegalState");
            }
            // block end states can only be associated to a single block start
			// state
            if ( state.endState.startState !== null) {
                throw ("IllegalState");
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function(atn) {
    var ndecisions = this.readInt();
    for (var i=0; i<ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function(atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i=0; i<count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {
	var i;
    var count = atn.ruleToStartState.length;
    for(i=0; i<count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for(i=0; i<count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {
	var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;
    
    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw ("Couldn't identify final state of the precedence rule prefix section.");
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }
    
    // all non-excluded transitions that currently target end state need to
	// target blockEnd instead
    for(i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for(var j=0; j<state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
	// instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while ( count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count-1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {
    if ( state.ruleIndex !== idx) {
        return null;
    }
    if (!( state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!( maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions &&
        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//precedenceRuleDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {
	for(var i=0; i<atn.states.length; i++) {
		var state = atn.states[i];
		if (!( state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if ( maybeLoopEndState.epsilonOnlyTransitions &&
                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                    state.precedenceRuleDecision = true;
                }
            }
        }
	}
};

ATNDeserializer.prototype.verifyATN = function(atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
	for(var i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else  if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw("IllegalState");
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
        }
	}
};

ATNDeserializer.prototype.checkCondition = function(condition, message) {
    if (!condition) {
        if (message === undefined || message===null) {
            message = "IllegalState";
        }
        throw (message);
    }
};

ATNDeserializer.prototype.readInt = function() {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function() {
    var low = this.readInt();
    var high = this.readInt();
    return low | (high << 16);
};

ATNDeserializer.prototype.readLong = function() {
    var low = this.readInt32();
    var high = this.readInt32();
    return (low & 0x00000000FFFFFFFF) | (high << 32);
};

function createByteToHex() {
	var bth = [];
	for (var i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

var byteToHex = createByteToHex();
	
ATNDeserializer.prototype.readUUID = function() {
	var bb = [];
	for(var i=7;i>=0;i--) {
		var int = this.readInt();
		/* jshint bitwise: false */
		bb[(2*i)+1] = int & 0xFF;
		bb[2*i] = (int >> 8) & 0xFF;
	}
    return byteToHex[bb[0]] + byteToHex[bb[1]] +
    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
    byteToHex[bb[10]] + byteToHex[bb[11]] +
    byteToHex[bb[12]] + byteToHex[bb[13]] +
    byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch(type) {
    case Transition.EPSILON:
        return new EpsilonTransition(target);
    case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
    case Transition.RULE:
        return new RuleTransition(atn.states[arg1], arg2, arg3, target);
    case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
    case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
    case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.SET:
        return new SetTransition(target, sets[arg1]);
    case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
    case Transition.WILDCARD:
        return new WildcardTransition(target);
    default:
        throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function() { return new BasicState(); };
        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };
        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };
        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };
        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };
        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };
        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };
        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };
        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };
        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };
        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };
        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };
        this.stateFactories = sf;
    }
    if (type>this.stateFactories.length || this.stateFactories[type] === null) {
        throw("The specified state type " + type + " is not valid.");
    } else {
        var s = this.stateFactories[type]();
        if (s!==null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };
        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };
        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };
        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };
        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };
        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };
        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };
        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };
        this.actionFactories = af;
    }
    if (type>this.actionFactories.length || this.actionFactories[type] === null) {
        throw("The specified lexer action type " + type + " is not valid.");
    } else {
        return this.actionFactories[type](data1, data2);
    }
};
   

exports.ATNDeserializer = ATNDeserializer;
},{"./../IntervalSet":12,"./../Token":20,"./ATN":22,"./ATNDeserializationOptions":25,"./ATNState":28,"./ATNType":29,"./LexerAction":31,"./Transition":36}],27:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

var DFAState = require('./../dfa/DFAState').DFAState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var getCachedPredictionContext = require('./../PredictionContext').getCachedPredictionContext;

function ATNSimulator(atn, sharedContextCache) {
	
    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


ATNSimulator.prototype.getCachedContext = function(context) {
    if (this.sharedContextCache ===null) {
        return context;
    }
    var visited = {};
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;

},{"./../PredictionContext":17,"./../dfa/DFAState":40,"./ATNConfigSet":24}],28:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects
    this.epsilonOnlyTransitions = false;
    // Track the transitions emanating from this ATN state.
    this.transitions = [];
    // Used to cache lookahead during parsing, not used during construction
    this.nextTokenWithinRule = null;
    return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function() {
	return this.stateNumber;
};

ATNState.prototype.equals = function(other) {
    if (other instanceof ATNState) {
        return this.stateNumber===other.stateNumber;
    } else {
        return false;
    }
};

ATNState.prototype.isNonGreedyExitState = function() {
    return false;
};


ATNState.prototype.addTransition = function(trans, index) {
	if(index===undefined) {
		index = -1;
	}
    if (this.transitions.length===0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
    }
    if (index===-1) {
        this.transitions.push(trans);
    } else {
        this.transitions.splice(index, 1, trans);
    }
};

function BasicState() {
	ATNState.call(this);
    this.stateType = ATNState.BASIC;
    return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;


function DecisionState() {
	ATNState.call(this);
    this.decision = -1;
    this.nonGreedy = false;
    return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;


//  The start of a regular {@code (...)} block.
function BlockStartState() {
	DecisionState.call(this);
	this.endState = null;
	return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;


function BasicBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.BLOCK_START;
	return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;


// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
	ATNState.call(this);
	this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;


// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
	ATNState.call(this);
    this.stateType = ATNState.RULE_STOP;
    return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
	ATNState.call(this);
	this.stateType = ATNState.RULE_START;
	this.stopState = null;
	this.isPrecedenceRule = false;
	return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
	DecisionState.call(this);
	this.stateType = ATNState.PLUS_LOOP_BACK;
	return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;
        

// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.STAR_BLOCK_START;
	return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;


function StarLoopbackState() {
	ATNState.call(this);
	this.stateType = ATNState.STAR_LOOP_BACK;
	return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;


function StarLoopEntryState() {
	DecisionState.call(this);
	this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
    this.precedenceRuleDecision = null;
    return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;


// Mark the end of a * or + loop.
function LoopEndState() {
	ATNState.call(this);
	this.stateType = ATNState.LOOP_END;
	this.loopBackState = null;
	return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;


// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
	DecisionState.call(this);
	this.stateType = ATNState.TOKEN_START;
	return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;

},{}],29:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {
	
}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;


},{}],30:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = require('./../Token').Token;
var Lexer = require('./../Lexer').Lexer;
var ATN = require('./ATN').ATN;
var ATNSimulator = require('./ATNSimulator').ATNSimulator;
var DFAState = require('./../dfa/DFAState').DFAState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var OrderedATNConfigSet = require('./ATNConfigSet').OrderedATNConfigSet;
var PredictionContext = require('./../PredictionContext').PredictionContext;
var SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;
var RuleStopState = require('./ATNState').RuleStopState;
var LexerATNConfig = require('./ATNConfig').LexerATNConfig;
var Transition = require('./Transition').Transition;
var LexerActionExecutor = require('./LexerActionExecutor').LexerActionExecutor;
var LexerNoViableAltException = require('./../error/Errors').LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function() {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function(simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function(input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function() {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function(input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (this.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (this.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function(input, ds0) {
	if (this.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) { // while more work
		if (this.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function(s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if(target===undefined) {
		target = null;
	}
	if (this.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function(input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) { // we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex,
				prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,
		reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = (cfg.alt === skipAlt);
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (this.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg
					.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = (t === Token.EOF);
				var config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
				if (this.closure(input, config, reach,
						currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,
		startIndex, index, line, charPos) {
	if (this.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function(trans, t) {
	if (trans.matches(t, 0, 0xFFFE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function(input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function(input, config, configs,
		currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (this.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (this.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.getRuleNames()[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg,
							configs, currentAltReachedAcceptState, speculative,
							treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs,
					currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,
		configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (this.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
					this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig( { state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state:trans.target}, config);
	} else if (trans.serializationType === Transition.ATOM ||
				trans.serializationType === Transition.RANGE ||
				trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, 0xFFFF)) {
				cfg = new LexerATNConfig( { state:trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,
		predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (this.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function(configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var hash = proposed.hashString();
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states[hash] || null;
	if (existing!==null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states[hash] = newState;
	return newState;
};

LexerATNSimulator.prototype.getDFA = function(mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function(input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function(input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function(tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;

},{"./../Lexer":14,"./../PredictionContext":17,"./../Token":20,"./../dfa/DFAState":40,"./../error/Errors":45,"./ATN":22,"./ATNConfig":23,"./ATNConfigSet":24,"./ATNSimulator":27,"./ATNState":28,"./LexerActionExecutor":32,"./Transition":36}],31:[function(require,module,exports){
//
 //[The "BSD license"]
 // Copyright (c) 2013 Terence Parr
 // Copyright (c) 2013 Sam Harwell
 // Copyright (c) 2014 Eric Vergnaud
 // All rights reserved.
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions
 // are met:
 //
 // 1. Redistributions of source code must retain the above copyright
 //    notice, this list of conditions and the following disclaimer.
 // 2. Redistributions in binary form must reproduce the above copyright
 //    notice, this list of conditions and the following disclaimer in the
 //    documentation and/or other materials provided with the distribution.
 // 3. The name of the author may not be used to endorse or promote products
 //    derived from this software without specific prior written permission.
 //
 // THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 // IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 // OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 // IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 // INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 // NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 // THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 //

function LexerActionType() {
}

LexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashString = function() {
    return "" + this.actionType;
};

LexerAction.prototype.equals = function(other) {
    return this === other;
};



//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
	LexerAction.call(this, LexerActionType.SKIP);
	return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function(lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function() {
	return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
	LexerAction.call(this, LexerActionType.TYPE);
	this.type = type;
	return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function(lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.hashString = function() {
	return "" + this.actionType + this.type;
};


LexerTypeAction.prototype.equals = function(other) {
    if(this === other) {
        return true;
    } else if (! (other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function() {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
	LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function(lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.hashString = function() {
    return "" + this.actionType + this.mode;
};

LexerPushModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function() {
	return "pushMode(" + this.mode + ")";
};


// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
	LexerAction.call(this,LexerActionType.POP_MODE);
	return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function(lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function() {
	return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
	LexerAction.call(this, LexerActionType.MORE);
	return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function(lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function() {
    return "more";
};


// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
	LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function(lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.hashString = function() {
	return "" + this.actionType + this.mode;
};

LexerModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function() {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


    // Constructs a custom lexer action with the specified rule and action
    // indexes.
    //
    // @param ruleIndex The rule index to use for calls to
    // {@link Recognizer//action}.
    // @param actionIndex The action index to use for calls to
    // {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
	LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.hashString = function() {
    return "" + this.actionType + this.ruleIndex + this.actionIndex;
};

LexerCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
	LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function(lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.hashString = function() {
    return "" + this.actionType + this.channel;
};

LexerChannelAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function() {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
	LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function(lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.hashString = function() {
    return "" + this.actionType + this.offset + this.action;
};

LexerIndexedCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};


exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;
},{}],32:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var LexerIndexedCustomAction = require('./LexerAction').LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this.hashString = lexerActions.toString(); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([ lexerAction ]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent &&
				!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
					this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = (startIndex + offset) !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashString = function() {
	return this.hashString;
};

LexerActionExecutor.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else {
		return this.hashString === other.hashString &&
				this.lexerActions === other.lexerActions;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;

},{"./LexerAction":31}],33:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = require('./../Utils');
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = require('./ATN').ATN;
var ATNConfig = require('./ATNConfig').ATNConfig;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var Token = require('./../Token').Token;
var DFAState = require('./../dfa/DFAState').DFAState;
var PredPrediction = require('./../dfa/DFAState').PredPrediction;
var ATNSimulator = require('./ATNSimulator').ATNSimulator;
var PredictionMode = require('./PredictionMode').PredictionMode;
var RuleContext = require('./../RuleContext').RuleContext;
var ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;
var SemanticContext = require('./SemanticContext').SemanticContext;
var StarLoopEntryState = require('./ATNState').StarLoopEntryState;
var RuleStopState = require('./ATNState').RuleStopState;
var PredictionContext = require('./../PredictionContext').PredictionContext;
var Interval = require('./../IntervalSet').Interval;
var Transitions = require('./Transition');
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = require('./../error/Errors').NoViableAltException;

var SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;
var predictionContextFromRuleContext = require('./../PredictionContext').predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;


ParserATNSimulator.prototype.reset = function() {
};

ParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision +
                               " exec LA(1)==" + this.getLookaheadName(input) +
                               " line " + input.LT(1).line + ":" +
                               input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;
    
    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0===null) {
            if (outerContext===null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }
            // If this is not a precedence DFA, we check the ATN start state
            // to determine if this ATN start state is the decision for the
            // closure block that determines whether a precedence rule
            // should continue or complete.
            //
            if (!dfa.precedenceDfa && (dfa.atnStartState instanceof StarLoopEntryState)) {
                if (dfa.atnStartState.precedenceRuleDecision) {
                    dfa.setPrecedenceDfa(true);
                }
            }
            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if( dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
      // if the set is empty, there is no viable alternative for current symbol
      // does the state uniquely predict an alternative?
      // does the state have a conflict that would prevent us from
      //   putting it on the work list?

// We also have some key operations to do:
      // add an edge from previous DFA state to potentially new DFA state, D,
      //   upon current symbol but only if adding to work list, which means in all
      //   cases except no viable alternative (and possibly non-greedy decisions?)
      // collecting predicates and adding semantic context to DFA accept states
      // adding rule context to context-sensitive DFA accept states
      // consuming an input symbol
      // reporting a conflict
      // reporting an ambiguity
      // reporting a context sensitivity
      // reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while(true) { // while more work
        var D = this.getExistingTargetState(previousD, t);
        if(D===null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if(D===ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates!==null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if(conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length===1) {
                    if(this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext +" in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates===null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length===0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length===1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {
    var edges = previousD.edges;
    if (edges===null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {
   var reach = this.computeReachSet(previousD.configs, t, false);
    if(reach===null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                    ", previous=" + previousD.configs +
                    ", configs=" + reach +
                    ", predict=" + predictedAlt +
                    ", allSubsetsConflict=" +
                    PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                    this.getConflictingAlts(reach));
    }
    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if( D.predicates!==null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred!==null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over
                                     s0,
                                     input,
                                     startIndex,
                                     outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext "+s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) { // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach===null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if(this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" +
                  PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if( t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if( this.mergeCache===null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.
    
    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i=0; i<closure.items.length;i++) {
        var c = closure.items[i];
        if(this.debug) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates===null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if(this.debug) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for(var j=0;j<c.state.transitions.length;j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target!==null) {
                var cfg = new ATNConfig({state:target}, c);
                intermediate.add(cfg, this.mergeCache);
                if(this.debug) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates===null && t!==Token.EOF) {
        if (intermediate.items.length===1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach===null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k=0; k<intermediate.items.length;k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
        for (var l=0; l<skippedStopStates.length;l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length===0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length;i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for(var i=0;i<p.transitions.length;i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {
	var config;
	var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext===null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for(i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
		if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context!==null && context.equals(config.context)) {
                // eliminated
                continue;
            }
		}
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for(var i=0;i<configs.items.length;i++) {
        var c = configs.items[i];
        if(ambigAlts.contains( c.alt )) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i =1;i< nalts+1;i++) {
        var pred = altToPred[i] || null;
        if (pred===null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts===0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i=1; i<altToPred.length;i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if( ambigAlts!==null && ambigAlts.contains( i )) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (! containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length>0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};
    
ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {
    var alts = [];
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
            if(alts.indexOf(c.alt)<0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length===0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for(var i=0;i<predPredictions.length;i++) {
    	var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                             fullCtx, initialDepth, treatEofAsEpsilon);
};


ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug) {
        console.log("closure(" + config.toString(this.parser,true) + ")");
        console.log("configs(" + configs.toString() + ")");
        if(config.reachesIntoOuterContext>50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (! config.context.isEmpty()) {
            for ( var i =0; i<config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates,
                                 fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                returnState = this.atn.states[config.context.getReturnState(i)];
                newContext = config.context.getParent(i); // "pop" return state
                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if( fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};

// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (! p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for(var i = 0;i<p.transitions.length; i++) {
        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c!==null) {
			if (!t.isEpsilon && closureBusy.add(c)!==c){
				// avoid infinite recursion for EOF* and EOF+
				continue;
			}
            var newDepth = depth;
            if ( config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.

                if (closureBusy.add(c)!==c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }

				if (this._dfa !== null && this._dfa.precedenceDfa) {
					if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
						c.precedenceFilterSuppressed = true;
					}
				}

                c.reachesIntoOuterContext += 1;
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else if (t instanceof RuleTransition) {
                // latch when newDepth goes negative - once we step out of the entry context we can't return
                if (newDepth >= 0) {
                    newDepth += 1;
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};

ParserATNSimulator.prototype.getRuleName = function( index) {
    if (this.parser!==null && index>=0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch(t.serializationType) {
    case Transition.RULE:
        return this.ruleTransition(config, t);
    case Transition.PRECEDENCE:
        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.PREDICATE:
        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.ACTION:
        return this.actionTransition(config, t);
    case Transition.EPSILON:
        return new ATNConfig({state:t.target}, config);
    case Transition.ATOM:
    case Transition.RANGE:
    case Transition.SET:
        // EOF transitions act like epsilon transitions after the first EOF
        // transition is traversed
        if (treatEofAsEpsilon) {
            if (t.matches(Token.EOF, 0, 1)) {
                return new ATNConfig({state: t.target}, config);
            }
        }
        return null;
    default:
    	return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function(config, t) {
    if (this.debug) {
        console.log("ACTION edge " + t.ruleIndex + ":" + t.actionIndex);
    }
    return new ATNConfig({state:t.target}, config);
};

ParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser!==null) {
        	console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser!==null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function(config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({state:t.target, context:newContext}, config );
};

ParserATNSimulator.prototype.getConflictingAlts = function(configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

 // Sam pointed out a problem with the previous definition, v3, of
 // ambiguous states. If we have another state associated with conflicting
 // alternatives, we should keep going. For example, the following grammar
 //
 // s : (ID | ID ID?) ';' ;
 //
 // When the ATN simulation reaches the state before ';', it has a DFA
 // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
 // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
 // because alternative to has another way to continue, via [6|2|[]].
 // The key is that we have a single state that has config's only associated
 // with a single alternative, 2, and crucially the state transitions
 // among the configurations are all non-epsilon transitions. That means
 // we don't consider any conflicts that include alternative 2. So, we
 // ignore the conflict between alts 1 and 2. We ignore a set of
 // conflicting alts when there is an intersection with an alternative
 // associated with a single alt state in the state&rarr;config-list map.
 //
 // It's also the case that we might have two conflicting configurations but
 // also a 3rd nonconflicting configuration for a different alternative:
 // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
 //
 // a : A | A | A B ;
 //
 // After matching input A, we reach the stop state for rule A, state 1.
 // State 8 is the state right before B. Clearly alternatives 1 and 2
 // conflict and no amount of further lookahead will separate the two.
 // However, alternative 3 will be able to continue and so we do not
 // stop working on this state. In the previous example, we're concerned
 // with states associated with the conflicting alternatives. Here alt
 // 3 is not associated with the conflicting configs, but since we can continue
 // looking for input reasonably, I don't declare the state done. We
 // ignore a set of conflicting alts when we have an alternative
 // that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function( t) {
    if (t===Token.EOF) {
        return "EOF";
    }
    if( this.parser!==null && this.parser.literalNames!==null) {
        if (t >= this.parser.literalNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            return this.parser.literalNames[t] + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function(input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for(var i=0; i<decs.length; i++) {
    	var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length>0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom "+ this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = (t instanceof NotSetTransition);
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function(configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for(var i=0;i<configs.items.length;i++) {
    	var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt // found first alt
        } else if( c.alt!==alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {
    if( this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to===null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_===null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges===null) {
        from_.edges = [];
    }
    from_.edges[t+1] = to; // connect

    if (this.debug) {
        var names = this.parser===null ? null : this.parser.literalNames;
        console.log("DFA=\n" + dfa.toString(names));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function(dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var hash = D.hashString();
    var existing = dfa.states[hash] || null;
    if(existing!==null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (! D.configs.readonly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states[hash] = D;
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};
    
// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,
                               exact, ambigAlts, configs ) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};
            
exports.ParserATNSimulator = ParserATNSimulator;
},{"./../IntervalSet":12,"./../ParserRuleContext":16,"./../PredictionContext":17,"./../RuleContext":19,"./../Token":20,"./../Utils":21,"./../dfa/DFAState":40,"./../error/Errors":45,"./ATN":22,"./ATNConfig":23,"./ATNConfigSet":24,"./ATNSimulator":27,"./ATNState":28,"./PredictionMode":34,"./SemanticContext":35,"./Transition":36}],34:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = require('./../Utils').Set;
var BitSet = require('./../Utils').BitSet;
var AltDict = require('./../Utils').AltDict;
var ATN = require('./ATN').ATN;
var RuleStopState = require('./ATNState').RuleStopState;

function PredictionMode() {
	return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;


//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for(var i=0;i<configs.items.length;i++) {
            	var c = configs.items[i];
                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
	}
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
	}
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function(altsets) {
    return ! PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length===1) {
            return true;
        }
	}
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length>1) {
            return true;
        }
	}
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function(altsets) {
    var first = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts!==first) {
            return false;
        }
	}
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function(altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length===1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function(altsets) {
    var all = new BitSet();
    altsets.map( function(alts) { all.or(alts); });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
PredictionMode.getConflictingAltSubsets = function(configs) {
    var configToAlts = {};
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        var key = "key_" + c.state.stateNumber + "/" + c.context;
        var alts = configToAlts[key] || null;
        if (alts === null) {
            alts = new BitSet();
            configToAlts[key] = alts;
        }
        alts.add(c.alt);
	}
	var values = [];
	for(var k in configToAlts) {
		if(k.indexOf("key_")!==0) {
			continue;
		}
		values.push(configToAlts[k]);
	}
    return values;
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function(configs) {
    var m = new AltDict();
    configs.items.map(function(c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for(var i=0;i<values.length;i++) {
        if (values[i].length===1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function(altsets) {
    var result = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        var minAlt = alts.minValue();
        if(result===null) {
            result = minAlt;
        } else if(result!==minAlt) { // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
	}
    return result;
};

exports.PredictionMode = PredictionMode;
},{"./../Utils":21,"./ATN":22,"./ATNState":28}],35:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = require('./../Utils').Set;

function SemanticContext() {
	return this;
}

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function(parser, outerContext) {
};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function(parser, outerContext) {
	return this;
};

SemanticContext.andContext = function(a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function(a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();


Predicate.prototype.evaluate = function(parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.hashString = function() {
	return "" + this.ruleIndex + "/" + this.predIndex + "/" + this.isCtxDependent;
};

Predicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex &&
				this.predIndex === other.predIndex &&
				this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function() {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function(parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function(other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.hashString = function() {
	return "31";
};

PrecedencePredicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function() {
	return "{"+this.precedence+">=prec}?";
};



PrecedencePredicate.filterPrecedencePredicates = function(set) {
	var result = [];
	set.values().map( function(context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};


// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map( function(p) {
			if(reduced===null || p.precedence<reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.hashString = function() {
	return "" + this.opnds + "/AND";
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function(o) {
		result = result === null ? o : SemanticPredicate.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function(a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length-1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.hashString = function() {
	return "" + this.opnds + "/OR"; 
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function(o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;

},{"./../Utils":21}],36:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = require('./../Token').Token;
var Interval = require('./../IntervalSet').Interval;
var IntervalSet = require('./../IntervalSet').IntervalSet;
var Predicate = require('./SemanticContext').Predicate;
var PrecedencePredicate = require('./SemanticContext').PrecedencePredicate;

function Transition (target) {
    // The target of this transition.
    if (target===undefined || target===null) {
        throw "target cannot be null.";
    }
    this.target = target;
    // Are we epsilon, action, sempred?
    this.isEpsilon = false;
    this.label = null;
    return this;
}
    // constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
	Transition.call(this, target);
	this.label_ = label; // The token type or character value; or, signifies special label.
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
    return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function() {
	var s = new IntervalSet();
    s.addOne(this.label_);
    return s;
};

AtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
    return this.label_ === symbol;
};

AtomTransition.prototype.toString = function() {
	return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
	Transition.call(this, ruleStart);
    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
    this.precedence = precedence;
    this.followState = followState; // what node to begin computations following ref to rule
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
    return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};


function EpsilonTransition(target, outermostPrecedenceReturn) {
	Transition.call(this, target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

EpsilonTransition.prototype.toString = function() {
	return "epsilon";
};

function RangeTransition(target, start, stop) {
	Transition.call(this, target);
	this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
    return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function() {
    var s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
};

RangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function() {
	return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
	Transition.call(this, target);
	return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PredicateTransition.prototype.getPredicate = function() {
	return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function() {
	return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
	Transition.call(this, target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;


ActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

ActionTransition.prototype.toString = function() {
	return "action_" + this.ruleIndex + ":" + this.actionIndex;
};
        

// A transition containing a set of values.
function SetTransition(target, set) {
	Transition.call(this, target);
	this.serializationType = Transition.SET;
    if (set !==undefined && set !==null) {
        this.label = set;
    } else {
        this.label = new IntervalSet();
        this.label.addOne(Token.INVALID_TYPE);
    }
    return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return this.label.contains(symbol);
};
        

SetTransition.prototype.toString = function() {
	return this.label.toString();
};

function NotSetTransition(target, set) {
	SetTransition.call(this, target, set);
	this.serializationType = Transition.NOT_SET;
	return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
			!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function() {
	return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
	Transition.call(this, target);
	this.serializationType = Transition.WILDCARD;
	return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;


WildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function() {
	return ".";
};

function PrecedencePredicateTransition(target, precedence) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
    return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function() {
	return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function() {
	return this.precedence + " >= _p";
};
        
exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;
},{"./../IntervalSet":12,"./../Token":20,"./SemanticContext":35}],37:[function(require,module,exports){
exports.ATN = require('./ATN').ATN;
exports.ATNDeserializer = require('./ATNDeserializer').ATNDeserializer;
exports.LexerATNSimulator = require('./LexerATNSimulator').LexerATNSimulator;
exports.ParserATNSimulator = require('./ParserATNSimulator').ParserATNSimulator;
exports.PredictionMode = require('./PredictionMode').PredictionMode;
},{"./ATN":22,"./ATNDeserializer":26,"./LexerATNSimulator":30,"./ParserATNSimulator":33,"./PredictionMode":34}],38:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var DFAState = require('./DFAState').DFAState;
var ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;
var DFASerializer = require('./DFASerializer').DFASerializer;
var LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;

function DFAStatesSet() {
	return this;
}

Object.defineProperty(DFAStatesSet.prototype, "length", {
	get : function() {
		return Object.keys(this).length;
	}
});

function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new DFAStatesSet();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function(precedence) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function(precedence, startState) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function(precedenceDfa) {
	if (this.precedenceDfa!==precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get : function() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function() {
	// states_ is a map of state/state, where key=value
	var keys = Object.keys(this._states);
	var list = [];
	for(var i=0;i<keys.length;i++) {
		list.push(this._states[keys[i]]);
	}
	return list.sort(function(a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function(literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function() {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;

},{"./../atn/ATNConfigSet":24,"./DFASerializer":39,"./DFAState":40}],39:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.

//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:

//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.

//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
	this.dfa = dfa;
	this.literalNames = literalNames || [];
	this.symbolicNames = symbolicNames || [];
	return this;
}

DFASerializer.prototype.toString = function() {
   if(this.dfa.s0 === null) {
       return null;
   }
   var buf = "";
   var states = this.dfa.sortedStates();
   for(var i=0;i<states.length;i++) {
       var s = states[i];
       if(s.edges!==null) {
            var n = s.edges.length;
            for(var j=0;j<n;j++) {
                var t = s.edges[j] || null;
                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
       }
   }
   return buf.length===0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function(i) {
    if (i===0) {
        return "EOF";
    } else if(this.literalNames !==null || this.symbolicNames!==null) {
        return this.literalNames[i-1] || this.symbolicNames[i-1];
    } else {
        return String.fromCharCode(i-1);
    }
};

DFASerializer.prototype.getStateString = function(s) {
    var baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
    if(s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
	DFASerializer.call(this, dfa, null);
	return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function(i) {
	return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;


},{}],40:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

var ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function() {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function() {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function(other) {
	// compare set of ATN configurations in this set with other
	if (this === other) {
		return true;
	} else if (!(other instanceof DFAState)) {
		return false;
	} else {
		return this.configs.equals(other.configs);
	}
};

DFAState.prototype.toString = function() {
	return "" + this.stateNumber + ":" + this.hashString();
};

DFAState.prototype.hashString = function() {
	return "" +  this.configs +
			(this.isAcceptState ?
					"=>" + (this.predicates !== null ?
								this.predicates :
								this.prediction) :
					"");
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;
},{"./../atn/ATNConfigSet":24}],41:[function(require,module,exports){
exports.DFA = require('./DFA').DFA;
exports.DFASerializer = require('./DFASerializer').DFASerializer;
exports.LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;
exports.PredPrediction = require('./DFAState').PredPrediction;

},{"./DFA":38,"./DFASerializer":39,"./DFAState":40}],42:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = require('./../Utils').BitSet;
var ErrorListener = require('./ErrorListener').ErrorListener;
var Interval = require('./../IntervalSet').Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,
		startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function(
		recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function(
		recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;
},{"./../IntervalSet":12,"./../Utils":21,"./ErrorListener":43}],43:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
	return this;
}

ErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
};

ErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
};

ErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
};

ErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
};

function ConsoleErrorListener() {
	ErrorListener.call(this);
	return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
	ErrorListener.call(this);
    if (delegates===null) {
        throw "delegates";
    }
    this.delegates = delegates;
	return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });
};

ProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	this.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });
};

ProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	this.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;


},{}],44:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

var Token = require('./../Token').Token;
var Errors = require('./Errors');
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = require('./../atn/ATNState').ATNState;
var Interval = require('./../IntervalSet').Interval;
var IntervalSet = require('./../IntervalSet').IntervalSet;

function ErrorStrategy() {
	
}

ErrorStrategy.prototype.reset = function(recognizer){
};

ErrorStrategy.prototype.recoverInline = function(recognizer){
};

ErrorStrategy.prototype.recover = function(recognizer, e){
};

ErrorStrategy.prototype.sync = function(recognizer){
};

ErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){
};

ErrorStrategy.prototype.reportError = function(recognizer){
};



// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
	ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function(recognizer, e) {
   // if we've already reported an error and have not matched a token
   // yet successfully, don't report any errors.
    if(this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if ( e instanceof NoViableAltException ) {
        this.reportNoViableAlternative(recognizer, e);
    } else if ( e instanceof InputMismatchException ) {
        this.reportInputMismatch(recognizer, e);
    } else if ( e instanceof FailedPredicateException ) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function(recognizer, e) {
    if (this.lastErrorIndex===recognizer.getInputStream().index &&
        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
		// uh oh, another error at same token index and previously-visited
		// state in ATN; must be a case where LT(1) is in the recovery
		// token set so nothing got consumed. Consume a single token
		// at least to prevent an infinite loop; this is a failsafe.
		recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function(recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    if (la===Token.EOF || recognizer.atn.nextTokens(s).contains(la)) {
        return;
    }
    // Return but don't end recovery. only do that upon valid token match
    if(recognizer.isExpectedToken(la)) {
        return;
    }
    switch (s.stateType) {
    case ATNState.BLOCK_START:
    case ATNState.STAR_BLOCK_START:
    case ATNState.PLUS_BLOCK_START:
    case ATNState.STAR_LOOP_ENTRY:
       // report error and recover if possible
        if( this.singleTokenDeletion(recognizer) !== null) {
            return;
        } else {
            throw new InputMismatchException(recognizer);
        }
        break;
    case ATNState.PLUS_LOOP_BACK:
    case ATNState.STAR_LOOP_BACK:
        this.reportUnwantedToken(recognizer);
        var expecting = recognizer.getExpectedTokens();
        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        break;
    default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if(tokens !== null) {
        if (e.startToken.type===Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken, e.offendingToken));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
          " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " +
        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {
    if ( this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
          " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function(recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType) ){
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType===Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type===Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source,
        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
        -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {
    s = s.replace(/\n/g,"\\n");
    s = s.replace(/\r/g,"\\r");
    s = s.replace(/\t/g,"\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState>=0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while( ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
	DefaultErrorStrategy.call(this);
	return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function(recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};
    
// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function(recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;
},{"./../IntervalSet":12,"./../Token":20,"./../atn/ATNState":28,"./Errors":45}],45:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = require('./../atn/Transition').PredicateTransition;

function RecognitionException(params) {
	Error.call(this);
	if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
	} else {
		var stack = new Error().stack;
	}
	this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer!==null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function() {
    if (this.recognizer!==null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function() {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
	RecognitionException.call(this, {message:"", recognizer:lexer, input:input, ctx:null});
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function() {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex,this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
	ctx = ctx || recognizer._ctx;
	offendingToken = offendingToken || recognizer.getCurrentToken();
	startToken = startToken || recognizer.getCurrentToken();
	input = input || recognizer.getInputStream();
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:input, ctx:ctx});
    // Which configurations did we try at input.index() that couldn't match
	// input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
	RecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,
                         input:recognizer.getInputStream(), ctx:recognizer._ctx});
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
	Error.call(this);
	Error.captureStackTrace(this, ParseCancellationException);
	return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;

},{"./../atn/Transition":36}],46:[function(require,module,exports){
exports.RecognitionException = require('./Errors').RecognitionException;
exports.NoViableAltException = require('./Errors').NoViableAltException;
exports.LexerNoViableAltException = require('./Errors').LexerNoViableAltException;
exports.InputMismatchException = require('./Errors').InputMismatchException;
exports.FailedPredicateException = require('./Errors').FailedPredicateException;
exports.DiagnosticErrorListener = require('./DiagnosticErrorListener').DiagnosticErrorListener;
exports.BailErrorStrategy = require('./ErrorStrategy').BailErrorStrategy;
exports.ErrorListener = require('./ErrorListener').ErrorListener;
},{"./DiagnosticErrorListener":42,"./ErrorListener":43,"./ErrorStrategy":44,"./Errors":45}],47:[function(require,module,exports){
exports.atn = require('./atn/index');
exports.dfa = require('./dfa/index');
exports.tree = require('./tree/index');
exports.error = require('./error/index');
exports.Token = require('./Token').Token;
exports.CommonToken = require('./Token').Token;
exports.InputStream = require('./InputStream').InputStream;
exports.FileStream = require('./FileStream').FileStream;
exports.CommonTokenStream = require('./CommonTokenStream').CommonTokenStream;
exports.Lexer = require('./Lexer').Lexer;
exports.Parser = require('./Parser').Parser;
var pc = require('./PredictionContext');
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = require('./ParserRuleContext').ParserRuleContext;
exports.Interval = require('./IntervalSet').Interval;
exports.Utils = require('./Utils');

},{"./CommonTokenStream":9,"./FileStream":10,"./InputStream":11,"./IntervalSet":12,"./Lexer":14,"./Parser":15,"./ParserRuleContext":16,"./PredictionContext":17,"./Token":20,"./Utils":21,"./atn/index":37,"./dfa/index":41,"./error/index":46,"./tree/index":50}],48:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = require('./../Token').Token;
var Interval = require('./../IntervalSet').Interval;
var INVALID_INTERVAL = new Interval(-1, -2);

function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function(node) {
};

ParseTreeListener.prototype.visitErrorNode = function(node) {
};

ParseTreeListener.prototype.enterEveryRule = function(node) {
};

ParseTreeListener.prototype.exitEveryRule = function(node) {
};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function(i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function() {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function() {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function() {
	return 0;
};

TerminalNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function() {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function() {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function() {
	return true;
};

ErrorNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function(listener, t) {
	var errorNode = t instanceof ErrorNode ||
			(t.isErrorNode !== undefined && t.isErrorNode());
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function(listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function(listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;
},{"./../IntervalSet":12,"./../Token":20}],49:[function(require,module,exports){
/*
 * [The "BSD license"]
 *  Copyright (c) 2012 Terence Parr
 *  Copyright (c) 2012 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var Utils = require('./../Utils');
var Token = require('./../Token').Token;
var RuleNode = require('./Tree').RuleNode;
var ErrorNode = require('./Tree').ErrorNode;
var TerminalNode = require('./Tree').TerminalNode;
var ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;


/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {
}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function(tree, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
       ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if(c===0) {
        return s;
    }
    var res = "(" + s + ' ';
    if(c>0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for(var i=1;i<c;i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function(t, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
        ruleNames = recog.ruleNames;
    }
    if(ruleNames!==null) {
       if (t instanceof RuleNode) {
           return ruleNames[t.getRuleContext().ruleIndex];
       } else if ( t instanceof ErrorNode) {
           return t.toString();
       } else if(t instanceof TerminalNode) {
           if(t.symbol!==null) {
               return t.symbol.text;
           }
       }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token ) {
       return payload.text;
    }
    return t.getPayload().toString();
};


// Return ordered list of all children of this node
Trees.getChildren = function(t) {
	var list = [];
	for(var i=0;i<t.getChildCount();i++) {
		list.push(t.getChild(i));
	}
	return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function(t) {
    var ancestors = [];
    t = t.getParent();
    while(t!==null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};
   
Trees.findAllTokenNodes = function(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function(t, ruleIndex) {
	return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function(t, index, findTokens) {
	var nodes = [];
	Trees._findAllNodes(t, index, findTokens, nodes);
	return nodes;
};

Trees._findAllNodes = function(t, index, findTokens, nodes) {
	// check this node (the root) first
	if(findTokens && (t instanceof TerminalNode)) {
		if(t.symbol.type===index) {
			nodes.push(t);
		}
	} else if(!findTokens && (t instanceof ParserRuleContext)) {
		if(t.ruleIndex===index) {
			nodes.push(t);
		}
	}
	// check children
	for(var i=0;i<t.getChildCount();i++) {
		Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
	}
};

Trees.descendants = function(t) {
	var nodes = [t];
    for(var i=0;i<t.getChildCount();i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};


exports.Trees = Trees;
},{"./../ParserRuleContext":16,"./../Token":20,"./../Utils":21,"./Tree":48}],50:[function(require,module,exports){
var Tree = require('./Tree');
exports.Trees = require('./Tree').Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;
},{"./Tree":48}]},{},[6]);
